2.74.0 (stable):

Gio:
* ListStore: Add find()
* File: Add create_tmp()
  (Kjell Ahlstedt)

Documentation:
* File: Document create_for_parse_name()
  (Kjell Ahlstedt)


2.73.2 (unstable):

Glib:
* ustring: Add release()
  (Kjell Ahlstedt) Issue #101 (PBS)

Gio:
* ListStore: Don't derive a gtkmm__GListStore GType
  (Kjell Ahlstedt) Issue glib#2661
* DBus::Proxy: get_connection(), get_interface_info(): Add refreturn
  (Kjell Ahlstedt) Issue #102 (우정모)
* AppInfo: Add get_default_for_type_async/finish(),
  get_default_for_uri_scheme_async/finish()
* File: Add make_symbolic_link_async/finish()
* ListStore: Add property_n_items()
* Resolver: Add lookup_by_name_with_flags(),
  lookup_by_name_with_flags_async/finish()
  (Kjell Ahlstedt)

Documentation:
* Glib::RefPtr: Improve the documentation
  (Kjell Ahlstedt) Issue gtkmm#119 (David Marceau)
* Gio::Action: Improve the documentation
  (Kjell Ahlstedt) Issue #100 (Diederik van Lierop)

gmmproc:
* Improved handling of final types
  (Kjell Ahlstedt) Issue glib#2661
* Improve handling of gi-docgen syntax in C documentation
  (Kjell Ahlstedt)

Build:
* Meson build: Avoid unnecessary configuration warnings
  (Kjell Ahlstedt)
* Meson/MSVC: Add more warnings to ignore
  (Chun-wei Fan)
* NMake Makefiles: Ensure g[lib|io]mm[config.h|.rc] are created
  (Chun-wei Fan) Issue #99 (Martin Ammermüller)
* Require glib-2.0 >= 2.73.2
  (Kjell Ahlstedt)


2.72.1 (stable):

Glib:
* ustring_Iterator: Don't declare copy constructor =default.
  A fix in the 2.72.0 release broke ABI.
  (Kjell Ahlstedt) Issue #98 (Scotty Trees)


2.72.0 (stable):

Glib:
* MainContext: Add create(MainContextFlags flags)
  (Kjell Ahlstedt)

Gio:
* Add AppInfoMonitor
  (Kjell Ahlstedt, technic93) Issue #97
* DBus::Proxy: signal_signal() accepts a signal name
* File: Add move_async() and move_finish()
* SocketClient: Deprecate set/get/property_tls_validation_flags()
* TlsCertificate: Add properties private_key, private_key_pem,
pkcs11_uri, private_key_pkcs11_uri. Fix the create*() methods.
* TlsClientConnection.hg: Deprecate set/get/property_validation_flags()
  (Kjell Ahlstedt)

gmmproc:
* Add "ignore_deprecations" argument in _WRAP_METHOD()
  (Kjell Ahlstedt)

Build:
* Require glib-2.0 >= 2.71.2
  (Kjell Ahlstedt)
* MSVC build: Support VS2022 builds
  (Chun-wei Fan)
* Meson build: Specify 'check' option in run_command()
  Require Meson >= 0.55.0
  (Kjell Ahlstedt)


2.70.0 (stable):

Glib:
* Timer: Add resume() and is_active()
  (Kjell Ahlstedt) Issue #87 (chamignoom)
* Add the Environ class
  (Kjell Ahlstedt) Issue #89 (Alexander Shaduri)
* Binding: Add dup_source(), dup_target().
    Deprecate get_source(), get_target().
  TimeZone: Add operator bool(), create_identifier(). Deprecate create().
  (Kjell Ahlstedt)

Gio:
* FileInfo: Add get/set_access_date(), get/set_creation_date().
  Notification: Add set_category().
  TlsCertificate: Add property/get_not_valid_before(),
    property/get_not_valid_after(), property/get_subject_name(),
    property/get_issuer_name().
  TlsConnection: Add property/get_protocol_version(),
    property/get_ciphersuite_name().
  (Kjell Ahlstedt)

Tests:
* Add test of Glib::Environ
  (Kjell Ahlstedt) Issue #89 (Alexander Shaduri)

gmmproc:
* Handle gi-docgen syntax in C documentation
  (Kjell Ahlstedt)

Build:
* Require glib-2.0 >= 2.69.1
  (Kjell Ahlstedt)


2.68.2 (stable):

Glib:
* Replace all g_quark_from_static_string() by g_quark_from_string()
  (Kjell Ahlstedt) Issue #96 (小太)

Gio:
* FileEnumerator: Remove refreturn to avoid memory leak
  (talisein) Merge request !53
* ListModel::get_object(): Make it work for interface classes
  (Kjell Ahlstedt) Issue #93 (pumkinpal)
* AppInfo::get_all(): Avoid a crash on Windows
  (Kjell Ahlstedt) Issue #94 (Lawrence37)

Build:
* MSVC build: Remove extraneous GLIBMM_API in Glib::ustring
  (Kjell Ahlstedt) Issue #92 (Christoph Reiter)


2.68.1 (stable):

Glib:
* Variant: Fix template constructors so they work with C++20
  (Magne Oestlyngen) Merge request !50

Build:
* Meson build: Use relative paths to untracked/
  (Kjell Ahlstedt) Merge request gtkmm!61 (Mingli Yu)
* [gio|glib]mmconfig.h.*: Don't dllimport on MinGW
  (Chun-wei Fan) Issue gtkmm#90 (Lukas K.)
* Meson build: examples and tests: Add dependency('threads')
  (Kjell Ahlstedt)
* Meson build: Make it possible to use glibmm as a subproject
  (Kjell Ahlstedt)
* Meson build: No implicit_include_directories
  (Kjell Ahlstedt)
* Meson build: Make quiet installations possible
  (Kjell Ahlstedt)
* MSVC build: Avoid exporting classes with std::string members
  (Chun-wei Fan) Merge reqest !51

Tests:
* glibmm_ustring_compare: Fix so it works for C++20
  (Kjell Ahlstedt) Merge request !50 (Magne Oestlyngen)


2.68.0 (stable):
This is the first stable release in the glibmm-2.68 ABI series.
It is parallel-installable with the glibmm-2.4 ABI.

The tarball for 2.68.0 has been created with 'meson dist'.
If you build with Autotools from the tarball, please read the relevant
part of the README file.

Glib:
* PropertyProxyConnectionNode::connect_changed():
  Fix using without property name
  (Daniel Boles) Issue #74 (wswfc), merge request !35
* Remove BalancedTree
  (Kjell Ahlstedt)

Gio:
* ListStore: Accept interfaces
  (Andreas Persson) Merge request !38
* MenuModel: Make MenuAttribute and MenuLink enum class
  (Kjell Ahlstedt)
* Add TlsClientConnectionImpl and TlsServerConnectionImpl
  (Kjell Ahlstedt)
* SocketClient::signal_event(): Fix wrapping of 'connection' parameter
  (Kjell Ahlstedt) Issue #73 (smilingthax)

gmmproc:
* Add optional decl_prefix parameter to _WRAP_GERROR and _WRAP_ENUM
  Used for adding GLIBMM_API or similar for MS Visual C++
  (Chun-wei Fan) Merge request !32
* Allow decorating comparison operators (for Visual Studio builds)
  (Chun-wei Fan) Merge request !33
* _CLASS_BOXEDTYPE, _CLASS_OPAQUE_COPYABLE: Fix move assignment
  (Kjell Ahlstedt) Issue #76 (misos1)
* Decorate private generated classes with __declspec when building
  with Visual Studio
  (Chun-wei Fan) Merge request !39, !41
* generate_wrap_init.pl.in: Use g_type_ensure(SomeClass::get_type())
  to ensure that get_type() is called
  (Kjell Ahlstedt)

Build:
* Use __declspec(dllexport) consistently when building glibmm with
  Visual Studio
  (Chun-wei Fan) Merge request !32
* Meson build: Set default value of the 'warnings' option to 'min'
  (Kjell Ahlstedt)
* Improve NMake support
  (Chun-wei Fan)
* Improve Visual Studio support
  (Chun-wei Fan) Merge request !37
* docs/reference/: Update for Doxygen >= 1.8.16
  (Kjell Ahlstedt)
* Meson build: Fix versioning on macOS
  (Kjell Ahlstedt) Pull request libsigcplusplus#65 (Tom Schoonjans)
* Meson build: Fix detection of macOS
  (Tom Schoonjans) Merge request !43
* Change the ABI to glibmm-2.68
  (Kjell Ahlstedt)

Documentation:
* Meson build: Add missing Glib::Value and Variant documentation
  (Kjell Ahlstedt)


2.65.3: (unstable):
Distro packagers should probably not package this yet.

Tests:
* glibmm_buildfilename: Add some tests
  (Kjell Ahlstedt) Issue #71 (Kalev Lember)

Build:
* Meson build: Install generate_extra_defs.h
  (Kjell Ahlstedt) Issue #70 (Jan Alexander Steffens)


2.65.2: (unstable):
Distro packagers should probably not package this yet.

Glib:
* Add missing #includes
  (Kjell Ahlstedt) Issue #69 (Kalev Lember)


2.65.1: (unstable):
Distro packagers should probably not package this yet.

Glib:
* Add get_user_runtime_dir()
  (scx) Issue #57, merge request !14
* Add get_host_name()
  (scx) Issue #58, merge request !15
* MainContext: Add push/pop/get_thread_default()
  (Kjell Ahlstedt) Issue #56 (Yackie-Yang)
* Add StdStringView and UStringView
  Use them in build_filename() and other functions
  (Thomas Holder, Kjell Ahlstedt) Issue #34
  (Thomas Holder) Issue #64, #65
* Regex::match(): Avoid using string after deletion
  (Thomas Holder) Issue #66, merge request !25
* Add Glib::canonicalize_filename()
  (Kjell Ahlstedt) Issue #59 (Patrick Storz)
* Binding: get_source() and get_target() return ObjectBase*
  (Kjell Ahlstedt) Issue #63 (Daniel Boles)
* ustring: Fix insert(iterator, In, In)
  (Thomas Holder) Merge request !19
* Value: Adding static_assert() for template parameter
  (Pavlo Solntsev) Merge request !23
* Error: Derive from std::exception, remove Glib::Exception
  (Kjell Ahlstedt) Issue #23 (Daniel Boles)
* Binding: Keep a binding alive even without a RefPtr
  (Kjell Ahlstedt) Issue #62 (Daniel Boles)

Gio:
* DBus::Connection: Make the wrap() function thread-safe
  (Kjell Ahlstedt) Issue #56 (Yackie-Yang)
* SettingsSchemaSource: Add list_schemas()
  Add a create(), wrapping new_from_directory()
  (Daniel Boles) Issue #19, merge request !20
* DBus::Message::get_unix_fd_list(): Add refreturn
  (Kjell Ahlstedt) Issue #68 (kr.woaini)

Tests:
* Add glibmm_ustring_compare test
  (Thomas Holder) Issue #65
* Add glibmm_regex test
  (Thomas Holder) Issue #66, merge request !25
* Add glibmm_binding test
  (Daniel Boles) Merge request !18

gmmproc:
* Add optional decl_prefix parameter to _CLASS_BOXEDTYPE,
  _CLASS_BOXEDTYPE_STATIC, _CLASS_GOBJECT, _CLASS_INTERFACE,
  _CLASS_OPAQUE_COPYABLE, _CLASS_OPAQUE_REFCOUNTED, _WRAP_GERROR
  Used for adding GLIBMM_API or similar for MS Visual C++
  (Chun-wei Fan)

Build:
* Change the ABI to glibmm-2.66
  (Kjell Ahlstedt)
* Add Meson support
  (Chun-wei Fan, Kjell Ahlstedt) Merge request !27
* Drop gendef from Windows builds
  (Chun-wei Fan) Issue #12 (Mikhail Titov), merge request !29

Documentation:
* Correct spelling of spawn_async_with_pipes()
  (Mike Fleetwood) Merge request !16
* Glib::Binding: Several doc improvements
  (Daniel Boles) Merge request !18
* Glib::Binding: Explain why SlotTransform takes GValue*
  (Kjell Ahlstedt) Issue #61 (Daniel Boles)
* Gio::AsyncResult: Improve the class description
  (Kjell Ahlstedt) Issue #27 (Alberto Mardegan)


2.63.1: (unstable):
Distro packagers should probably not package this yet.

Glib:
* ustring: Fix memory leak in make_valid()
  Use convert_return_gchar_ptr_to_*() in a couple of methods
  (Martin Ejdestig) Merge request !11
* Add ustring::sprintf(), wrapping g_strdup_printf()
  (Daniel Boles) Issue #21
* Fix callback races in glibmm when GSource is destructed
  (Dainis Jonitis) Issue #41
* Checksum, Datetime, TimeZone: Declare as _CLASS_BOXEDTYPE
  (Kjell Ahlstedt)
* Property: Add const get_proxy() returning ReadOnly
  Getting Proxy from ReadOnly is const
  (Daniel Boles) Issue #44
* Property: Update for compatibility with Gtk::Builder
  (Kjell Ahlstedt)
* Fix memory leak in Variant<std::tuple<>>::create()
  (Van de Bugger, Kjell Ahlstedt) Issue #48
* Remove TimeVal
  (Kjell Ahlstedt)

Gio:
* Add Application::add_option_group()
  (Kjell Ahlstedt Issue #46 (Patrick Storz)
* DBus::Object: Fix refcounts in some vfuncs
  (Kjell Ahlstedt)
* Gio::DBus: Add ObjectProxy, ObjectSkeleton, ObjectManager,
  ObjectManagerClient, ObjectManagerServer
  (Kjell Ahlstedt) Issue #43 (Martin Ejdestig)
* Drive, MountOperation, ThemedIcon, TlsDatabase, VolumeMonitor:
  Fix ownership of some lists and arrays (Fixes memory leaks
  and dangling pointers)
  (Kjell Ahlstedt) Issue #50 (Gary Wang)
* Add SocketControlMessage::add_deserialize_func()
  (Kjell Ahlstedt) Issue #52 (Ankur deep jaiswal)

gmmproc:
* Update for new glib deprecation macros
  (Kjell Ahlstedt)

Build:
* Doxyfile.in: Remove unused configuration constants
  (Kjell Ahlstedt) Issue #22
* Require glib-2.0 >= 2.61.2
  (Kjell Ahlstedt)
* Change the ABI to glibmm-2.64
  (Kjell Ahlstedt)

Documentation:
* Glib::init(), Gio::init(): Improve the documentation
  (Kjell Ahlstedt) Issue #49 (Van de Bugger)
* Glib::ustring can't always replace std::string
  (Kjell Ahlstedt) Issue #47 (Patrick Storz)


2.61.1: (unstable):
Distro packagers should probably not package this yet.

Glib:
* Add DateTime::get_timezone()
  Add KeyFile::get_locale_for_key()
  Add TimeZone::get_identifier()
  (Kjell Ahlstedt)
* KeyFile: Make it a refcounted class
  (Kjell Ahlstedt)
* Add Value_RefPtrBoxed<>
  Add Value<std::vector<string>> specializations and other Value
  specializations that are necessary for _WRAP_PROPERTY
  (Kjell Ahlstedt)

Gio:
* Put _WRAP_VFUNC in protected sections
  (Kjell Ahlstedt)
* Add AppInfo::launch_uris_async() and launch_uris_async()
  Add DBusConnection::get_flags()and property_flags()
  (Kjell Ahlstedt)
* TlsClientConnection: Remove property_accepted_cas()
  (Kjell Ahlstedt)
* ThemedIcon: Add create(const std::vector<Glib::ustring>& iconnames)
  (Kjell Ahlstedt)
* Remove NO_GTYPE from some _WRAP_ENUMs
  (Kjell Ahlstedt) Issue #37 (Jan Tojnar)
* TlsConnection: Remove rehandshake API
  (Kjell Ahlstedt)
* Application: Add signal_name_lost()
  (Kjell Ahlstedt)

Glib and Gio:
* Use {} for function arguments initialisation
  (Tapasweni Pathak) Merge request !9
  Issue #20 (Daniel Boles)

gmmproc:
* generate_wrap_init.pl.in: Don't exclude any Gtk classes
  (Kjell Ahlstedt)
* _WRAP_PROPERTY: generate a static_assert() that checks if
  the data type is acceptable
  (Kjell Ahlstedt)
* Add _IS_REFCOUNTED_BOXEDTYPE
  (Kjell Ahlstedt)
* _WRAP_ENUM and _WRAP_GERROR: Add gtype_func parameter
  (Kjell Ahlstedt)

Build:
* glibmmconfig.h.in: Remove unused configuration constants
  (Kjell Ahlstedt) Issue #22
* Require glib-2.0 >= 2.59.2
  (Kjell Ahlstedt)
* Change the ABI to glibmm-2.62
  (Kjell Ahlstedt)

Documentation:
* README: Add installation instructions
  (Tapasweni Pathak) Merge request !10
* Don’t use @retval on out args, use @param[out]
  (Daniel Boles) Merge request !6


2.59.1: (unstable):
Distro packagers should probably not package this yet.

Glib:
* ustring: Fix wchar conversion on macOS with libc++
  (Clemens Lang) Bug #795338
* Avoid compiler warnings from function pointer conversions
  (Kjell Ahlstedt) Issue libsigcplusplus#1 (sharkcz)
  (Kjell Ahlstedt) Issue libsigcplusplus#8 (db0451)
* ustring: Simplify format() using C++17 fold expression.
  (Daniel Boles) Merge request !4

Gio:
* Application: Add set_option_context_parameter_string(),
  set_option_context_summary(), set_option_context_description().
  (Kjell Ahlstedt)
* DesktopAppInfo: Add get_locale_string()
  (Kjell Ahlstedt)
* SocketClient: Take copy in RefPtrs for signal args
  (Daniel Boles) Issue #28 (Jens Mühlenhoff)
* Make SignalProxy_async_callback() available to e.g. gtkmm
  (Kjell Ahlstedt)

gmmproc:
* _WRAP_METHOD: Accept ":" in slot_callback parameter
  (Kjell Ahlstedt)

Build:
* Require C++17.
  (Murray Cumming)
* Require glib-2.0 >= 2.55.1
  (Kjell Ahlstedt) Issue #29 (Mart Raudsepp)
* Replace the Visual Studio project files with MSVC NMake project files
  (Chun-wei Fan) Merge request !2
* Change the ABI to glibmm-2.60
  (Kjell Ahlstedt)

Documentation:
* Use libsigc++-3.0.tag for libsigc++ documentation
  (Kjell Ahlstedt)


2.57.1: (unstable):
Distro packagers should probably not package this yet.

Gio:
* DataOutputStream::put_string(): Don't pass std:string by value
  (Kjell Ahlstedt)

gmmproc:
* Add _MEMBER_SET_STR() macro
  (Pavlo Solntsev) Bug #793778

Build:
* Change the ABI to glibmm-2.58
  (Kjell Ahlstedt)


2.55.2: (unstable):
Distro packagers should probably not package this yet.

Glib:
* IOCondition: Add an IO_ prefix to the enumerator names
  (Kjell Ahlstedt)
* TimeoutSource: Use monotonic time consistently
  (Kjell Ahlstedt) Bug #792524 (Dainis Jonitis)
* Source: Remove get_current_time().
  (Kjell Ahlstedt)
* KeyFile, OptionContext, Regex: Add exception specs to errthrow.
  (Kjell Ahlstedt)
* ustring:
  - Replace 8×format() with 1 variadic template.
  - Replace 9×compose() with 1 variadic template.
  - Use std::initializer_list instead of pointer + size
  (Daniel Boles) Bug #784211
* VariantBase:
  - Add operator==() and operator!=().
  (Kjell Ahlstedt) Bug #789330 (Daniel Boles)
  - cast_dynamic(): Remove noexcept(false).
  (Kjell Ahlstedt)

Glib::Gio:
* AppInfo: Update the name of the AppLaunchContext parameters
  (Kjell Ahlstedt)
* Action: Add exception specs to errthrow.
  (Kjell Ahlstedt)
* Application: Fix property_resource_base_path()'s type
  (Kjell Ahlstedt)
* Credentials, et al.: Add exception specs to errthrow.
  (Kjell Ahlstedt)
* DataInputStream:
  - Remove read_until*().
  - Fix the documentation of read_line_utf8().
  (Kjell Ahlstedt)
* InetSocketAddress, ProxyAddress: No guint16 in _WRAP_PROPERTY().
  (Kjell Ahlstedt)
* Settings: set_int() and friends shall return bool.
  (Kjell Ahlstedt) Bug #784211
* TlsClientConnection: Remove get/set/property_use_ssl3().
  (Kjell Ahlstedt)

gmmproc:
* Warn if parameter lists are not compatible
  (Kjell Ahlstedt)
* _WRAP_METHOD: Accept optional list of exceptions in errthrow
  (Kjell Ahlstedt)
* _WRAP_METHOD_DOCS_ONLY: Optionally suppress @return section.
  (Kjell Ahlstedt) Bug #787978
* docextract_to_xml.py: Add --exclude-file option.
  (Kjell Ahlstedt)
* Suppress the @return section if return type is void.
  (Kjell Ahlstedt)
* generate_extra_defs.cc:
  - Write signal flags to .defs files.
  - Write default values of properties to .defs files.
  - Write default values of properties to generated documentation.
  (Kjell Ahlstedt) Bug #785895 (Daniel Boles)
* Warn for unmatched deprecations in signals and properties.
  (Kjell Ahlstedt)

Documentation:
* Glib::ObjectBase: Don't mention GtkObject in comments.
  (Kjell Ahlstedt)
* Glib::Variant: Hide namespace Glib::detail from Doxygen
  (Kjell Ahlstedt) Bug #787698 (Daniel Boles)
* Glib::Variant: Slightly elaborate Variant<Variant> docs.
  (Daniel Boles) Bug #778219 (Daniel Boles)


2.55.1: (unstable):
Distro packagers should probably not package this yet.

Glib:
* Object: Value_Pointer class should take only one template argument.
  (Marcin Kolny)
* Variant: Improved support for D-Bus object paths and signatures.
  (Kjell Ahlstedt) Bug #785700 (Johannes Dohmen)
* Glib::Value_Flags<>: static_cast to correct type.
  (Kjell Ahlstedt)

Gio:
* Derive all interfaces directly from Glib::Interface
  (Kjell Ahltedt) Bug #776537
* Application: OptionType: Make this an enum class.
  (Kjell Ahlstedt)
* BufferedInputStream, BufferedOutputStream, DataOutputStream:
  Implement Seekable.
* CharsetConverter: Implement the Gio::Initable interface.
  and call Initable::init() from CharsetConverter's constructor.
  (Kjell Ahlstedt) Bug #776537
* Add FileDescriptorBased interface and make GUnixInputStream and
  GUnixOutputStream implement it.
* MemoryInputStream, UnixInputStream: Implement PollableInputStream.
  (Kjell Ahlstedt)
* MemoryOutputStream, UnixOutputStream: Implement PollableOutputStream.
  (Kjell Ahlstedt)
* TlsDatabase: create_certificate_handle_vfunc():
  Fix memory leak, and correctly return nulltpr.
  (Kjell Ahlstedt) Bug #783360

gmmproc:
* Accept curly braces in default values in _WRAP macros
  (Khell Ahlstedt) Bug #783216 comment 13
* Don't accept unpaired double quotes.
  (Khell Ahlstedt)
* gmmproc: Fix _WRAP_ENUM for enumerators with apostrophes.
  (Khell Ahlstedt)
* gmmproc, _WRAP_ENUM: Add optional CONV_TO_INT parameter.
  (Khell Ahlstedt)

Build:
* Change the ABI to glibmm-2.56.
  (Murray Cumming)
* Really exclude DesktopAppInfo from wrap_init.cc on MacOS.
  (Kjell Ahlstedt) Bug #781947

Documentation:
* miscutils: Update docs of get_*_name() from GLib.
  (Daniel Boles)
* Fix documentation of enum Glib::IOCondition.
  (Khell Ahlstedt)


2.53.2 (unstable):
Distro packagers should probably not package this yet.

Glib:
* ConstructParams: Do not increment allocation size twice
  (Daniel Elstner)

Gio:
* ActionMap: Really fix add_action_with_parameter().
  (Daniel Boles) Bug 774444#c31
* UnixSocketAddress::create(): Remove a default value to avoid ambiguity.
  (Kjell Ahlstedt) Bug #782592

Gio::DBus
* Proxy: Wrap call() and call_sync() methods.
  (Vyacheslav Yurkov) Bug #781818

gmmproc:
* Use of static_cast<> instead of C-style casts.
  (Murray Cumming)

Build:
* Fix the build on MacOS, where glib doesn't have gdesktopinfo.
  (John Ralls) Bug #781947
* Really use desktopappinfo.hg to fix the build.
  (Murray Cumming)

Documentation:
* Glib, Gio: Update documentation of in-class enums.
  (Kjell Ahlstedt)
* ActionMap: Improve add_action_with_parameter docs
  (Daniel Boles)


2.53.1.1 (unstable):

Glib:
* Use C++11 enum classes instead of old-style enums, and put many enums
  inside relevant class declarations:
  - Glib::NodeTree: Move enums into class.
  - Glib::BindingFlags is now Glib::Binding::Flags.
  - Glib::KeyfileFlags is now Glib::Keyfile::Flags.
  - Glib::ModuleFlags is now Glib::Module::Flags.
  - Glib::ChecksumType is now Glib::Checksum::Type.
  - Glib::Regex: Move enums inside class.
  - Glib::Resource: Move enums into class.
  (Murray Cumming, Kjell Ahlstedt)
* RefPtr: Make this an alias for std::shared_ptr<> instead.
  - Use std::dynamic_pointer_cast<>() instead of RefPtr<>::cast_dynamic().
  - Use std::static_pointer_cast<>() instead of RefPtr<>::cast_static().
  - Use std::const_pointer_cast<>() instead of RefPtr<>::cast_const().
  - When creating RefPtr directly, instead of using create() methods,
    use Glib::make_refptr_for_instance() so the std::shared_ptr<> has the
    necessary Deleter.
  (Murray Cumming) Bug #755037
* Remove Glib::WeakRef. Use std::weak_ref<> instead.
  (Murray Cumming) Bug #755037
* Object: Use g_object_new_with_properties() instead of (deprecated)
  g_object_newv() and (deprecated) GParameter.
  (Murray Cumming)
* IOChannel: Avoid creating a RefPtr to this.
  (Murray Cumming) Bug #755037
* SignalProxy:
  connect(): Signals with non-void return values now have no default value
  for the "after" parameter, forcing application developers to think about
  whether they should connect before or after already-connected signal
  handlers, and default signal handlers. This is awkward but necessary.
  Just provide "true" to get the previous behaviour, or use connect_notify().
  connect_notify(): Signals with void return values have no connect_notify(),
  because it is not useful with those signals.
  (Kjell Ahlstedt) Bug #126213.

Gio:
* Use C++11 enum classes instead of old-style enums, and put many enums
  inside relevant class declarations:
  - Gio::Drive: Move enums into class.
  - Gio::TlsDatabase: Move enums into class.
  - Gio::UnixSocketAddressType is now Gio::UnixSocketAddress::Type.
  - Gio::Mount: Move enums into class.
  - Gio::TlsPasswordFlags is now Gio::TlsPassword::Flags.
  - Gio::IOStreamSpliceFlags is now Gio::IOStream::SpliceFlags.
  - Gio::SettingsBindFlags is now Gio::Settings::BindFlags.
  - Gio::ResolverRecordType is now Gio::Resolver::RecordType.
  - Gio::Socket: Move enums into class.
  - Gio::File: Move some flags enums into the class.
  - Gio::OutputStreamSpliceFlags is now Gio::OuputStream::SpliceFlags.
  - Gio::CredentialsType is now Gio::Credentials::Type.
  - Gio::NotificationPriority is now Gio::Notification::Priority.
  - Gio::FileMonitorEvent is now Gio::FileMonitor::Event.
  - Gio::FileAttributeInfoFlags is now Gio::FileAttributeInfo::Flags.
  - Gio::EmblemOrigin is now Gio::Emblem::Origin.
  - Gio::Converter: Put enums inside class.
  - Gio::ConverterFlags is now Gio::Converter::Flags.
  - Gio::ConverterResult is now Gio::Converter::Result.
  - Gio::AppInfoCreateFlags is now Gio::AppInfo::CreateFlags.
  - Gio::ApplicationFlags is now Gio::Application::Flags.
  (Murray Cumming, Kjell Ahlstedt)
* Remove duplicate ErrorEnum declaration.
  (Kjell Ahlstedt)
* ConstructParams:
  - Remove (hopefully really unnecessary) copy constructor.
  - C++11: =delete the operator=, instead of making it private.
  (Murray Cumming)
* Value:
  - Remove the CType alias, which should be unnecessary.
  - value_custom: Replace a template parameter with C++11 type traits.
  - Value<RefPtr<T>>: Only use this specialization if T has get_base_type().
  (Murray Cumming) Bug #755037
* Variant:
  - operator bool(): Simplify to avoid clang++ warnings.
  - C++11: Variant: Replace throw(std::bad_cast) with noexcept(false).
    See https://bugzilla.redhat.com/show_bug.cgi?id=1438766
  (Murray Cumming)
* Socket: Avoid creating a RefPtr to this.
  (Murray Cumming) Bug #755037

Gio:DBus:
* Use C++11 enum classes instead of old-style enums, and put many enums
  inside relevant class declarations:
  - Gio::DBus::InterfaceSkeletonFlags is now Gio::DBus::InterfaceSkeleton::Flags.
  - Gio::DBus::ServerFlags is now Gio::DBus::Server::Flags.
  (Murray Cumming, Kjell Ahlstedt)

gmmproc:
* _WRAP_ENUM(): Generate C++ enum classes instead of enums, and let the enums
  be inside class declarations.
  (Kjell Ahlstedt) Bug #86864

Build
* Windows:  Visual Studio builds: Update ABI version
  (Chun-wei Fan)


2.53.1 (unstable):

Glib:
* OptionGroup:
  - Don't allow copy or move.
  - Remove the OptionGroup& parameter in on_pre_parse(), on_post_parse() and
    on_error().
  (Kjell Ahlstedt)
* IOChannel, StreamIOChannel: Remove deprecated parts.
  (Kjell Ahlstedt)
* ustring: Add make_valid().
  (Krzysztof Piecuch) Bug #780075
* Remove (unused) Sequence and sequence().
  (Murray Cumming)
* Remove ListHandle, SListHandle, ArrayHandle, SArrayHandle, and
  StringArrayHandle, replacing them with std::vector in API.
  (Murray Cumming)

gmmproc:
* _WRAP_METHOD(): Some more use of auto in generated code.
  (Murray Cumming)

Build:
* Change the ABI to glibmm-2.54.
  (Murray Cumming)
* Add some #include directives.
  (Kjell Ahlstedt)
* Visual Studio: Require Visual Studio 2017 and update the glibmm project.
  (Chu-wei Fan)


2.51.5

Gio:
* Application: get_default(): Correct the reference counting.
  (KJell Ahlstedt) Bug #779936 (James Legg)
* Add PropertyAction.
  (Kjell Ahlstedt)

Glib:
* Remove Glib::unconst() because it is unused and unnecessary.
  (Kjell Ahlstedt)
* Variant: Add template specialization for std::tuple,
  and a test.
  (Alexander Rössler, Kjell Ahlstedt) Bug #777791


2.51.2 (unstable):
Distro packagers should probably not package this yet.

Glib:
* Object construction: Add custom class init and instance init functions
  An extra class init function is useful in Gtk::WidgetCustomDraw and
  Gtk::WidgetCustomSnapshot.
  (Kjell Ahlstedt) Bug #775348

Gio:
* Action: #include <mm/glib/variant.hpp>, for convenience.
  (Daniel Boles) Bug #777953
* SimpleAction: Make set_state() public.
  (Daniel Boles) Bug #777953

Documentation:
* Glib::Variant: Explain how to create "maybe" type.
  (Daniel Boles) Bug #778219


2.51.1.2 (unstable):
Distro packagers should probably not package this yet.

Glib:
* Remove some deprecated API
  (Kjell Ahlstedt)
* Variant: Remove the string specializations of cast_dynamic.
  (Kjell Ahlstedt)
* Glib::VariantType: Add get_item_types(), removing first() and
  next().
  (Kjell Ahlstedt) Bug #775741


Gio:
* init(): Set the global locale.
  (Kjell Ahlstedt) Bug #661588
* ActionBase: get_state_hint_variant() now returns VariantContainerBase.
  (Kjell Ahlstedt)
* ActionMap: add_action_with_parameter(): Register the parameter type,
  to make this work.
  (Daniel Boles) Bug #774444
* ActionResult: Add is_tagged_vfunc().
  (Kjell Ahlstedt)
* Glib::Dispatcher: Implement the pimpl idiom
  (Kjell Ahlstedt) Bug #651942
* File, FileInfo, FileIOStream, FileOutputStream: Use Glib::ustring for
  (UTF-8) file attributes of string type.
  (Kjell Ahlstedt) Bug #615950
* NetworkMonitor: Derive from Gio::Initable.
  (Kjell Ahlstedt)
* RemoteActionGroup: Rename some vfuncs to add _full().
  (Murray Cumming)

Documentation:
* ActionMap:
  - ActivateSlot: Mention add_action_bool().
  - ActivateWithParameterSlot: Be more specific.
  (Daniel Boles) Bug #774444

Build:
* Update the Visual Studio project files.
  (Chun-wei Fan)
* Some minor cppcheck fixes.
  (Murray Cumming)


2.51.1.1 (unstable):

General:
* Remove no_default_handler in some _WRAP_SIGNAL()s
  This allows application developers to simply override
  the default on_*() signal handlers for these signals too,
  as they can already with most other signals.
  If you are using, for instance, the -Wsuggest-override
  compiler option, watch out for new compiler warnings suggesting
  that your existing signal handler should now be marked with the
  override keyword - that means you should do so but you should
  also stop connecting the signal handler in your code.
  (Kjell Ahlstedt)
* Build: examples/Makefile.am: Re-insert the dispatcher examples
  (Kjell Ahlstedt)

Glib:
* Dispatcher: Don't cast a HANDLE to an int on Windows.
  (Kjell Ahlstedt) Bug #772074
* ObjectBase:
  - Remove connect_property_changed_with_return()
  and let connect_property_changed() return a sigc::connection.
  (Kjell Ahlstedt)
  - Use std::forward_list for interface class pointers.
  (Kjell Ahlstedt)
  - Replace extra_object_base_data map by instance data.
  (Kjell Ahlstedt)
* ObjectBase: overload get_property().
  (Marcin Kolny)
* Main, IOSource: autodeduce type of fd field.
  (Marcin Kolny) Bug #770274
* Settings: Add property_settings_schema(), and update
  signal_changed().
  (Kjell Ahlstedt)
* Settings: Make set_enum() + set_flags() usable
  (djb) Bug #774647
* SettingsSchemaKey: Add missing value/range methods
  (Daniel Boles) Bug #774903
* SignalProxyNormal: Remove connect_() and connect_notify_(),
  adding connect_impl().
  (Kjell Ahlstedt)
* Rename SignalProxyDetailed to SignalProxyDetailedBase, and
  SignalProxyDetailedAnyType to SignalProxyDetailed.
  Remove SignalProxyDetailed# aliases (# = 0..6).
  (Kjell Ahlstedt)
* Source: Replace extra_source_data by instance data.
  (Kjell Ahlstedt) Bug #561885

Gio:
* ActionMap::add_action_vfunc(): Const correction.
  (Murray Cumming)
* Application: Add dbus_register/unregister_vfunc.
  (Ritesh Khadgaray, Kjell Ahlstedt) Bug #762191
* Menu: insert/prepend/add_item(): Const correction.
  (Murray Cumming)
* MenuAttributeIter: get_value(): Const correction.
  (Murray Cumming)
* MenuModel: get_item_atribute(): const correction.
  (Murray Cumming)
* RemoteActionGroup: Derive from Gio::ActionGroup.
  (Murray Cumming)

Gio::Dbus:
* Proxy: Fix memory leak in get_cached_property_names().
  (Kjell Ahlstedt) Bug #775210
* Proxy: Derive from (and implement) Gio::DBus::Interface.
  (Murray Cumming)


2.51.1 (unstable):

This is the first release of the glibmm-2.52 API/ABI.
It installs in parallel with the gtkmm-2.4 API/ABI, of which
the most recent version is glibmm 2.50. We know that is a bit
confusing. We are taking the opportunity to do this glibmm ABI
break while GTK+ (and therefore gtkmm) is also doing an ABI
break. But we cannot call this glibmm-3.0 because there is no
glib 3.0.

Build:
* Require C++14.
  (Murray Cumming)
* Use libsigc++-3.0 instead of libsigc++-2.0.
  https://www.murrayc.com/permalink/2016/03/07/libsigc-3-0-very-variadic/
  (Murray Cumming)
* Remove lots of deprecated API.
  (Kjell Ahlstedt)

Gio:
* BufferedInputStream, InputStream, OutputStream: Add vfuncs,
  allowing implementation in C++.
  (Krzysztof Kosiński, Kjell Ahlstedt) Bug #572471
* SettingsSchemaSource::get_default(): Correct the reference count.
  (Marcin Kolny) Bug #774593
* Settings: Fix type of 'key' parameter of writable-change-event signal
  (Marcin Kolny) Bug #773977

Glib:
* ustring: Add cbegin() and cend().


2.50.0:

No changes since 2.49.7.

2.49.7:

Gio
* AppInfo: Add launch_default_for_uri_async().
  (Murray Cumming)
* Application::get_busy(): return the bool.
  (Murray Cumming) Bug #770304
* Drive: Add is_removable().
  (Murray Cumming)
* Settings:
  - set_uiint(): Deprecate for set_uint().
  - Add get/set_uint64().
  - Add get/set_int64().
  (Murray Cumming)
* giomm.h: Add include for settingsschemasource.h
  (Murray Cumming)

Documentation:
* Glib::OptionGroup: Improve the documentation of add_entry()
  (Kjell Ahlstedt)


2.49.5:

Glib:
* OptionContext: Wrap g_option_context_parse_strv()
  (Kjell Ahlstedt)

gmmproc:
* Add DocsParser::remove_c_memory_handling_info()
  (Kjell Ahlstedt)
* Add missing objects to glib/gio_extra_objects.defs
  (Kjell Ahlstedt)
* Remove DocsParser::non_object_method_name()
  (Kjell Ahlstedt)
* swap() implementations: Use std::swap().
  (Murray Cumming)

Documentation:
* Gio::SocketService: Update the class documentation
  (Kjell Ahlstedt)

2.49.4:

glib:
* Replace some use of some deprecated libsigc++ API.
  (Murray Cumming)

Build:
* Really enable silent builds.
  (Sebastian Geiger) Bug #768797

2.49.2:

Gio:
* FilterInputStream: Added a constructor.
  (Krzysztof Kosiński, Kjell Ahlstedt) Bug #572471
* FilterOutputStream:
  - Correct the property_base_stream() return type.
  (Krzysztof Kosiński) Bug #572471
  (Krzysztof Kosiński, Kjell Ahlstedt) Bug #572471
* InputStream: Added a constructor, is_closed(), has_pending(),
  set_pending(), clear_pending()
  (Krzysztof Kosiński, Kjell Ahlstedt) Bug #572471
* OutputStream: Added a constructor, is_closed(), is_closing(),
  has_pending(), set_pending(), and clear_pending().
  (Krzysztof Kosiński, Kjell Ahlstedt) Bug #572471
* Pollable, InputStream, OutputStream: Return -1 on error in vfuncs.
  (Kjell Ahlstedt)

gmmproc:
* Make h2def.py recognize some GDK_PIXBUF macros
  (Kjell Ahlstedt)
* Add optional argument err_return_value in _WRAP_VFUNC
  (Kjell Ahlstedt)

Build:
* Visual Studio build files: Update projects
  (Chun-wei Fan)

2.49.1:

gmmproc:
* Discard unused m4 sections.
  (Kjell Ahlstedt)
* Add 'deprecated' option in _WRAP_ENUM and _WRAP_GERROR
  (Kjell Ahlstedt)
* _CLASS_GOBJECT(): Allow custom move operation implementations with
  _CUSTOM_MOVE_OPERATION().
  (Marcin Kolny) Bug #756593

Gio:
* Added ListModel, ListStoreBase and ListStore<>, and tests.
  (Kjell Ahlstedt, Murray Cumming, Marcin Kolny)
  Bug #755307
* SocketAddress: Correct the constructor's implemention.
  (Murray Cuming) Bug #766150 (Vladimir)

Gio:DBus:
* Proxy: allow using GDBusProxy* conversion outside DBus namespace

Glib:
* FileAtrributeInfoList, Checksum, Module, RefPtr:
  Make operator bool explicit.
  (Murray Cumming)
* Property: Allow to set property nick, blurb, and flags.
  (Marcin Kolny) Bug #755256
* VariantBase: Add explicit operator bool(), deprecating
  operator const void*.
  (Murray Cumming)

Documentation:
* Examples: Use libsigc++ 2.9/10 and its slot/signal<R(Args...)> syntax.
  (Murray Cumming)

2.48.1:

Build:
* MacOS X: Add alternative #ifdefed code when thread_local
  is not supported by the compiler.
  (Tom Schoonjans) Bug #759791
* Replace most typedefs with the C++11 using keyword.

2.48.0:

* No major changes compared to 2.47.92.

2.47.92:

* Adapt to libsigc++-2.0 2.8:
  - using only the non-deprecated sigc::mem_fun() API.
  (Kjell Ahlstedt)
  - using std::ref instead of deprecated sigc::ref.
  (Murray Cumming)
  -  Correct bad uses of sigc::bind<1>.
  (Murray Cumming)


gmmproc:
* defs generation: Mark deprecated signals and properties as such in the
  generated .defs file.
* gmmproc: Check if signals and properties are deprecated appropriately
  (Kjell Ahlstedt)

Build:
* MSVC builds: Look for includes in include/gio-win32-2.0.
  (Chun-wei Fan)

2.47.6:

Glib:
* Add and uses Glib::c_str_or_nullptr().
  (Kjell Ahlstedt) Bug #755245
* Add some connect() overloads that move the sigc::slot.
  (Kjell Ahlstedt)
* Fix definition of VARIANT_TYPE_DICT_ENTRY to match header declaration
  (Aurelien Jacobs) Bug #761046
* Replace, via deprecation, ScopedPtr with make_unique_ptr_gfree().
  (Murray Cumming) Bug #760223
* SignalProxy: use variadic templates.
  (Marcin Kolny)
* ustring: Add move operators.
  (Kjell Ahlstedt) Bug #760282
*  Put deprecation ifdefs around aleady-deprecated GLIBMM_INITIALIZE_STRUCT.
  (Murray Cumming)

Gio:
* FileInfo::list_attributes(): Make name_space optional.
  (Murray Cumming)
* Icon: Add serialize(), deserialize() and documentation of create().
  (Kjell Ahlstedt)
* PropertyBase: Make custom properties more flexible
  (Kjell Ahlstedt) Bug #731484.
* SocketConnectable: Add to_string().
  (Kjell Ahlstedt)

Gio::DBus::
* Connection: Pass an empty bus name as nullptr.

gmmproc:
* Fix errthrow in _WRAP_VFUNC
  (Kjell Ahlstedt) Bug #762437
* Add NULL option to _WRAP_METHOD
  (Kjell Ahlstedt)
* h2def.py: Accept parameter names beginning with const.
  (Kjell Ahlstedt)

Build:
* Use some more minor C++11 features.
  (Murray Cumming)
* Threads example: Fix build on Visual Studio
  (Chun-wei Fan) Bug #760612
* glibmmconfig.h.in: Fix Visual Studio 2013 builds.
  (Chun-wei Fan) Bug #760612
* Glib::ustring: fix -Wmisleading-indentation gcc 6 warning in public header.
  (Aurelien Jacobs) Bug #760641.

Other:
* Reformat our hand-written C++ code with clang-format.
  (Murray Cumming)


2.47.4:

Glib::
* ustring: Don't allow comparison to 0.
  (Kjell Ahlstedt) Bug #572978 (Armin Burgmeier)

Gio:
* ActionMap: Fix the ref count in lookup_action_vfunc().
  (Kjell Ahlstedt) Bug #758813 (Aurimas Černius)

Build:
* Dispatcher: #include <mutex> in Windows builds.
  (T Sailor) Bug #758894
* Gio::Application: Destructor: Use noexcept in the implementation too.
  (Murray Cumming) Bug #758798 (Émeric MASCHINO)
* Fix the build with --disable-deprecated-api.
  (Kjell Ahlstedt)

2.47.3.1:

* Use thread_local instead of (deprecated) Glib::Threads::Private.
  (Murray Cumming, Kjell Ahlstedt)

2.47.3:

* Deprecate all of Glib::Threads, including Mutex, Lock, Thread, etc.
* Deprecated Glib::ThreadPool.
  (Murray Cumming, Kjell Ahlstedt)

2.46.2:

* ObjectBase, Object, Interface: Correct move constructors and move assignment
  operators.
  (Kjell Ahlstedt) Bug #756962


Changes in 2.46 compared to 2.44:

General:
* Use, and require C++11, using features such as move operations, noexcept
  auto, = delete, nulltpr, override.
  (Murray Cumming, Kjell Ahlstedt))

Glib::
* RefPtr:
  - Make it possible to stop use of RefPtr with certain classes.
  (Kjell Ahlstedt)
  - Make methods noexcept (C++11).
  (Murray Cumming)
  - Add move operations.
  (Murray Cumming, Marcin Kolny, Kjell Ahlstedt)
  * Add release():
  (Marcin Kolny)
* ObjectBase: Don't use std::auto_ptr (deprecated in C++11).
  (Kjell Ahlstedt)
* ObjectBase, Object, Interface, IOChannel, Markup: Add move operations
  (Murray Cumming) Add C++11 move operations.
  (Murray Cumming)
* HelperList: fix iterator check in operator[]
  (Maks Naumov)
* Add SettingsSchema, SettingsSchemaKey and SettingsSchemaSource.
  (Murray Cumming)
* Add Glib::format_size().
  (Kjell Ahlstedt)
* Add get_user_special_dir(UserDirectory), deprecating
  get_user_special_dir(GUserDirectory directory).
  (Kjell Ahlstedt)
* Threads::Thread: Use GThread only via a pointer.
  Kjell Ahlstedt
* VariantBase: Add is_castable_to().
* VariantContainerBase: get_iter(): Accept casts of complicated types
  containing object paths and DBus type signatures to Variant<> types
  containing Glib::ustring and std::string.
  (Kjell Ahlstedt)
* Variant: Wrap handles and add get_data_as_bytes()
  (Kjell Ahlstedt)
* Added SignalProxyDetailed.

Gio:
* Application: Add the shutdown signal.
  (Murray Cumming)
* NetworkMonitor: Add get_network_metered() and property.
  (Murray Cumming)
* Settings: Add signal_changed(key).
  (Kjell Ahlstedt, Murray Cumming)
* Added SimpleIOStream.
  (Kjell Ahlstedt)
* SocketService: Add active property.
  (Murray Cumming)
* TlsClientConnection: Add copy_session_state().
  (Murray Cumming)

Gio::Dbus:
* Connection::signal_subscribe(): Pass nullptr instead of "".
  (Murray Cumming)

gmmproc:
* Generate C++11 move operations.
  (Murray Cumming)
* Mark all _CLASS_OPAQUE_REFCOUNTED classes as final (C++11).
  (Murray Cumming)
* generate_wrap_init.pl: Allow use of nested namespaces for whole module.
  (Marcin Kolny)
* _WRAP_METHOD: deprecated: Use G_GNUC_[BEGIN|END]_IGNORE_DEPRECATIONS
  per function, instead of one big undef [G|GDK|GTK]_DISABLE_DEPRECATED.
  (Kjell Ahlstedt)
* Add _IGNORE_PROPERTY() and _IGNORE_CHILD_PROPERTY() macros.
  (Kjell Ahlstedt)
* Add support for 'newin "n,m"' in some _WRAP macros.
  (Kjell Ahlstedt)
* _WRAP_SIGNAL: Add support for detail_name.
  (Kjell Ahlstedt)
* Fetch property documentation from the docs.xml file, if available there.
  (Kjell Ahlstedt)

Build:
* MSVC Builds: Many improvements
  (Chun-wei Fan)
* Add missing GLIBMM_API for Interface
  (Mikhail Titov)


2.46.1 (stable):

* gmmmproc: _CLASS_GOBJECT():
  Move the "= delete"ed constructor and operator= to public, instead of private.
  (Murray Cumming)

2.46.0 (stable):

Glib::
* RefPtr: Make it possible to stop use of RefPtr with certain classes.
  (Kjell Ahlstedt) Bug #755048
* WeakRef: Use noexcept.
  (Kjell Ahlstedt) Bug #583399.

Gio:
* Application: Remove bind/unbind_busy_property() because they are not
  quite ready.
  (Murray Cumming)

Gio::Dbus:
* Connection::signal_subscribe(): Pass nullptr instead of "".
  (Murray Cumming)

2.45.80 (unstable):

Gio:
* Application: Add bind/unbind_busy_property() and set_state_hint().
  (Murray Cumming)
* TlsClientConnection: Add copy_session_state().
  (Murray Cumming)

Build:
* MSVC Builds: Require MSVC.Net 2013 for C++11 support.
  (Chun-wei Fan) Bug #753271.
* MSVC Builds: Adapt for recent source code changes.
  (Chun-wei Fan) Bug #753271.
* MSVC Builds: Improve Build Speed and Debugging Experience
  (Chun-wei Fan)


2.45.70 (unstable):

Glib:
* C++11: Add move operations to ObjectBase and Object.
  (Murray Cumming)
* C++11: RefPtr: Make methods noexcept.
  (Murray Cumming)

gmmproc:
* C++11: Generate move operations.
  (Murray Cumming)
* C++11: IOChannel: move operations: Call the base sigc::trackable.
  (Murray Cumming)
* C++11: Markup: Add move operations
  (Murray Cumming)
* C++11: More use of = delete instead of private copy operations.
  (Murray Cumming)
* C++11: Use std::stoul instead of strtoul.
  (Murray Cumming)

Documentation:
* Update configuration for Doxygen 1.8.9.1.
  (Daniel Elstner)
* Exclude bogus documentation symbols.
  (Daniel Elstner)
* Generate documentation for API all platforms.
  (Daniel Elstner)


2.45.52 (unstable):

Glib::
* C++11: Glib::ObjectBase, Object, Interface: Add move operators.
  (Murray Cumming)
* C++11: Mark all _CLASS_OPAQUE_REFCOUNTED classes as final.
  (Murray Cumming)

Gio:
* FileIcon: Remove unncessary IMPLEMENTS_INTERFACE.
  (Murray Cumming)

gmmproc:
* _CLASS_GOBJECT(): Generate move operations.
* _CLASS_INTERFACE(): Generate move operations.
* _CLASS_BOXEDTYPE_STATIC(): Add move operations.
* _CLASS_BOXEDTYPE_STATIC: Add explicit copy operations.
* _CLASS_OPAQUE_COPYABLE(): Add move operations.
* _CLASS_OPAQUE_COPYABLE: Generate static swap().
* _CLASS_OPAQUE_REFCOUNTED: Use = delete for the default constructor.
(Murray Cumming)


2.45.50 (unstable):

Glib:
* RefPtr:
  * Add move constructor and move assignment operator for castable types.
    (Marcin Kolny) Bug 752812
  * Add release():
    (Marcin Kolny) Bug 752812
  * move assignment operator: Use swap().
    (Murray Cumming) Bug 752812

Gio:
* NetworkMonitor: Add get_network_metered() and property.
  (Murray Cumming)
* SocketService: Add active property.
  (Murray Cumming)

General:
* C++11: Boxed types: Declare move operations as noexcept.
  (Murray Cumming)

Build:
* Update Visual Studio project to Visual Studio 2013,
  for C++11 support.
  (Chun-wei Fan)
* Improve gen_scripts.
  (Kjell Ahlstedt)

gmmproc:
* generate_wrap_init.pl: Allow use of nested namespaces for whole module.
  (Marcin Kolny) Bug 753013


2.45.41 (unstable):

Glib:
* Undeprecate HelperList and List_Iterator because gtkmm-2.4 uses these
  in its undeprecated API. However, all of gtkmm-2.4 is deprecated, so
  you (Inkscape) shouldn't be using it anyway.
  Bug #752797 (Adam Williamson)
  (Murray Cumming)

2.45.40 (unstable):

Glib:
* RefPtr: Add move constructor and move assignment operator.
  (Murray Cumming)

Gio:
* Application: Add the shutdown signal.
  (Murray Cumming) Bug #752600 (Ben)

Build:
* C++11: Use noexcept instead of throw().
  (Murray Cumming)
* C++11: Use "= delete" instead of private copy constructors/operator=.
  (Murray Cumming)
* C++11: Use nullptr instead of 0.
  (Murray Cumming)
* C++11: Use the override keyword.


2.45.31 (unstable):

Glib:
* HelperList: fix iterator check in operator[]
  (Maks Naumov) Bug #751530.

Build:
* Use (and require) C++11.
  (Murray Cumming, Kjell Ahlstedt)
* Use some simple C++11 syntax.
  (Murray Cumming)
* Fix the build with -Wshadow.
  (Murray Cumming)

gmmproc:
* Generate code that uses some simple C++11 syntax.
  (Murray Cumming)
* _WRAP_SIGNAL: Accept apostrophes in a preceding comment.
  (Kjell Ahlstedt)


2.45.3 (unstable):

* Add SettingsSchema, SettingsSchemaKey and SettingsSchemaSource.
  (Murray Cumming)
* Deprecate HelperList and SArray because nothing uses them.
  (Murray Cumming)

Build:
* Don't disable more deprecation warnings than necessary
  (Kjell Ahlstedt) Bug #750379.

gmmproc:
* _WRAP_METHOD: deprecated: Use G_GNUC_[BEGIN|END]_IGNORE_DEPRECATIONS
  per function, instead of one big undef [G|GDK|GTK]_DISABLE_DEPRECATED.
  (Kjell Ahlstedt) Bug #750379
* Remove GP_LIST, because nothing uses it.
  (Murray Cumming)


2.45.2 (unstable):

Glib:
* Add Glib::format_size().
  (Kjell Ahlstedt) Bug #747311 (Zsolt Bölöny)
* Add get_user_special_dir(UserDirectory), deprecating
  get_user_special_dir(GUserDirectory directory).
  (Kjell Ahlstedt) Bug #747311
* Threads::Thread: Use GThread only via a pointer.
  Kjell Ahlstedt (Bug #746533)
* VariantBase: Add is_castable_to().
* VariantContainerBase: get_iter(): Accept casts of complicated types
  containing object paths and DBus type signatures to Variant<> types
  containing Glib::ustring and std::string.
  (Kjell Ahlstedt) Bug #747508.
* Variant: Wrap handles and add get_data_as_bytes()
  (Kjell Ahlstedt)
* Added SignalProxyDetailed.

Gio:
* Settings: Add signal_changed(key).
  (Kjell Ahlstedt, Murray Cumming) Bug #749034.
* Added SimpleIOStream.
  (Kjell Ahlstedt)

Documentation:
* API Reference: Remove generated " "You rarely need to use properties".
  Some new glib and gtk+ classes (GSimpleIOStream, GtkModelButton,
  GtkPopoverMenu) have no public set/get methods for their properties.
  (Kjell Ahlstedt)
* API Reference: Fix the version numbers in some @newin Doxygen commands.
  (Kjell Ahlstedt)

gmmproc:
* Add _IGNORE_PROPERTY() and _IGNORE_CHILD_PROPERTY() macros.
  (Kjell Ahlstedt)
* Add support for 'newin "n,m"' in some _WRAP macros.
  (Kjell Ahlstedt) Bug #748856 (Andrew Potter)
* _WRAP_SIGNAL: Add support for detail_name.
  (Kjell Ahlstedt) Bug #749034
*  Fetch property documentation from the docs.xml file, if available there.
  (Kjell Ahlstedt)
* docextract_to_xml.py: Distinguish sections from properties.
  (Kjell Ahlstedt)
* docextract_to_xml.py: Add support for the --no-recursion option.
  (Kjell Ahlstedt)

Build:
* Glib::ObjectBase: Don't use std::auto_ptr (deprecated in C++11).
  (Kjell Ahlstedt) Bug #748630 (Hubert Figuiere)
* Add missing GLIBMM_API for Interface
  (Mikhail Titov) Bug #748719.


2.44:

API additions since 2.42:

Glib:
* Add Binding.
  (Kjell Ahlstedt) Bug #738663.
* OptionContext: Add get/set_strict_posix().
  (Murray Cumming)

Gio:
* Application:
  - Add get/set/unset_resource_base_path() and property.
  - Add get_is_busy() and property.
  (Murray Cumming)
* File: Add replace_contents_bytes_aync().
  (Murray Cumming)
* InputStream: Add read_all_async() and read_all_finish().
  (Murray Cumming)
* MemoryInputStream: Add add_bytes().
  (Murray Cumming)
* Added NetworkMonitor.
  (Murray Cumming)
* Notification: Add set_priority() and enum NotificationPriority.
  (Kjell Ahlstedt)
* OutputStream: Add write_all_async() and write_all_finish().
  (Murray Cumming)
* Add Resource.
  (Kjell Ahlstedt)
* Add TcpWrapperConnection.
  (Murray Cumming)

Gio::DBus
* InterfaceInfo: Add cache_build() and cache_release().
  (Murray Cumming)


2.44.0 (stable):

Gio:
* Action, ActionGroup: Avoid memory leaks in funcs.
  (Kjell Ahlstedt) Bug #705124

gmmproc:
* _WRAP_VFUNC(): Add keep_return parameter.
  (Kjell Ahlstedt) Bug #705124


2.43.91 (unstable):

Glib:
* OptionContext: Add get/set_strict_posix().
  (Murray Cumming)

Gio:
* Application:
  - Add get/set/unset_resource_base_path() and property.
  - Add get_is_busy() and property.
  (Murray Cumming)
* File: Add replace_contents_bytes_aync().
  (Murray Cumming)
* InputStream: Add read_all_async() and read_all_finish().
  (Murray Cumming)
* MemoryInputStream: Add add_bytes().
  (Murray Cumming)
* OutputStream: Add write_all_async() and write_all_finish().
  (Murray Cumming)

Gio::DBus
* InterfaceInfo: Add cache_build() and cache_release().
  (Murray Cumming)



2.43.90 (unstable):

Glib:
* Error::register_init(): Call Glib::wrap_register_init().
  (Kjell Ahlstedt) Bug #743466 (Mike Fleetwood).
* OptionGroup:
  - Fix enable/disable bool option pairs.
  (Kjell Ahlstedt) Bug #744854 (Tom Schoonjans)
  - Fix memory leaks
  (Kjell Ahlstedt) Bug #745173.
  - Don't use deprecate g_option_group_free().
  (Kjell Ahlstedt)
* Value: Deprecate Value<char>, add Value<signed char>.
  Because g_value_[get,set]_char() are deprecated in favour of
  g_value_[get,set]_schar().
  (Kjell Ahlstedt)

Gio:
* Application: Deprecate property_action_group().
  (Kjell Ahlstedt)
* Notification: Add set_priority() and enum NotificationPriority.
  (Kjell Ahlstedt)
* Add TcpWrapperConnection.
  (Murray Cumming)
* UnixSocketAddress: Deprecate property_abstract().
  (Kjell Ahlstedt)

gmmproc:
* Fix error messages in glib and gio by removing unnecessary _IGNORES().
  (Kjell Ahlstedt)
* h2def.py: Remove *_DEPRECATED_IN_*_*_FOR(*) prefixes with white space.
  (Kjell Ahlstedt)
* Put DOXYGEN_SHOULD_SKIP_THIS around *_Class prototypes.
  To workaround a doxygen bug, to fix the genereated DevHelp search index.
  (Murray Cumming) Bug #743918


2.43.3 (unstable):

Glib:
* Binding: Rename and change BindingTransformSlot to SlotTransform.
  (Kjell Ahlstedt) Bug #738663.
* Add SlotSpawnChildSetup.
  (Kjell Ahlstedt) Bug #528285.

Documentation:
* Resource: Suppress incorrect doxygen links.
  (Kjell Ahlstedt)


2.43.2 (unstable):

Gio:
* Added NetworkMonitor.
  (Murray Cumming)
* UnixFDList, UnixFDMessage: Correct array lengths in steal_fds()
  (Kjell Ahlstedt) Bug #741365 (Matthew Balkam)

gmmproc:
* Don't make one very long line for the enum documentation.
  (Kjell Ahlstedt)
* Improve the conversion of Since to @newin.
  (Kjell Ahlstedt)
* Add an empty line after @newin where it's missing
  (Kjell Ahlstedt)


2.43.1 (unstable):

gmmproc:
* Tidy up the generation of enum docs
  (Kjell Ahlstedt)
* _WRAP_GERROR: Add documentation to the generated enum Code.
  (Kjell Ahlstedt)
* Change messages that MS Visual Studio can misunderstand.
  (Kjell Ahlstedt)
* Warn when an ignored method or signal doesn't exist.
  (Marcin Kolny) Bug #737212.

Glib:
* Add Binding.
  (Kjell Ahlstedt) Bug #738663.
* Checksum::ChecksumType: Remove erroneous documentation
  (Kjell Ahlstedt)
* Property: Add some documentation.
  (Kjell Ahlstedt) Bug #523043.

Gio:
  Add Resource.
  (Kjell Ahlstedt)


2.42:

API additions since 2.40:

* Add Permission and SimplePermission.
  (Juan R. García Blanco) Bug #732436
* Add support for GtkContainer child properties.
  (Juan R. García Blanco)


2.42.0 (stable):

Gio:
* Notification: Deprecate set_urgent().
  (Murray Cumming)

Tools:
*  h2def.py: fixed generator in case of inline functions.
   (Marcin Kolny) Bug #736427

Build:
* Update and overhaul of Visual Studio 2005 project build files.
 (Chun-wei Fan)
* Fixes for  Visual Studio 2008 and 2010 project build files.
 (Chun-wei Fan)
* Fix ustring for Visual Studio Builds.
 (Chun-wei Fan) Bug #736720
* Visual Studio Builds: Add "install" project.
  (Chun-wei Fan)
* Fix tests in Visual Studio.
  (Chun-wei Fan) Bug #736778

2.41.4 (unstable):

gmmproc:
* Added parameter exception_handler in _WRAP_VFUNC().
  (Marcin Koln) Bug #735132
* Better error checks in some _WRAP_* macros.
  (Kjell Ahlstedt)

Build:
* Update and overhaul of Visual Studio 2010 and Visual Studio 2008
  project build files.
  (Chun-wei Fan)
* Gio::DBus: Don't use parameter name 'interface' to fix the build with MinGW.
  (Kjell Ahlstedt) Bug #735137.


2.41.3 (unstable):

Documentation:
* Network example:
  - Use Glib::OptionEntry and friends
  (Kjell Ahlstedt)
  - Network example: Add --use-ipv6 command line option
  (Shashank) Bug #734094.

2.41.2 (unstable):

Gio:
* Menu: Allow detailed_action == null
  (Kjell Ahlstedt) Bug #733203 (Hubert Figuiere)
* Add Permission and SimplePermission.
  (Juan R. García Blanco) Bug #732436

Glib:
* Make custom interface properties instance data.
  (Kjell Ahlstedt) Bug #732746
* PropertyBase: Use g_object_notify_by_pspec() instead of g_object_notify()
  (Povilas Kanapickas) Bug #731484

gmmproc:
* Add support for GtkContainer child properties.
  (Juan R. García Blanco)
*  _WRAP_METHOD: Allow multi-word parameter types such as unsigned int.
  (Kjell Ahlstedt)


2.41.1 (unstable):

Gio:
* Application: Deprecate set_action_group().
  (Kjell Ahlstedt)
* DesktopAppInfo: Deprecate set_desktop_env().
  (Kjell Ahlstedt)
* Settings:  Deprecate list_schemas(), range_check() and
  property_schema().
  (Kjell Ahlstedt)
* TlsConnection: Deprecate [set|get]_use_system_certdb()
  and property_use_system_certdb().
  (Kjell Ahlstedt)
* VolumeMonitor: Deprecate adopt_orphan_mount().
  (Kjell Ahlstedt)

Glib:
* Keyfile: Deprecate one of the load_from_dirs() methods.
  (Kjell Ahlstedt)
* ValueArray: Deprecated.
  (Kjell Ahlstedt)

tests:
* Test custom properties and an interface with properties.
  (José Alburquerque) Bug #697229

Documentation:
*  Add a blank line after @deprecated and @newin to help doxygen.
  (Kjell Ahlstedt)


2.41.0 (unstable):

Gio:
* Application:
  - Add add_main_option_entry() and enum OptionType.
  (Kjell Ahlsted) Bug #727822.
  - Add add_main_option_entry() taking a slot parameter
  (Kjell Ahlsted) Bug #727822.
* Add SocketSource, SignalSocket and Socket::create_source().
  (Kjell Ahlsted) Bug #725281.

Documentation:
* examples/network: Use SocketSource and SignalSocket.
  (Kjell Ahlstedt)

Build:
* gmmproc: Don't interpret a comma as the end of a deprecation message.
  (Kjell Ahlstedt)


2.40:

API additions since 2.38:

Glib:
* Keyfile: Add save_to_file().
  (Murray Cumming)
* Add VariantDict.
  (Murray Cumming)

Gio:
* Action: Add parse_detailed_name() and parse_detailed_name_variant().
  (Kjell Ahlstedt)
* Application: Add the handle-local-options signal.
  (Murray Cumming)
* ApplicationCommandline: Add get_options_dict().
* MenuModel: Add signal_items_changed()
  (Kjell Ahlstedt)
* MemoryInputStream: Add add_data() taking a sigc::slot,
  with a test.
  (Kjell Ahlstedt) Bug #609946 (Daniel Elstner)
* Add Notification.
  (Kjell Ahlstedt) Bug #722896.
* Settings: Add get_user_value() and get_default_value().
  (Murray Cumming)
* Socket: Add get/set_option().
  (Murray Cumming)
* TlsInteraction: Add invoke_request_certificate(),
  request_certificate(), request_certificate_async() and
  request_certificate_finish().
  (Murray Cumming)


2.40.0 (stable):

* VariantType: Fix typo in VARIANT_TYPE_BYTESTRING_ARRAY value.
  (Murray Cumming)
* gmmproc: Small improvement of enum documentation
  (Kjell Ahlstedt)
* Windows Update the visual Studio build files.
  (Chun-wei Fan)

2.39.93 (unstable):

Glib:
* Keyfile: Add save_to_file().
  (Murray Cumming)
* Add VariantDict.
  (Murray Cumming)
* Variant: Remove the now-unnecessary local g_variant_parse_error_quark().
  (Murray Cumming) Bug #727554 (Antoine Jacoutot)

Gio:
* Application: Add the handle-local-options signal.
* ApplicationCommandline: Add get_options_dict().
* Settings: Add get_user_value() and get_default_value().
  (Murray Cumming)
* Socket: Add get/set_option().
  (Murray Cumming)
* TlsInteraction: Add invoke_request_certificate(),
  request_certificate(), request_certificate_async() and
  request_certificate_finish().
  (Murray Cumming)

Build:
* h2def.py:
  - Handle *_DEPRECATED_IN_* and AVAILABLE_IN_* with 0 digits.
  - Also strip *_DEPRECATE_IN_*_FOR () without a space.
  (Murray Cumming)
* Visual Studio Projects: Update giomm Projects.
  (Chun-wei Fan)


2.39.92 (unstable):

Gio:
* Application: Add add_main_option_entry() and add_option_group().
  (Murray Cumming)

Documentation:
* Glib::ustring: Say more clearly that it must be only UTF-8.
  (Kjell Ahlstedt) Bug #681560 (vurentjie)

Build:
* win32: Surround content_type_get_symbolic_icon() with ifdefs.
  (Giuseppe Penone)


2.39.91 (unstable):

Documenation:
* Improve Gio::Socket documentation.
  (Tomasz Jankowski, Murray Cumming)

2.39.3 (unstable):

Gio
* Action:
  - Add parse_detailed_name() and parse_detailed_name_variant().
    (Kjell Ahlstedt)
  - Fix activate(const Glib::Variant<T_Value>& value).
    (Kjell Ahlstedt) Bug #722896
* MenuModel: Add signal_items_changed()
  (Kjell Ahlstedt)
* MemoryInputStream: Add add_data() taking a sigc::slot,
  with a test.
  (Kjell Ahlstedt) Bug #609946 (Daniel Elstner)
* MenuModel: Add signal_items_changed()
  (Kjell Ahlstedt)
* Add Notification.
  (Kjell Ahlstedt) Bug #722896.

Documentation:
* Fix some doxygen warnings.
  (Kjell Ahlstedt)
* Don't change NULL to 0 in docs, when it's part of a longer name.
  (Kjell Ahlstedt)
* OptionContext: Add API documentation based on the C docs.
  (Murray Cumming)


2.39.3 (unstable):

* Documentation improvements.
  (Kjell Ahlstedt)
* Fix a test on IPv6 systems.
  (Adam Sampson)


2.38.1 (stable):

Build:
* Gio::ActionGroup: Remove a nonsensical check that
  clang complains about, correctly.
  (Murray Cumming) Bug #709963 (Johannes Meng, David Evans)

Documentation:
* Gio::content_type_*(): Add a link from Gtk::AppChooser.
  (Kjell Ahlstedt)
* giomm_tls_client test: Add some comments
  (Kjell Ahlstedt)


Changes in 2.38 compared to 2.36:

Glib:
* Object: Add interfaces to custom types before class_init.
  This deprecates the use of Glib::Object as a base class
  anywhere but in the last in the list of base classes when
  implementing an interface, such as TreeModel or
  CellRenderer.
  Having it, for instance, as the first base class,
  is unfortunately likely to break with glib 3.40.
  (Kjell Ahlstedt) Bug #697229
* Use std::memset() instead of GLIBMM_INITIALIZE_STRUCT
  (Because it causes compiler warnings with --std=c++ with g++,
  because that defines __STRICT_ANSI__.) and deprecate
  GLIBMM_INITIALIZE_STRUCT.
  (Kjell Ahlstedt)
* ByteArray:
  - Fix refcount problems.
    (Krzesimir Nowak)
  - ByteArray: Add some tests for methods returning self.
    (Krzesimir Nowak)
* DateTime: Fix compare() and equal().
  (Kjell Ahlstedt) Bug #704639 (Aurimas Černius)
* Regex: Add get_max_lookbehind().
  (Murray Cumming)
* Variant: Fix memory leaks.
  (Kjell Ahlstedt) Bug #704851 (xanm)

Gio:
* Action:
  - get_state() and get_state_hint() now return something.
    We choose not to consider this an ABI break because these
    methods were impossible to use for anything useful before.
   (Andrew Potter) Bug #690134.
  - Add get_state_bool() and change_state(bool),
    to make it easier to deal with toggle actions.
    However, we might add a whole derived convenience class for these
    instead.
    (Murray Cumming, Kjell Ahlstedt)
  - Add create_radio_string() and create_radio_integer() for
    radio items, though we might change this API lots.
    (Murray Cumming)
  - Add name_is_valid() and print_detailed_name().
    (Murray Cumming)
  - Add an activate() method that takes no parameter.
    (Murray Cumming)
  - print_detailed_name(): Remove the action_name parameter.
    (Murray Cumming)
  - print_detailed_name() Make this templated.
   (Murray Cumming)
  - Make get_state() templated.
    (Murray Cumming)
  - get_state_hint(): Correct a check.
    (Murray Cumming)
  - Add templated change_state() and activate().
    (Murray Cumming)
* Application: Add mark/unmark_busy().
  (Murray Cumming)
* ActionGroup:
  - Add templated getters.
    (Murray Cumming)
  - activate_action(): Add a method overload
    that takes no parameter parameter.
    (Murray Cumming)
* ActionMap:
  - Add add_action(name, slot).
    This is a convenience method similar to
    g_action_map_add_action_entries() in C.
    (Murray Cumming, Kjell Ahlstedt)
  - Add add_action_radio_string() and add_action_radio_integer()
    for radio items, though we might change this API lots.
    (Murray Cumming)
* DesktopInfo: Add list_actions(), launch_action() and get_action_name().
  (Murray Cumming)
* File:
  - Add measure_disk_usage() and measure_disk_usage_async().
    (Murray Cumming)
  - Add trash_async(), trash_finish(), make_directory_async()
    and make_directory_finish().
    (Murray Cumming)
* Menu: Add remove_all().
  (Murray Cumming)
* MenuItem:
  - Add set/unset_icon().
    (Murray Cumming)
  - Reimplement the constructors.
    (Murray Cumming) Bug #705199 (Pete Woods)
  - Add set_action(), unset_target() and
    unset_action_and_target().
    (Murray Cumming)
  - MenuItem: get/set_attribute(): Deprecated for
    get/set_attribute_value() methods.
    (Murray Cumming)
  - Add insert/append/prepend_section() with no label parameter.
   (Murray Cumming) Bug #702456 (Aurimas Černius)
* Settings:
  - Add create_action().
    (Murray Cumming)
  - Add get/set_uint().
    (Murray Cumming)
* SimpleAction:
  - Make set_state() protected.
    (Murray Cumming)
  - add_action() now takes a slot with no parameter.
    Added add_action_with_parameter().
    (Murray Cumming)
  - set_enabled(): Add default parameter value.
    (Murray Cumming)
  - Add constructors and create_bool() methods that take a bool instead of
    a VariantBase for the state, to make it easier to deal with toggle actions.
    However, we might add a whole derived convenience class for these
    instead.
    (Murray Cumming)
* SimpleActionGroup:
  - lookup(): Add a const version and use refreturn.
    (Murray Cumming)
  - Deprecate all methods, because they just call methods in
    the base ActionMap. The C functions are now deprecated too.
    See glib bug #705600 .
    (Murray Cumming)
* Add VariantParseError.
  Because it is thrown by GtkBuilder, at least for now.
  (Murray Cumming

Gio::DBus:
* Add InterfaceSkeleton.
  (José Alburquerque)

Build:
* Port tools/defs_gen to Python 3.
  (Kjell Ahlstedt) Bug #690969
* tools/h2def.py: Handle functions with Handle *_DEPRECATED_IN_*_FOR (*).
  (Murray Cumming)
* Update Visual Studio Projects
  (Chun-wei Fan)
* Glib::TypeTraits<>: Avoid warnings when compiling with -Wcast-qual.
  (Kjell Ahlstedt) Bug #704640 (Aurimas Černius)
* enums.pl: fixed multi-argument defines as enum values.
  (Marcin Kolny) Bug #705113
* Move to a generated ChangeLog.
  (José Alburquerque)

gmmproc:
* Pass NULL to C function calls for optional empty strings.
  (José Alburquerque) Bug #686909. Bug #702456
* Add parameter return_value in _WRAP_VFUNC.
  (Marcin Kolny) Bug #705699.
* Fix _WRAP_SIGNAL with 'ifdef' and 'deprecated'.
  (Kjell Ahlstedt)
* docextract_to_xml.py: Add '&rArr;' to the list of escape sequences.
  (José Alburquerque)
* Add _WRAP_ENUM_DOCS_ONLY() and simplify enum docs process.
  (José Alburquerque) Bug #703155
*  gmmproc: Use GMMPROC_RETURN_MISMATCHES environment variable.
  (José Alburquerque)
* Write glibmm version in generated files.
  (Kjell Ahlstedt) Bug #697835 and Bug #700495

Documentation:
* gmmproc: Add docs to the default constructor of _CLASS_OPAQUE_COPYABLE.
  mentioning that the constructed object is invalid.
  (Kjell Ahlstedt) Bug #704639 (Aurimas Černius)



2.38.0 (stable):

Glib:
* ByteArray:
  - Fix refcount problems.
  (Krzesimir Nowak)
  - ByteArray: Add some tests for methods returning self.
  (Krzesimir Nowak)

Gio
* Action:
  - Add an activate() method that takes no parameter.
  (Murray Cumming)
  - print_detailed_name(): Remove the action_name parameter.
  (Murray Cumming)
* ActionGroup: activate_action(): Add a method overload
  that takes no parameter parameter.
  (Murray Cumming)
* ActionMap: Fix a reference-counting problem.
  (Murray Cumming)
* MenuItem:
  - Add set_action(), unset_target() and
  unset_action_and_target().
  (Murray Cumming)
  - MenuItem: get/set_attribute(): Deprecated for
    get/set_attribute_value() methods.
  (Murray Cumming)
* Settings: Add create_action().
  (Murray Cumming)


2.37.93 (unstable):

Gio
* ActionMap: lookup_action(): Fix the reference counting.
  (Murray Cumming)
* File: Add measure_disk_usage() and measure_disk_usage_async().
  (Murray Cumming)
* Settings: Add get/set_uint().
  (Murray Cumming)
* Add VariantParseError.
  Because it is thrown by GtkBuilder, at least for now.
  (Murray Cumming

Build:
* Port tools/defs_gen to Python 3.
  (Kjell Ahlstedt) Bug #690969
* tools/h2def.py: Handle functions with Handle *_DEPRECATED_IN_*_FOR (*).
  (Murray Cumming)

2.37.7 (unstable):

Gio:
* Menu: Add insert/append/prepend_section() with no label parameter.
  (Murray Cumming) Bug #702456 (Aurimas Černius)

gmmproc:
* Pass NULL to C function calls for optional empty strings.
  (José Alburquerque) Bug #686909. Bug #702456
* Add parameter return_value in _WRAP_VFUNC.
  (Marcin Kolny) Bug #705699.

Build:
* Update Visual Studio Projects
  (Chun-wei Fan)


2.37.6 (unstable):

Gio:
* Action:
  - Make get_state() templated.
    (Murray Cumming)
  - get_state_hint(): Correct a check.
    (Murray Cumming)
  - Add templated change_state() and activate().
    (Murray Cumming)
  - print_detailed_name() Make this templated.
     (Murray Cumming)
* ActionGroup: Add templated getters.
  (Murray Cumming)
* ActionMap: add_action_radio_*(): Use better Slot types.
  (Murray Cumming)
* SimpleAction:
  - Make set_state() protected.
   (Murray Cumming)
  - add_action() now takes a slot with no parameter.
    Added add_action_with_parameter().
    (Murray Cumming)
* SimpleActionGroup:
  - lookup(): Add a const version and use refreturn.
    (Murray Cumming)
  - Deprecate all methods, because they just call methods in
    the base ActionMap. The C functions are now deprecated too.
    See glib bug #705600 .
    (Murray Cumming)

gmmproc:
* Fix _WRAP_SIGNAL with 'ifdef' and 'deprecated'.
  (Kjell Ahlstedt)


2.37.5 (unstable):

Glib
* Object: Add interfaces to custom types before class_init.
  This deprecates the use of Glib::Object as a base class
  anywhere but in the last in the list of base classes when
  implementing an interface, such as TreeModel or
  CellRenderer.
  Having it, for instance, as the first base class,
  is unfortunately likely to break with glib 3.40.
  (Kjell Ahlstedt) Bug #697229
* DateTime: Fix compare() and equal().
  (Kjell Ahlstedt) Bug #704639 (Aurimas Černius)
* Regex: Add get_max_lookbehind().
  (Murray Cumming)
* Variant: Fix memory leaks.
  (Kjell Ahlstedt) Bug #704851 (xanm)

Gio:
* Action:
  - get_state() and get_state_hint() now return something.
  We choose not to consider this an ABI break because these
  methods were impossible to use for anything useful before.
  (Andrew Potter) Bug #690134.
  - Add get_state_bool() and change_state(bool),
  to make it easier to deal with toggle actions.
  However, we might add a whole derived convenience class for these
  instead.
  (Murray Cumming, Kjell Ahlstedt)
  - Add create_radio_string() and create_radio_integer() for
  radio items, though we might change this API lots.
  (Murray Cumming)
  - Add name_is_valid() and print_detailed_name().
  (Murray Cumming)
* ActionMap:
  - Add add_action(name, slot).
  This is a convenience method similar to
  g_action_map_add_action_entries() in C.
  (Murray Cumming, Kjell Ahlstedt)
  - Add add_action_radio_string() and add_action_radio_integer()
  for radio items, though we might change this API lots.
  (Murray Cumming)
* Application: Add mark/unmark_busy().
  (Murray Cumming)
* DesktopInfo: Add list_actions(), launch_action() and get_action_name().
  (Murray Cumming)
* File: Add trash_async(), trash_finish(), make_directory_async()
  and make_directory_finish().
  (Murray Cumming)
* Menu: Add remove_all().
  (Murray Cumming)
* MenuItem:
  - Add set/unset_icon().
  (Murray Cumming)
  - Reimplement the constructors.
  (Murray Cumming) Bug #705199 (Pete Woods)
* SimpleAction:
  - set_enabled(): Add default parameter value.
  (Murray Cumming)
  - Add constructors and create_bool() methods that take a bool instead of
  a VariantBase for the state, to make it easier to deal with toggle actions.
  However, we might add a whole derived convenience class for these
  instead.
  (Murray Cumming)

Documentation:
* gmmproc: Add docs to the default constructor of _CLASS_OPAQUE_COPYABLE.
  mentioning that the constructed object is invalid.
  (Kjell Ahlstedt) Bug #704639 (Aurimas Černius)

Build:
* Glib::TypeTraits<>: Avoid warnings when compiling with -Wcast-qual.
  (Kjell Ahlstedt) Bug #704640 (Aurimas Černius)
* enums.pl: fixed multi-argument defines as enum values.
  (Marcin Kolny) Bug #705113


2.37.4 (unstable):

glibmm:
* Use std::memset() instead of GLIBMM_INITIALIZE_STRUCT
  (Because it causes compiler warnings with --std=c++ with g++,
  because that defines __STRICT_ANSI__.) and deprecate
  GLIBMM_INITIALIZE_STRUCT.
  (Kjell Ahlstedt)

giomm:
* Add Gio::DBus::InterfaceSkeleton.
  (José Alburquerque)

gmmproc:
* docextract_to_xml.py: Add '&rArr;' to the list of escape sequences.
  (José Alburquerque)
* Add _WRAP_ENUM_DOCS_ONLY() and simplify enum docs process.
  (José Alburquerque) Bug #703155
*  gmmproc: Use GMMPROC_RETURN_MISMATCHES environment variable.
  (José Alburquerque)
* Write glibmm version in generated files.
  (Kjell Ahlstedt) Bug #697835 and Bug #700495

Build:
* Move to a generated ChangeLog.
  (José Alburquerque)

2.36.2 (stable):

* Revert this change from 2.36.1, which should not have appeared in a
	stable release yet:
	Custom Interfaces: Implement derived interface properties.
	(Murray Cumming)

2.36.1 (stable):

* Custom Interfaces: Implement derived interface properties.
  (José Alburquerque)
* gmmproc: Fix _WRAP_SIGNAL(custom_c_callback) for void func().
  (Kjell Ahlstedt) Bug #605728 (Murray Cumming)
* Output.pm: convert_args_c_to_cpp(): Reverse mappings hash correctly.
  (José Alburquerque) Bug #698989 (David Evans, John Ralls)

Changes in 2.36 compared to 2.34:

Glib:
* AppInfo::get_all(): Fix ownerships.
  (Pavel Vasi) Bug #694505
  (José Alburquerque)
* Add ByteArray, because it is used in the GTls* API.
  (José Alburquerque)
* Resolver: Add lookup_records(), lookup_records_async()
  and lookup_records_finish().
  (José Alburquerque)
* Signal*::connect(): Make them less thread-unsafe.
  (Kjell Ahlstedt) Bug #396958 (Daniel Elstner, Chris Vine)
* Threads: Add create(slot, name) to create named threads.
  (Andrew Potter) Bug #689863
* Variant: Allow containing complex types in arrays and in variants.
  (José Alburquerque)
* Variant: Don't refsink variants created using the custom cast ctor.
  (José Alburquerque)
* Variant< std::vector<std::string> >: Add create_from_object_paths().
  (José Alburquerque)
* VariantBase: Add check_format_string().
   (Murray Cumming)
* VariantBase: Add operator for BoolExpr (const void*).
  (Andrew Potter) Bug #690121
* VariantType: Add create_tuple().
  (Andrew Potter) Bug #688682
* VariantType: Correct the referencing in the create*() methods.
  (José Alburquerque) Bug #688440 (Andrew Potter)


Gio:
* AppInfo: Add create_duplicate().
  (José Alburquerque)
* ApplicationCommandLine: Add get_stdin() and
  create_file_for_arg().
  (Murray Cumming)
* AsyncResult: Added is_tagged().
  (Murray Cumming)
* Credentials: Add get_unix_pid().
  (José Alburquerque)
* DesktopAppInfo: Add has_key(),
  get_string() and get_boolean().
  (Murray Cumming)
* DesktopAppInfo: Add some new getter methods.
  (José Alburquerque)
* File: Remove refreturn to avoid memory leaks.
  (Kjell Ahlstedt) Bug #691606 (Dodak4Gi)
* FileEnumerator: Add get_child().
  (Murray Cumming)
* FileInfo: Add get_deletion_date().
  (Murray Cumming)
* MemoryOutputStream: Add the steal_as_bytes() method.
  (José Alburquerque)
* SimpleAction: Fix stateful action constructor typo, allowing use.
  (Andrew Potter) Bug #690122
* SocketClient: Add get/set_tls(),
  get/set_tls_validation_flags(), get/set_proxy_resolver().
  Added timeout, tls, enable-proxy, tls-validation, and
  proxy-resolver properties.
  Added the event signal.
  (Murray Cumming)
* SocketConnection: Add connect*() and is_connected() methods.
  (José Alburquerque)
* ThemedIcon: Wrap the "names" property.
  (José Alburquerque)
* Add TlsConnection, TlsClient, TlsServer, TlsDatabase,
  TlsCertificate, TlsPassword, TlsFileDatabase and TlsInteraction.
  (José Alburquerque)
* UnixConnection: Add [receive|send]_credentials_[async|finish]().
  (José Alburquerque)

Gio::DBus:
* DBus::[Connection|Proxy]: Use ifdefs for the UnixFDList call*() methods.
  (José Alburquerque)

gmmproc:
* Verify that void methods should not return a value.
  (José Alburquerque) Bug #696364
* Parse the argument list of methods correctly.
  (José Alburquerque)
* gmmproc: _WRAP_VFUNC: Support the wrapping of slots.
  (José Alburquerque)
* gmmproc: _WRAP_METHOD: Support wrapping methods with slots.
  (José Alburquerque) Bug #688587
* gmmproc: _WRAP_METHOD: Ensure that slot parameters can be optional.
  (José Alburquerque)
* gmmproc: _WRAP_[CREATE|CTOR|METHOD]: Allow any order of {} options.
  (José Alburquerque)
* gmmproc: _WRAP_ENUM: Skip enum constants whose names are deleted.
  (Kjell Ahlstedt) Bug #544694 (Murray Cumming)
* gmmproc: _WRAP_CTOR: Handle *_new() functions with a final GError**.
  (José Alburquerque) Bug #687959

Build:
* Visual Studio Projects: Fix and update.
  (Chun-wei Fan)
* Add a test of implementing an interface,
  to detect the problem in glib 2.36.0 and
  the expected problem with glib >= 2.37.0
  See bug #697229
  (Murray Cumming)
* DBus::[Connection|Proxy]: Change ifdef G_OS_LINUX to ifdef G_OS_UNIX.
  (Kjell Ahlstedt)
* ContentType: Fix typo in the content_type_get_symbolic_icon() implementation.
  (José Alburquerque)
* Remove the use of g_type_init() because it has been deprecated.
  (José Alburquerque)
* Strip trailing whitespace.
  (Mark Vender)
* Fix the build with warnings enabled.
  (Murray Cumming)




Documentation:
* Signal[Timeout|Idle]::connect_once() docs: Warn about thread-unsafety.
  (Kjell Ahlstedt) Bug #396963 (Daniel Elstner, Chris Vine)
* ThreadPool::push() docs: Note that sigc::trackable is not thread-safe.
  (Kjell Ahlstedt) Bug #512348 (Chris Vine)
* Threads::Thread::create(): Update the documentation.
  (Kjell Ahlstedt) Bug #512348 (Chris Vine)
* SignalProxy: Fix the documentation, especially of connect_notify().
  (Kjell Ahlstedt) Bug #126213, comment 5.
* Gio::Action: Add more documentation of get_state_hint() and get_state().
  (Kjell Ahlstedt) Bug #690134 (Andrew Potter)
* Predefine G_OS_UNIX or G_OS_WIN32 in Doxygen's configuration file.
  (Kjell Ahlstedt)
* gmmproc: Improve the conversion of documentation to Doxygen format.
  (Kjell Ahlstedt)
* Documentation: Fix many warnings from Doxygen.
  (Kjell Ahlstedt)
* gmmproc: Make enum documentation possible.
  (José Alburquerque) Bug #544694 (Murray Cumming)
* gmmproc: Improve the search for documentation of enums.
  (Kjell Ahlstedt)
* gmmproc: Documentation: Adjust if the method has a slot param.
  (José Alburquerque) Bug #688587.
* docextract_to_xml.py: Replace &colon; with ':' in generated XML files.
  (José Alburquerque)
* gmmproc: Improve the documentation of properties.
  (Kjell Ahlstedt)
* ustring docs: The global locale should be set when using C++ streams.
  (Debarshi Ray) Bug #661588


2.36.0 (stable):

Changes since 2.35.9:

Glib:
* ByteArray:
  - Add size() and get_data().
  - Add a Glib::Value<> template specialization.
  (José Alburquerque)
* VariantBase: Add check_format_string().
   (Murray Cumming)

Gio:
* ApplicationCommandLine: Add get_stdin() and
  create_file_for_arg().
  (Murray Cumming)
* AsyncResult: Added is_tagged().
  (Murray Cumming)
* Credentials: Add get_unix_pid().
  (José Alburquerque)
* DesktopAppInfo: Add has_key(),
  get_string() and get_boolean().
  (Murray Cumming)
* FileEnumerator: Add get_child().
  (Murray Cumming)
* FileInfo: Add get_deletion_date().
  (Murray Cumming)
* SocketClient: Add get/set_tls(),
  get/set_tls_validation_flags(), get/set_proxy_resolver().
  Added timeout, tls, enable-proxy, tls-validation, and
  proxy-resolver properties.
  Added the event signal.
  (Murray Cumming)

gmmproc:
* Verify that void methods should not return a value.
  (José Alburquerque) Bug #696364
* Parse the argument list of methods correctly.
  (José Alburquerque)

Build:
* Visual Studio Projects: Fix and update.
  (Chun-wei Fan)
* Add a test of implementing an interface,
  to detect the problem in glib 2.36.0 and
  the expected problem with glib >= 2.37.0
  See bug #697229
  (Murray Cumming)


2.35.9 (unstable):

Glib:
* Add edByteArray, because it is used in the GTls* API.
  (José Alburquerque)
* AppInfo::get_all(): Fix ownerships.
  (Pavel Vasi) Bug #694505


Gio:
* TlsFileDatabase: Add the create() method.
  (José Alburquerque)
* TlsCertificate: Add the certificate property.
  (José Alburquerque)
* TlsClientConnection: Add get_accepted_cas()
  and the "accepted-cas" property.
  (José Alburquerque)
* TlsDatabase: Add the lookup_certificates_issued_by*()
  methods and virtual functions.  Correct a TlsCertificate conversion
  for the virtual functions so that the underlying GObject is properly
  copied from the C++ wrapper.
  (José Alburquerque)
* TlsInteraction: Add the virtual functions.
  (José Alburquerque)


2.35.8 (unstable):

Glib:
* Resolver: Add lookup_records(), lookup_records_async()
  and lookup_records_finish().
  (José Alburquerque)
* Signal*::connect(): Make them less thread-unsafe.
  (Kjell Ahlstedt) Bug #396958 (Daniel Elstner, Chris Vine)
* Threads: Add create(slot, name) to create named threads.
  (Andrew Potter) Bug #689863
* Variant: Allow containing complex types in arrays and in variants.
  (José Alburquerque)
* Variant: Don't refsink variants created using the custom cast ctor.
  (José Alburquerque)
* Variant< std::vector<std::string> >: Add create_from_object_paths().
  (José Alburquerque)
* VariantBase: Add operator for BoolExpr (const void*).
  (Andrew Potter) Bug #690121
* VariantType: Add create_tuple().
  (Andrew Potter) Bug #688682
* VariantType: Correct the referencing in the create*() methods.
  (José Alburquerque) Bug #688440 (Andrew Potter)

Gio:
* AppInfo: Add create_duplicate().
  (José Alburquerque)
* DesktopAppInfo: Add some new getter methods.
  (José Alburquerque)
* File: Remove refreturn to avoid memory leaks.
  (Kjell Ahlstedt) Bug #691606 (Dodak4Gi)
* MemoryOutputStream: Add the steal_as_bytes() method.
  (José Alburquerque)
* SimpleAction: Fix stateful action constructor typo, allowing use.
  (Andrew Potter) Bug #690122
* SocketConnection: Add connect*() and is_connected() methods.
  (José Alburquerque)
* ThemedIcon: Wrap the "names" property.
  (José Alburquerque)
* Add TlsConnection, TlsClient, TlsServer, TlsDatabase,
  TlsCertificate, TlsPassword, TlsFileDatabase and TlsInteraction.
  (José Alburquerque)
* UnixConnection: Add [receive|send]_credentials_[async|finish]().
  (José Alburquerque)

Gio::DBus:
* DBus::[Connection|Proxy]: Use ifdefs for the UnixFDList call*() methods.
  (José Alburquerque)

gmmproc:
* gmmproc: _WRAP_VFUNC: Support the wrapping of slots.
  (José Alburquerque)
* gmmproc: _WRAP_METHOD: Support wrapping methods with slots.
  (José Alburquerque) Bug #688587
* gmmproc: _WRAP_METHOD: Ensure that slot parameters can be optional.
  (José Alburquerque)
* gmmproc: _WRAP_[CREATE|CTOR|METHOD]: Allow any order of {} options.
  (José Alburquerque)
* gmmproc: _WRAP_ENUM: Skip enum constants whose names are deleted.
  (Kjell Ahlstedt) Bug #544694 (Murray Cumming)
* gmmproc: _WRAP_CTOR: Handle *_new() functions with a final GError**.
  (José Alburquerque) Bug #687959

Documentation:
* Signal[Timeout|Idle]::connect_once() docs: Warn about thread-unsafety.
  (Kjell Ahlstedt) Bug #396963 (Daniel Elstner, Chris Vine)
* ThreadPool::push() docs: Note that sigc::trackable is not thread-safe.
  (Kjell Ahlstedt) Bug #512348 (Chris Vine)
* Threads::Thread::create(): Update the documentation.
  (Kjell Ahlstedt) Bug #512348 (Chris Vine)
* SignalProxy: Fix the documentation, especially of connect_notify().
  (Kjell Ahlstedt) Bug #126213, comment 5.
* Gio::Action: Add more documentation of get_state_hint() and get_state().
  (Kjell Ahlstedt) Bug #690134 (Andrew Potter)
* Predefine G_OS_UNIX or G_OS_WIN32 in Doxygen's configuration file.
  (Kjell Ahlstedt)
* gmmproc: Improve the conversion of documentation to Doxygen format.
  (Kjell Ahlstedt)
* Documentation: Fix many warnings from Doxygen.
  (Kjell Ahlstedt)
* gmmproc: Make enum documentation possible.
  (José Alburquerque) Bug #544694 (Murray Cumming)
* gmmproc: Improve the search for documentation of enums.
  (Kjell Ahlstedt)
* gmmproc: Documentation: Adjust if the method has a slot param.
  (José Alburquerque) Bug #688587.
* docextract_to_xml.py: Replace &colon; with ':' in generated XML files.
  (José Alburquerque)
* gmmproc: Improve the documentation of properties.
  (Kjell Ahlstedt)
* ustring docs: The global locale should be set when using C++ streams.
  (Debarshi Ray) Bug #661588

Build/Other:
* DBus::[Connection|Proxy]: Change ifdef G_OS_LINUX to ifdef G_OS_UNIX.
  (Kjell Ahlstedt)
* ContentType: Fix typo in the content_type_get_symbolic_icon() implementation.
  (José Alburquerque)
* Remove the use of g_type_init() because it has been deprecated.
  (José Alburquerque)
* Strip trailing whitespace.
  (Mark Vender)
* Fix the build with warnings enabled.
  (Murray Cumming)


Changes in 2.34 compared to 2.32:

Glib:
* Added the Bytes class, wrapping GBytes.
  (Murray Cumming)
* RegEx: Add get_has_cr_or_lf().
  (José Alburquerque)
* Threads::Mutex, RecMutex: Add wrap() functions.
  (Kjell Ahlstedt) Bug #483790
* VariantIter: Add init() method.
  (José Alburquerque)

Gio:
* ActionGroup: Add the query_action() methods.
  (José Alburquerque)
* AppInfo: Added  get_display_name(),
  set_as_last_used_for_type() and get_supported_types().
  (Murray Cumming)
* AppLaunchContext: Add setenv(), unsetenv() and get_environment().
  (Murray Cumming)
* Application:
  - Added get_dbus_connection()
  and get_dbus_object_path().
  - Allow the application ID to be empty.
  (Murray Cumming)
* ContentType:
  - get_icon(): Fix a refcount error.
  - Added get_symbolic_icon().
  (Murray Cumming)
* Add Converter, ZlibCompressor, ZlibDecompressor and
  CharsetConverter classes.
  (José Alburquerque)
* Add ConverterInputStream and ConverterOutputStream.
  (José Alburquerque)
* DBusAuthObserver: Added allow_mechanism().
  (Murray Cumming)
* Drive: Added get_symbolic_icon().
  (Murray Cumming)
* File: Add remove_async() and remove_finish().
  (Murray Cumming)
* FileAttributeMatcher: Add create_difference() and to_string().
  (José Alburquerque)
* FileInfo:
  - Add has_namespace(), [get|set]_attribute_status(),
  and [get|set]_attribute_strings().
  (José Alburquerque)
  - Added get_symbolic_icon().
  (Murray Cumming)
* InetSocketAddress: Added get_flowinfo() and get_scope_id()
  (Murray Cumming)
* InputStream: Added read_bytes(), read_bytes_async() and read_bytes_finish().
  (Murray Cumming)
* IOStream: Add splice_async() splice_finish().
  (José Alburquerque)
* Menu: Added append_section().
  (Murray Cumming)
* MenuItem:
  - Added get_link().
  (Murray Cumming)
  - Add get_attribute().
  (José Alburquerque)
* MenuModel: Added is_mutable() and get_n_items().
  (Murray Cumming)
* Mount: Added get_symbolic_icon().
  (Murray Cumming)
* MountOperation: Wrap the "show-unmount-progess" signal.
  (José Alburquerque)
* OutputStream: Added write_bytes(), write_bytes_async() and write_bytes_finish().
  (Murray Cumming)
* Add PollableInputStream and PollableOutputStream.
  (José Alburquerque)
* Proxy: Add call(), call_sync() and call_finish() for unix_fd_list.
  (Murray Cumming)
* ProxyAddress: Added get_destination_protocol()
  and get_uri().
  (Murray Cumming)
* Add Resource
  Bug #674545 (Kalev Lember)
* Socket: Added get_available_bytes(), get_ttl(), set_ttl(),
  get_broadcast(), set_broadcast(),
  get_multicast_loopback(), set_multicast_loopback(),
  get_multicast_ttl(), set_multicast_ttl(),
  join_multicast_group(), leave_multicast_group(),
  and properties.
  (Murray Cumming)
* Volume:
  - Added get_symbolic_icon().
  - Added get_sort_key().
  (Murray Cumming)

Gio::DBus:
* Connection:
  - Added get_last_serial().
  (Murray Cumming)
  - Added call_[finish|sync]() with UnixFDLists.
  (José Alburquerque)#662371.

gmmproc:
* Add _INCLUDE_IN_WRAP_INIT, _GMMPROC_WRAP_CONDITIONALLY.
  (Kjell Ahlstedt) Bug #678883.
* Add _CUSTOM_CTOR_CAST
  (Krzesimir Nowak)
* _WRAP_VFUNC: Handle virtual functions that throw GErrors.
  (José Alburquerque) Bug #683460
* Add a _NO_WRAP_INIT_REGISTRATION macro
  (José Alburquerque) Bug #684006
* _CLASS_GOBJECT: Allow classes to have custom wrap() functions.
  (José Alburquerque) Bug #684006
* _WRAP_METHOD: Allow setting parameters from C output params.
  (José Alburquerque) Bug #662371


2.34.0 (stable):

* Some minor documentation improvements.
  (Murray Cumming)

2.33.14:

Glib:
* RegEx: Add get_has_cr_or_lf().
  (José Alburquerque)
* VariantIter: Add init() method.
  (José Alburquerque)

Gio:
* ActionGroup: Add the query_action() methods.
  (José Alburquerque)
* FileAttributeMatcher: Add create_difference() and to_string().
* FileInfo:  Add has_namespace(), [get|set]_attribute_status(),
  and [get|set]_attribute_strings().
  (José Alburquerque)
* IOStream: Add splice_async() splice_finish().
* MenuItem: Add get_attribute().
* MountOperation: Wrap the "show-unmount-progess" signal.
  (José Alburquerque)

* Gio::DBus:
  - Proxy: Add call(), call_sync() and call_finish() for unix_fd_list.
    (Murray Cumming)

* gmmproc:
  - Make the output param feature work for single indirection.
    (José Alburquerque) Bug #662371.
  - Add 3-argument @newin.
    (Kjell Ahlstedt)


2.33.13 (unstable):

Gio:
* AppLaunchContext: Add setenv(), unsetenv() and get_environment().
* File: Add remove_async() and remove_finish().
  (Murray Cumming)
* Add e ConverterInputStream and ConverterOutputStream.
* Add PollableInputStream and PollableOutputStream.
  (José Alburquerque)

Gio::DBus:
* Connection: Add the call_[finish|sync]() with UnixFDLists.
  (José Alburquerque)#662371.

gmmproc:
* Add a _NO_WRAP_INIT_REGISTRATION macro
  (José Alburquerque) Bug #684006
* _CLASS_GOBJECT: Allow classes to have custom wrap() functions.
  (José Alburquerque) Bug #684006
* _WRAP_METHOD: Allow setting parameters from C output params.
  (José Alburquerque) Bug #662371
* Prepend a Doxygen @throws clause to the declaration of virtual
  functions that throw Glib::Error.
  (José Alburquerque)
* Improve the search for unwrapped methods.
  (Kjell Ahlstedt)

Build:
* Use std::time_t instead of ::time_t
  instead of ::time_t.
* Use std::size_t and std::ptrdiff_t instead
  of ::size_t and ::ptrdiff_t.
  (Kjell Ahlstedt)


2.33.12 (unstable):

Gio:
* Add Converter, ZlibCompressor, ZlibDecompressor and
  CharsetConverter classes.
  (José Alburquerque)
* AppInfo: Added  get_display_name(),
  set_as_last_used_for_type() and get_supported_types().
* Application: Added get_dbus_connection()
  and get_dbus_object_path().
* ContentType:
  - get_icon(): Fix a refcount error.
  - Added get_symbolic_icon().
  (Murray Cumming)
* DBusAuthObserver: Added allow_mechanism().
* Drive: Added get_symbolic_icon().
* FileInfo: Added get_symbolic_icon().
* Menu: Added append_section().
* MenuItem: Added get_link().
* MenuModel: Added is_mutable() and get_n_items().
* Mount: Added get_symbolic_icon().
* ProxyAddress: Added get_destination_protocol()
  and get_uri().
* Socket: Added get_available_bytes(), get_ttl(), set_ttl(),
  get_broadcast(), set_broadcast(),
  get_multicast_loopback(), set_multicast_loopback(),
  get_multicast_ttl(), set_multicast_ttl(),
  join_multicast_group(), leave_multicast_group(),
  and properties.
* Volume:
  - Added get_symbolic_icon().
  - Added get_sort_key().
  (Murray Cumming)

gmmproc:
* _WRAP_VFUNC: Handle virtual functions that throw GErrors.
  (José Alburquerque) Bug #683460


2.33.4 (unstable):

Glib:
* KeyFile: Correct the load_from_dirs() implementation.
  (Krzesimir Nowak)
* Variant: Make sure that we always sink the initial reference.
  (Krzesimir Nowak) Bug #680407
* VariantType: peek_string(): Correct this to handle
  the non-null-terminated result from g_variant_type_peek_string().
* Threads::Mutex, RecMutex: Add wrap() functions.
  (Kjell Ahlstedt) Bug #483790

gmmproc:
*  Add _CUSTOM_CTOR_CAST
  (Krzesimir Nowak)

Documentation:
* Show the get_type() functions in the API documentation.
  (Murray Cumming) Bug #670212 (Mark Vender).


2.33.3 (unstable):

Glib:
* Added the Bytes class, wrapping GBytes.
  (Murray Cumming)

Gio:
* InetSocketAddress: Added get_flowinfo() and get_scope_id()
* OutputStream: Added write_bytes(), write_bytes_async() and write_bytes_finish().
* InputStream: Added read_bytes(), read_bytes_async() and read_bytes_finish().
  (Murray Cumming)

Gio::DBus:
* Connection: Added get_last_serial().
  (Murray Cumming)

gmmproc:
* Add _INCLUDE_IN_WRAP_INIT, _GMMPROC_WRAP_CONDITIONALLY.
  (Kjell Ahlstedt) Bug #678883.

2.33.2 (unstable):

* Added some enum values and documentation.
  (Murray Cumming)

2.33.1 (unstable):

Gio:
* Application:
  - Allow the application ID to be empty.
  - Pass 0 (NULL) rather than "" to GApplication.
  (Murray Cumming)
* Add Resource
  Bug #674545 (Kalev Lember)

Glib:
* Miscutils: get_system_data_dirs(), get_system_config_dirs():
  Return early when the C function returns NULL.
  (Krzesimir Nowak)
* Thread::RecMutex: Don't initialize this as a GStaticMutex.
  (Deprecated anyway)
  (Michał Wróbel) Bug #677291
* Documentation: Don't hide add_exception_handler() documentation.
  (Kjell Ahlstedt)

2.32.0 (stable):

Glib:
* Dispatcher: Don't send messages to a deleted Dispatcher.
  (Kjell Ahlstedt) Bug #651942
* Make SignalTimeout/SignalIdle::connect_once() more thread safe.
  (Kjell Ahlstedt) Suggested by Chris Vine. Bug #396963
* Document Glib::Property and Glib::PropertyBase.
  (Mark Vender) Bug #673291

gmmproc:
* Add macro _CUSTOM_CTOR_CAST in _CLASS_BOXEDTYPE.
  (Kjell Ahlstedt) Bug #511136, comment 20.
* Generate the documentation of default constructors of interface classes.
  (Mark Vender) Bug #673213

Build:
* Update Visual Studio projects.
  (Chun-wei Fan)


2.31.22 (unstable):

Glib:
* Threads, Dispatcher: Delete DispatchNotifier.
  (Kjell Ahlstedt) Bug #671587.

Gio:
* Action: Ensure vfunc callbacks return valid memory.
  (José Alburquerque)
* ActionGroup: list_actions_vfunc(): Do not return freed memory.
  (Murray Cumming)
* Move AppLaunchContext into its own header file.
  (Murray Cumming)
* Add Menu and MenuItem.
* SimpleAction: Constructor: Add a parameter that takes no VariantType.
  (Murray Cumming)

Gio::DBus:
* Object: Ensure vfunc callbacks return valid memory.
  (José Alburquerque)
* Add the Interface and Object interfaces.
  (José Alburquerque)

gmmproc:
* _WRAP_SIGNAL() can now take an optional deprecated parameter,
  like _WRAP_METHOD() and _WRAP_PROPERTY().
  (Murray Cumming, Kjell Ahlstedt)
* _WRAP_PROPERTY(): Correct the ifdefs in generated code when
  using the optional deprecated parameter.
  (Kjell Ahlstedt)

Other:
* Dispatcher examples: Use Glib::signal_idle().connect_once().
  (Kjell Ahlstedt) Bug #396963
* Some fixes for minor clang++ warnings.
  (José Alburquerque, Murray Cumming)


2.31.20:

Glib:
* Fix exceptions thrown by Thread::create() and Threads::Thread::create.
  (Kjell Ahlstedt) Bug #640029 (Michael Edwards)
* Fix the build with --disable-deprecated-api.
  (Kjell Ahlstedt) Bug #640029 (Michael Edwards)

Gio::
* Application: Add quit().
  (Murray Cumming)

Gio::DBus:
* DBus::Error, DBus::Proxy: Fix interaction with generate_wrap_init.pl.
  (Kjell Ahlstedt) Bug #640029 (Michael Edwards)

* Documentation: Signal*: Better description of the connect*() methods.
  (Kjell Ahlstedt) Bug #669906 (Mark Vender)

gmmproc and tools:
* gmmproc: Allow destructors to be documented.
  (José Alburquerque) Bug #668918 (Mark Vender)
* docextract_to_xml.py: Generate signal documentation too.
  (José Alburquerque) Bug #668918 (Mark Vender)
* Add some scripts to regenerate the .defs files.
  (José Alburquerque)
* generate_wrap_init.pl:
  - Improve reg. of exception classes in sub-namespaces and
  improve it for deprecated files and sub-namespaces.
  (Kjell Ahlstedt) Bug #640029 (Michael Edwards)
* h2defs.py: Ignore the new GDK_AVAILABLE_IN_* macros.
  (Murray Cumming)

2.31.18.1:

gmmproc:
* h2def.py: Handle types such as 'const gchar* const *' for functions.
  (José Alburquerque)
* _WRAP_PROPERTY(): Allow properties to be deprecated.
  (Murray Cumming)

Gio:
* Application: Derive from the ActionGroup interface.
* Application: Add missing virtual functions and get/set_default() methods.
* Add MenuModel, MenuAttribute, MenuLink and MenuIter.

Gio::DBus:
* ActionGroup, MenuModel: Have get() methods instead of create() methods.
  (José Alburquerque) Bug #637445.
* Add DBus::MenuModel.
* Connection: Add the MenuModel export/unexport methods.
* Add class documentation.


2.31.18: (unstable):

Gio:
* Add the ActionMap interface.
  (José Alburquerque)

Gio::Dbus:
* Add the ActionGroup classe.
* Connection: Add the ActionGroup export/unexport methods.
  (José Alburquerque)

Glib:
* Add the RemoteActionGroup classes.
  (José Alburquerque)

gmmproc:
* h2def.py: Handle deprecated functions.
* docs: Remove possible parens in gtk-doc signal references. Bug #668918.
  (José Alburquerque)


2.31.16.1: (unstable):

* gmmproc (docs):
  - Add documentation to wrapped signals.
    Bug #668918 (Mark)
  - Convert signal and property names correctly.
    Bug #668918 (Mark)
  - Add some HTML entity conversions.
  - Translate the <itemizedlist> tags in docs correctly.
  (José Alburquerque)

2.31.16: (unstable):

Build:
* Dispatcher: Fix the build on win32.
  (TS)
* thread.h: Move calls to deprecated glib functions into thread.cc.
  (Haikel Guemar)

2.31.2: (unstable):

glibmm:
* Add Glib::Threads::* in threads.h, deprecating everything in thread.h.
  This was necessary because we had to break the ABI to avoid using
  API that is now deprecated in glib.
* Avoid compiler warnings when using -std=c++0x with g++.
  (Murray Cumming, Kjell Ahlsted)

giomm:
* drive: Add get_sort_key().
* EmblemedIcon: Add clear_emblems().
* FileIconL Add the "file" property.
* InetAddress: Add address_equal().
* Mount: Add get_sort_key().
* Socket: Add the "timeout" property.
* SocketAddress: Add the "family" property.
  (José Alburquerque)

gmmproc:
* C example code removal: Also remove code in </programlisting> tags.
 (José Alburquerque)
* Ensure template parameter has a space before to avoid trigraphs.
  (Hub Figuière) Bug #663303

Examples:
* Avoid use of the now-deprecated API.
 (Murray Cummign)

2.31.0.2: (unstable)

* gthread.h: Move the deprecation ifdefs to avoid affecting non-deprecated API.

2.31.0.1: (unstable)

* Avoid deprecation compiler warnings in glibmm and projects using glibmm.
  However, you will need to include either <glibmm.h> or <glibmm/thread.h>
  before other glibmm includes.
  (Murray Cumming)
* Move IOCondition from main.h to iochannel.h.
  (Murray Cumming)
* Don't include <glibmm.h> via init.h or wrap_init.h.
  (Murray Cumming)
* gmmproc:
  - Don't include C code examples found in the XML docs. Bug #650544
  - Don't include <glibmm.h> by default in generated files. Bug #662597
  (José Alburquerque)

2.31.0: (unstable)

Glib:
* Date: set_time(): Use g_date_set_time_t() instead of g_date_set_time().
  (José Alburquerque)
* Thread: Deprecated thread_init(), Thread::joinable(), *_priority(), etc.
  (Murray Cumming)
* (Threads are always enabled in glib now, and thread_init() does nothing.)
* VariantContainerBase: Add create_maybe().
  (José Alburquerque)

Gio:
* DataInputStream: Add read_line_utf8() and read_line_finish_utf8().
  (José Alburquerque)
* DBus::MethodInvocation: Add UnixFDList return_value() method overload.
  (José Alburquerque)
* Re-add Application and related class so they can be finished.
  (José Alburquerque)
* ApplicationCommandLine: Add the get_platform_data() method.
  (José Alburquerque)
* SimpleAction: Wrap the signals and properties.
  (José Alburquerque)

* gmmproc:
  - Fix h2def.py not parsing function starting with G_GNUC_* macros.
  (Krzesimir Nowak) Bug #660225.
  - _WRAP_METHOD: Allow return types to have commas.
  (José Alburquerque) Bug #661401
  - _WRAP_METHOD: Use {OUT} instead of {RET} for output params.
  (José Alburquerque)
  - Remove M4 warnings due to commas in return types.
  (José Alburquerque)

2.30.0: (stable)

giomm:
* DBus::Server: Add constructors.
* Remove Application and friends, because they are still not ready.
  See bug ##637445#c29
  (Murray Cumming)

Documentation:
* gmmproc: DocParser: Correct the removal of link tags.
  (José Alburquerque)

2.29.13: (unstable)

giomm:
* Variant< std::vector<std::string> >: Ensure correct creation.
  (José Alburquerque) Bug #657030 (Aurimas Černius)
gmmproc
* Correct handling of constversion etc. in _WRAP_METHOD, avoiding side-effects
  on other _WRAP_METHOD() calls in the same .hg file.
  (Kjell Ahlstedt) Bug #657751,

2.29.12: (unstable)

2011-08-03  Murray Cumming  <murrayc@murrayc.com>

* Gio::Application:
  - Add back Gio::Application and friends so we can try to finish them.
  - local_command_line_vfunc(): Use references for parameters.
    See bug #643478.
  (Murray Cumming)
* Gio::TimeZoneMonitor: Remove because it was removed in glib.
  (José Alburquerque)
* Build:
configure: Require the latest libsigc++ because our tests require it.
  See https://bugs.launchpad.net/bugs/829596
  (Murray Cumming)


2.29.11: (unstable)

* Gio::AppInfo:
  - launch(): Use a vector instead of a ListHandle and assume that it contains
  Gio::File rather than strings. This was unusable before.
  - Add launch() overload with no launch_context parameter.
  - Add launch() overload taking one file,
  - launch_uri(): Deprecate the method taking a GAppLaunchContext*, adding
    one taking a Gio::AppLaunchContext instead.
  - Add launch_uri() taking one URI.
  (Murray Cumming)
* Add test case for a recent fix in libsigc++ with RefPtr.
  (Kjell Ahlstedt) Bug #564005#c14 (Alexander Shaduri)
* tools: Add python .def generation scripts removed from PyGObject.
  (Murray Cumming)
* gmmproc: Allow _STRUCT_NOT_HIDDEN to be used even when multiple classes
  are defined in one file.
  (José Alburquerque)

2.29.10: (unstable)

* Gio:
- Added DateTime, TimeZone, TimeZoneMonitor.
  (José Alburquerque)

2.28.2: (stable)

* gmmproc:
  - _WRAP_METHOD: Add optional parameter functionality.
  - _WRAP_[CREATE|CTOR|METHOD]: Support parameter reordering.
  - _WRAP_METHOD: Add the possibility of an output parameter.
  (José Alburquerque)
  - Protect documentation with m4 quotes.
  (Kjell Ahlstedt) Bug #603930

Gio:
* DBus::Connection::emit_signal(): Replace empty strings with 0, because
  gio fails with "", apparently unnecessarily.
  (José Alburquerque) Bug #645072 (Yannick Guesnet).

Build:
* Removed now-unused doctooldir variable from pkgconfig files.
  (Kalev Lember) Bug #652461

2.28.1:

gmmproc:
* Extra Defs Tool: Only generate properties that the GType owns.
  (José Alburquerque)
* Put guards around generated includes in wrap_init.cc to fix the wind32 build.
  (Kalev Lember) Bug #649182
* tools/pm/GtkDefs.pm: GtkDefs::split_tokens(): Speed improvement.
  (Kjell Ahlstedt) Bug #644037

Build:
* Update the VS 2005, 2008, and 2010 project files.
  (Fan, Chun-wei)
* Examples build: Use the GLIB_COMPILE_SCHEMAS variable.
  (Volker Grabsch) Bug #648485.
* Gio::DBus::Message: Fixed includes for WIN32
  (Kalev Lember)  Bug #649168

Documentation:
* Added some classes to the DBus documentation group and added class
  overview documentation. (Murray Cumming)

New API in glibmm 2.28:
(There was no stable glibmm 2.26 release)

Glib:
* Variant: A new hierarchy of templated Variant<> types, for use with
  Gio::Settings and Gio::DBus.
  (José Alburquerque, Yannick Guesnet, Murray Cumming)
* OptionGroup:
  - Add add_entry() that takes a slot with callback function.
  - on_post_parse() overrides no longer need to call the base class.
  (Kjell Ahlstedt)
* RefPtr: Make it work with sorted containers.
  (David Kozub)
* Regex: Added and used a MatchInfo class.
  (José Alburquerque)
* General:
  - build_filename(): Add method overloads to take up to 9 arguments,
  for convenience.
  (Fabricio Godoy)
  - Added get_system_data_dirs() and get_system_config_dirs().
  (Murray Cumming)

Gio:
* Proxy, ProxyAddress and ProxyResolver.
  (Murray Cumming)
* Settings: For application settings, replacing GConf (or Gnome::Conf).
  (Jonathon Jongsmam, José Alburquerque, Murray Cumming)
* DBus: API to use or implement D-Bus services.
  (José Alburquerque, Yannick Guesnet, Michael Edwards,
  Martin Braure de Calignon and Murray Cumming.)
* SocketControlMessage, UnixCredentialsMessage and UnixFDMessage.
  (José Alburquerque)
* Added UnixFDList.
  (José Alburquerque)

gmmproc:
* Support for use of std::vector<> instead of ListHandle<>, SListHandle<>,
and ArrayHandle.
(Krzesimir Nowak)

See also this list of new API:
http://developer.gnome.org/glibmm/unstable/since_2_28.html

Gio::DBus, Glib::Variant and Gio::Settings were a huge amount of difficult
work mostly by José Alburquerque, with help from Jonathon Jongsmam,
Yannick Guesnet, Michael Edwards, Martin Braure de Calignon and Murray Cumming.
Some of José Alburquerque's work was funded by Openismus GmbH.
Thank you, everyone.


2.28.0 (stable):

Gio:
* DBus::Connection:
  - Added a register_method() overload with no vtable.
  - register_object(), register_subtree(): Take the VTable by reference,
  not pointer.
  (Murray Cumming)
* DBus::MethodInvocation:
  - get_parameters(): Return a VariantContainerBase instead of taking a
  VariantBase.
  - return_gerror(), return_error_literal(): Rename them both to return_error().
  (Murray Cumming)
* DBus::NodeInfo::lookup_interface(): Add a method overload with no name.
  (Murray Cumming)
* DBus::Proxy: Rename type_map_changed_properties to MapChangeProperties.
  (Murray Cumming)
* DBus::VariantContainerBase::create_tuple(): Add a method overload that takes
  a single VariantBase,
* Settings: Really add list_schemas().
  (Murray Cumming)

2.27.99.2 (unstable):

Glib:
* Variant:
  - Rename get(index) to get_child(index).
 - Variant<std::string>:
   Allow this to be used for object paths and signatures as well as just
   bytestrings.
 - Variant<Glib::ustring>:
   Allow this to be used for bytestrings, object paths and signatures as well as just
   (UTF-8) strings.
 - Move constructor definitions into the .cc file.
 - Capitalize the standard types, such as VARIANT_TYPE_STRING.
 (Murray Cumming)
* ArrayHandle: Make it compilable with MSVC 2005, 2008, 2010.
  (Krzesimir Nowak) Bug #645851 (Fan, Chun-wei)

2.27.99.1 (unstable):

Gio:
* DBus: Use VariantContainerBase for tuple Variants.

2.27.99 (unstable):

This is probably the very last release before 2.28.0 which will happen very soon.

Gio:
* Removed Application, ApplicationCommandLine, and ActionGroup because
  they are unfinished. We hope to add them back in glibmm 3.2.
* Removed SettingsBackend because it is unfinished.
* Settings: Removed API that used SettingsBackend.
* Variant: Improved the documentation.

Build: Remove the dependency on mm-common during the tarball build.

2.27.98 (unstable):

Gio:
* DBus::InterfaceVTable: Make the tuple type clearer in SlotInterfaceMethodCall.

Glib:
* Correct some range checks to use >= instead of just >.
  (Murray Cumming) Thanks to Michael Edwards.
* Vectorutils, ArrayHandle: Check for NULL pointers.
  (Krzesimir Nowak)

2.27.97 (unstable):

Gio:
* DBus::Proxy: Added the properties_changed signal.
  (Yannick Guesnet) Bug #644886
* Variant:
  - Added Variant<VariantBase>::get().
  (Yannick Guesnet) Bug #644207.
  - Added some get() method overloads.
  (Murray Cumming)
  - Added VariantBase::cast_dynamic().
  (Yannick Guesnet) Bug #644146

* Build: Fix the missing doc-install.pl problem.
  mm-common is now needed for tarball builds, though this might change soon.
  (Murray Cumming)

2.27.96 (unstable):

Gio:
* Application:
  - open(): Added a single-file method overload.
  - The command-line signal now returns an int instead of a bool. It is a
  main() status code.
  - Added get_environ().
  - Add the local_command_line vfunc,
* ApplicationCommandLine: Use std::string instead of ustring in some API.
  (Murray Cumming)
* DBus::InterfaceVTable: Use g_error_copy() where appropriate, fixing a crash.
  (Murray Cumming) Bug #644008 (Yannick.Guesnet)

* Build: Do not install doctool/ scripts such as doc-install.pl.
  These are now only installed by mm-common, and the mm-common macros find it
  there, so no changes should be necessary in other modules if you update
  mm-common.
  (Murray Cumming)
* Documentation: Avoid errors in the reference documentation due to encoding
  confusion in our perl scripts.
  (Kjell Ahlstedt) Bug #644037

2.27.95 (unstable):

Gio:
* Throw Gio::Error again, instead of just the base Glib::Error.
  This was broken in glibmm 2.27.94.
  (Murray Cumming)

Glib:
* build_filename(): Add method overloads to take up to 9 arguments,
  for convenience.
  (Fabricio Godoy) Bug #599578
* Documentation: Mark some new API as new in 2.28.
  (Murray Cumming)

2.27.94 (unstable):

Glib:
* OptionGroup:
  - Add add_entry() that takes a slot with callback function.
  (Kjell Ahlstedt) Bug #589197 (Hubert Figuiere)
  - on_post_parse() overrides no longer need to call the base class.
  (Kjell Ahlstedt) Bug #588988 (Hubert Figuiere)
  - Make Glib::{Array,List,SList}Handle work with std::vector<bool>.
  (Krzesimir Nowak) Bug 640079

Gio:
* Moved all DBus* classes into a Gio::DBus namespace.
  (Murray Cumming)

2.27.93 (unstable):

* Added ArrayHandler, ListHandler and SListHandler, to help with conversions
  to/from std::vector.
  These replace ArrayHandle, ListHandle, and SListHandle, which allowed the
  use of any standard container. New APIs will use only std::vector, because
  that is less confusing to developers, though less flexible.
  (Krzesimir Nowak)
* Application: Initialize glibmm and giomm in the constructor, for
  convenience.
  (Murray Cumming)
* Resolver: lookup_service(), lookup_by_address(): Fix the reference counting.
  (Murray Cumming) Bug #639575 (Michael Edwards)
* Fix the build (and of applications) with  GLIB_DISABLE_SINGLE_INCLUDES.
  (Chris Kühl)

2.27.91.1 (unstable):

* gmmproc:
  - _WRAP_CTOR(): Restore the optional extra parameter, because it
  is still needed by gtkmm-2.4.
  (Murray Cumming)
  - Added conversion from bool& to gboolean*.
  (Chris Kühl)

* DBus::[watch|own]_name(): Add default values for parameters.
* DBusConnection:
  - Add a send_message() without an "out_serial" parameter.
  - Avoid errors/exceptions in callbacks due to NULL C strings.
  - Wrap properties and signals.
* DBusMessage: Wrap properties and signals.
* DBusServer: Comment out constructors because of bug #639478.
* InetAddress: Wrap properties.
* Variant: Make the variant_type() functions return actual types.
* Documentation: Started a client/server example that uses the user's bus.

  DBus: Add initial implementation of a bus server/client example.

  * examples/Makefile.am:
  * examples/dbus/busserver.cc: Add a partial implementation of the
  server part of a server/client example that communicate through the
  user's bus.
  * examples/dbus/peer.cc: Typos.

2.27.91 (unstable):

Gio:
* BufferedInputStream, BufferedOutputStream: Fix create_sized().
  (Murray Cumming) Bug #638616 (Michael Edwards)
* DBus: Use std::string for addresses since they could be a file path.
  Use std::string instead of Glib::ustring for address parameters just to avoid
  possible errors since DBus address could be a filename path as the "Addresses"
  section of the DBus introduction seems to imply:
  http://www.freedesktop.org/wiki/IntroductionToDBus.
* DBus: Use std::string instead of Glib::ustring for guid's since std::string's
  API is probably adequate enough for their use.
  (José Alburquerque)
* DBusConnection:
  - call*() methods: Re-order parameters.
  - Callbacks: Check for NULL GError** parameters and throw exceptions to the
  caller.
  - Add [register|unregister]_subtree() methods.
  - Fix crashes caused by inappropriate use of reinterpret_cast<>.
  (José Alburquerque) Bug #637587 (Yannick Guesnet)
* DBusConnectionInvocation: reference-counting fixes.
  (Murray Cumming)
* DBusIntrospection: Fix some reference counting.
* DBusServer:
  - Added create() methods.
  - CCorrect the type of the "active" property.
* SocketService, ThreadedSocketService: Correct ref-counting for signals.
* Improvements to the DBus examples.
  (José Alburquerque)

Tools:
* gmmproc: Warn about unwrapped properties.
  (Krzesimir Nowak)
* Added defs_fixer.pl, which fixes some generated .defs by applying a specified
  override file. This should be easier than using a patch.
  (Krzesimir Nowak)


2.27.5.1: (unstable):

Glib:
* RefPtr: Make it work with sorted containers.
  (David Kozub) Bug #626858
* Variant:
  - Make all the get_iter() methods const.
  - Added dictionary entry and dictionary specializations.
  - VariantContainerBase: Add a create() method from an array of variants.
  - Added tests.
  (José Alburquerque)
* gmmproc cleanup
  (José Alburquerque)

Gio:
* Application: Added the open signal.
  (Yannick Guesnet)
* DBusConnection: Add register/unregister_object() methods.
  (José Alburquerque) Bug #637587 (Yannick Guesnet)


2.27.5: (unstable):

Glib:
* Added Variant<std::string>, Glib::Variant< array >, and
  Variant< vector > specializations

Gio:
* Added DBus client example: examples/dbus/well-known-address-client.cc
  (José Alburquerque)
* Fox the build with mingw32.
  (José Alburquerque) Bug #636754 (t.sailer)


2.27.4.1: (unstable):

Gio:
* DBus[Connection|Proxy]: Don't take extra reference on async creation.
* DBusConnection:
  - Add non-observable create method overloads.
  - Make the create methods.async get methods, static.
  - Added get_sync() methods.
  - Added send_message_with_reply_sync() methods.
  - Added signal_subscribe() and add_filter().
* DBusIntrospection: new_for_xml(): Rename to create_for_xml().
* DBusProxy:
  - Reorder the parameters so that "name" is second in methods.
  - Add a non-cancellable call_sync() method.
* Documentation: Add a DBus Doxygen group.
  (José Alburquerque)

Glib:
* Regex: Add a MatchInfo class and use it.
  (José Alburquerque) Bug #636911 (Alexander Shaduri)
* gmmproc: Remove m4 conversion files for gdk, gtk, atk, and pango.
  They are now in the derived projects, which should now include
  convert_glibmm instead of, for instance, convert_gtkmm.
  Some modules will now need to add a line in their configure.ac so they
  can use the extra conversions from gtkmm. For instance, with
  gtksourceviewmm:
  MM_PKG_CONFIG_SUBST([GMMPROC_EXTRA_M4_DIR], [--variable=gmmprocm4dir gtkmm-3.0])
  (Murray Cumming)

2.27.4: (unstable):

Gio:
* DBus::Address: Wrap the gio dbus address API in this namespace.
* DBusConnection:
  - Add emit_signal().
  - Add call(), call_finish() and call_sync() methods.
* DBusMethodInvocationbusmethodinvocation: Remove the default constructor
  because it probably will not be used (there is no create() method to
  go along with it).
* DbusServer: create_sync(): Use g_dbus_server_new_sync() instead of the
  constructors because the C function does more than call g_initable_new().
  (José Alburquerque)

gmmproc:
* Improve parsing of the C documentation.
  (José Alburquerque)

2.27.3.1: (unstable):

Gio:
* Added ApplicationCommandLine.
* Application
  - Added non-cancellable overload of register_application()
  - Return int value from run() correctly
  - Fix protected constructor signature
  (Jonathon Jongsma)
* DBusConnection, DBusProxy, DBusServer: Add non-cancellable overloads of the
  constructors and create methods.
  Renamed the create() synchronized methods to create_sync().
* Initable: Add a non-cancellable overload of the init() method.
* Documentation: Added lots of class and method documentation.
   (José Alburquerque)


2.27.3: (unstable):

Gio:
* Application: Added open().
* ActionGroup: Added list_actions.
* DataInputStream: Added read_upto(), read_upto_async()
  and read_upto_finish().
  (Murray Cumming)
* DBusConnection: Correct the AsyncInitable inheritance/implementation.
* MemoryOutputStream: Added steal_data(), and a const get_data().
* NetworkService: Added get_scheme(), set_scheme() and the property.
* Socket: Added get_timeout(), set_timeout(),
  receive_with_blocking() and send_with_blocking().
  (José Alburquerque)
* SocketClient:
  * Add get_enable_proxy(), set_enable_proxy(),
  get_timeout(), set_timeout() and add_application_proxy().
  (José Alburquerque)
  * Added connect_to_uri(), connect_to_uri_async()
  and connect_to_uri_finish().
  (Murray Cumming)
* SocketConnectable: socketconnectable Added proxy_enumerate() and a
  const enumerate().
* Added UnixSocketAddress
* UnixCredentialMessage, UnixFDMessage: Wrap properties properly.
  (José Alburquerque)
* giomm.h: Add includes of newly wrapped API.
  (José Alburquerque)

Glib:
* ObjectBase: Fixed compiler errors when the debug warnings are enabled
  at compile time.
  (Krzesimir Nowak)

2.27.2: (unstable):

Gio:

* Added ActionGroup.
* Application: Large API changes to match the changed C API.
* DBusConnection: Reorder the parameters in the
  constructors and create methods so that the DBusConnection flag
  parameter has a default value.
* DBusProxy: Added get_cached_property().
  (José Alburquerque)

Glib:
* Main: Add get_time(), deprecating get_current_time(), though this needs
  more work.
  (Murray Cumming)

2.27.1: (unstable):

Gio:
* AsyncInitable: Add create_finish().
* DBusProxy:
  -  Add call(), call_finish() and call_sync() methods.
  - Add properties and signals.
  (José Alburquerque)
* Variant: create methods: Remove the floating reference of the GVariants,
  correcting our memory management.

Glib:
* Added get_system_data_dirs() and get_system_config_dirs().
  (Murray Cumming)
* Build: Fix a Windows build problem caused by the removal of the optional-API
  ifdefs.
  (José Alburquerque)

2.27.0: (unstable):

* Depend on glib 2.27.x.
* Add Gio:Application.

2.25.5: (unstable):

Gio:
* Removed Application (removed in glib 2.26)
  This is still in the git master versions.
* DBusMessage: Added create_from_blob(), set/get_byte_order(),
  get_header_fields(), bytes_needed(), to_blob(), to_exception(), get_locked(),
  lock() and copy().
* NetworkAddress: Added get_scheme() and property.
* Added Proxy, ProxyAddress and ProxyResolver.
* Settings: Added reset(), list_children(), list_keys().
  (Murray Cumming)
* Added DBusAnnotationInfo, DBusArgInfo, DBusMethodInfo, DBusSignalInfo,
  DBusPropertyInfo, DBusInterfaceInfo, and DBusNodeInfo.
* Added DBusProxy.
* Added DBus::watch() and DBus::unwatch_name().
* Several other DBus* improvements.
  (José Alburquerque)

Glib:
* Variant: Added get_maybe(), get_size(), get_data(), store(), and
  get_n_children().
* Added VariantIter.
  (Murray Cumming)

2.25.4: (unstable):

Gio:
* Added AsyncInitable.
* DBusConnection: Added create() methods.
* UnixConnection: Add receive/send_credentials() methods.
* Added SocketControlMessage, UnixCredentialsMessage and UnixFDMessage.
  (José Alburquerque)

2.25.3: (unstable):

Glib:
* Added VariantBase and Variant<>.
  (José Alburquerque, Murray Cumming)

Gio:
* Added Application, wrapping GApplication
  (Murray Cumming)
* Added Credentials.
  (Murray Cumming)
* Added DBusConnection, DBusMethodInvocation, DBusServer,
  DBusAuthObserver and DBusMessage.
  (José Alburquerque, Murray Cumming, Martin Braure de Calignon)
* Added UnixFDList.
   (José Alburquerque)

Build:
* Fix the build without __STDC_ISO_10646__.
  (Koop Mast)


2.25.2: (unstable):

Gio:
* Settings: create*() methods:
  Use SettingsBackend instead of string context parameters.
  (Murray Cumming)


2.25.1: (unstable):

Glib:

* Removed the --enable-api-exceptions, --enable-api-properties,
  --enable-api-vfuncs and --enable-api-default-signal-handlers options
  because nobody needs them any more.
  The defines are now always defined, for backwards compatiblity.
* Keyfile:
  - Added get_int64, get_uint64, set_int64, set_uint64().
  - Added load_from_dirs().
  (José Alburquerque)
* OptionGroup: Added set_translate_func().
  (José Alburquerque)
* RegEx: Added get_compile_flags(), get_match_flags().
  (José Alburquerque)
* TimeVal: Avoid compiler warning in TimeVal::as_double()
  (Daniel Elstner) Bug #617463 (Alexander Shaduri)
* Added Glib::listenv().
  (Alex Vallée) Bug #578355.

Gio:
* DesktopAppInfo: Added get_filename().
  (José Alburquerque)
* Added Settings, wrapping GSettings.
  (Jonathon Jongsmam, José Alburquerque)

2.24.2 (stable):

* Reference Documentation: Add main page text for index.html.
  (David King, Murray Cumming)

2.24.1:

* UnixOutputStream: Fix the constructor to use the correct property name.
  (Alex Vallee) Bug #615482
* Documentation: Strip out the gobject-introspection annotations, and use
  other improvements made to docextract_to_xml.py
  (José Alburquerque)
* Fix the Windows MSVC build. (Armin Burgmeier)

2.24.0:

* Changes in glibmm 2.24 compared to glibmm 2.22:

Glib:
* BalanceTree: New class, wrapping GTree.
  (Szilárd Pfeiffer, Jonathan Jongsma)
* Fix ustring::format(non-const char*) and add regression test.
  (Debarshi Ray)

Gio:
* Added InetAddress, NetworkAddress, NetworkService, Resolver, Socket,
  SocketAddress, SocketAddressEnumerator, SocketClient, SocketConnectable,
  SocketConnection, SocketListener, SocketService, SrvTarget, TcpConnection,
  Threaded SocketService, UnixConnection
  (Jonanthan Jongsma)
* AsyncResult: Add get_source_object_base(), deprecating get_source_object()
  because it usually can never work.
  (Murray Cumming, Daniel Elstner) Bug #608269 (Michael Hasselmann)
* Cancellable: Added release_fd() and make_polldf().
File:
  - Added has_parent(), supports_thread_contexts(), start_mountable(),
  stop_mountable(), poll_mountable()
  - Aded create_file_readwrite(),  create_file_readwrite_async().
  - Added open_readwrite(), open_readwrite_async(), finish_readwrite(), r
  replace_readwrite(), replace_readwrite_async() and finish_replace_readwrite().
  - unmount_mountable(), eject_mountable(): Add overrides with MountOperation
  parameters.
* ThemedIcon: Added get_names().
  (Murray Cumming)
* NetworkService: Add domain property.
  (Krzesimir Nowak)


2.23.4 (unstable):

Gio:
* File: Add TypeTraits to fix Gtk::FileChooser::get_files() in gtkmm.
  (Jonathan Jongsma) Bug #590940 (Tomasz Jankowski)
* MemoryInputStream: Correct data loss/corruption with binary data.
  (Alexey Kosilin) Bug #609552 (Holger Seelig)
* ThemedIcon: Added get_names().
  (Murray Cumming)

Glib:
* Fix ustring::format(non-const char*) and add regression test.
  (Debarshi Ray)

Build:
* tests: Reorder assignment to LDADD and giomm_ldadd in tests/Makefile.am
  to always use the built library, not the installed one.
  (David King) Bug #610854 (Pacho Ramos)

2.23.3 (unstable):

Gio:
* AsyncResult: Add get_source_object_base(), deprecating get_source_object()
  because it usually can never work.
  (Murray Cumming, Daniel Elstner) Bug #608269 (Michael Hasselmann)
* File: Delete Gio::SlotFileProgress (and friends) at the correct time,
  fixing a crash.
  (Debarshi Ray) Bug #611521.
* IOStream: get_input_stream(), get_output_stream(): Fix reference counting,
  fixing a crash.
  (Murray Cumming) Bug #607554 (michi7x7)
* MemoryInputStream::add_data(): Minor documentation fix.
  (Michael Hasselmann)
* MemoryOutputStream: Fix the constructor, so this really works.
  (Krzysztof Kosiński) Bug #605710

2.23.2 (unstable):

Glib:
* BalanceTree: New class, wrapping GTree.
  (Szilárd Pfeiffer, Jonathan Jongsma)
* NodeTree: get_root() const correction.
  (Alexander Shaduri)

Gio:
* Cancellable: Added release_fd() and make_polldf().
* File:
  - Added has_parent(), supports_thread_contexts(), start_mountable(),
  stop_mountable(), poll_mountable()
  - Aded create_file_readwrite(),  create_file_readwrite_async().
  - Added open_readwrite(), open_readwrite_async(), finish_readwrite(), r
  replace_readwrite(), replace_readwrite_async() and finish_replace_readwrite().
  - unmount_mountable(), eject_mountable(): Add overrides with MountOperation
  parameters.
* NetworkService: Change hostname property to domain.
  (Krzesimir Nowak)
* SocketConnection: Remove graceful-disconnect property.
  (Krzesimir Nowak)
* UnixInputStream: Fix the constructor's implementation.
  Bug #608665 (Matt Marsh)

* Windows: giomm.h: Don't include files on Windows that are not available
  on that platform.
  (Armin Burgmeier)

2.23.1 (unstable):

    This release adds the BalancedTree class (wrapping GTree) and fixes a number
    of bugs, including one where we were accidentally depending on an unreleased
    version of glib.

    Alexander Shaduri (1):
          Bug #594173 - NodeTree::get_root() violates const-correctness

    Daniel Elstner (1):
          Fine-tune Doxygen configuration to improve output

    Jonathon Jongsma (8):
          Add non-cancellable versions of a bunch of SocketClient functions
          wrap g_socket_connection_factory_create_connection()
          A bunch of minor doxygen cleanups around the tree
          Fix up some formatting issues for BalancedTree
          Rename btree.* to balancedtree.*
          Bug #606146 - Relax the glib requirement
          Bug 581811 - Gio::content_type_guess() miss the version with a NULL filename

    Krzesimir Nowak (1):
          Bug #606100 - Fix wrapping properties.

    Szilárd Pfeiffer (3):
          Implement GTree wrapper
          Implemented reference counting for BalancedTree.
          Fixed several bugs of balanced binary tree wrapper.

2.23.0 (unstable):

    This release adds API for the new Network I/O classes that were added in
    glib 2.22.x (e.g. Gio::Socket, Gio::Resolver, etc). Testing of this new API
    would be greatly appreciated. There are a few minor fixes in various other
    areas as well.

    Armin Burgmeier (2):
          Added new files to MSVC projects
          ifdef-out inclusion of files not available on Windows in giomm.h

    Jonathon Jongsma (18):
          Re-enable network IO stuff (GSocket, etc)
          Re-enable network IO stuff (Socket, Resolver, etc)
          Add socket-client example
          Add socket-server example
          Take an extra ref from the return of g_inet_socket_address_get_address
          Fix another bug in resolver example
          Regenerate gio_methods.defs, bump glib requirement
          Re-generate gio_docs.xml
          Wrap Gio::Mount::get_default_location()
          _IGNORE a couple API that we've implemented manually
          Wrap SocketClient, SocketConnection, TcpConnection, UnixConnection
          Wrap SocketListener
          Accidentally marked wrong SocketConnection as non-win32
          Re-generate gio signal defs
          Wrap SocketService
          Wrap ThreadedSocketService
          Wrap missing properties of SocketClient, SocketConnection, SocketListener
          Add some more .gitignore stuff

    José Alburquerque (1):
          Make build successful when exceptions, vfuncs, etc. are disabled.

    Murray Cumming (1):
          Regex: Slight documentation improvement.


2.22.1 (stable):

    This is a quick follow-on release to fix a couple minor issues discovered in
    2.22.0.  The tarball has been re-generated with the latest mm-common to fix
    a devhelp installation issue. There is also a build fix for when building
    with exceptions disabled.

    Daniel Elstner (1):
          Fix KeyFile build with exceptions disabled


2.22.0 (stable):

    This it he first release in the stable 2.22 series.  It is essentially
    equivalent to 2.21.5, but with a few build fixes, etc.

    Daniel Elstner (8):
          Re-enable input file line markers in gmmproc
          Fix broken test for empty _WRAP_METHOD argument
          Allow the C documentation to be overridden
          Slightly clean up gross Perl code in gmmproc.in
          Correctly quote the extracted comment for M4
          Enable verbose output of autoreconf
          Do not complain about missing docs_override.xml
          Support Automake silent rules


2.21.5 (unstable):

    This release is a release candidate for 2.22.0.  As such, some unfinished
    API has been disabled (notably the network IO classes that we were not able
    to finish in time).  Also, a few documentation-related fixes.

    Daniel Elstner (5):
          Remove sigc from the Doxygen excluded symbols
          Sanitize the Glib::Cond usage example
          Officially deprecate GLIBMM_CHECK_PERL macro
          Delete obsolete MAINTAINERS file
          Implement Gio::Socket ctors using Gio::Initable

    Jonathon Jongsma (2):
          Add Network I/O classes to new documentation module
          disable network io stuff.  punt to next release


2.21.4.2 (unstable):

    This release corrects a mistake in the build setup which prevented
    the installation of the gmmproc code generation support files.

    Daniel Elstner (1):
          Always build tools/ subdirectory (bgo #593518, Vincent Untz)

2.21.4.1 (unstable):

    Daniel Elstner (4):
          Reenable hierarchy graphs for each class
          Remove header and footer HTML fragments
          Use shared mm-common Doxygen style sheet

2.21.4 (unstable):

    Daniel Elstner (59):
          Transition to new mm-common build infrastructure

    José Alburquerque (1):
          Correct the if condition in Gio::MemoryInputStream::add_data().


2.21.3 (unstable):

    David King (1):
          Only compile the properties example if properties are enabled.

    Jonathon Jongsma (10):
          fix release target to use correct tagging scheme
          Bug 587173 - Fails to install when bootstrapped with Automake 1.11
          add _IGNORE() for a eject_with_operation() which is hand-written
          add get_start_stop_type() and Gio::DriveStartStopType enum
          add overloads for resolver methods without a cancellable object
          add async versions of Resolver methods
          Added a simple example showing how to resolve an internet address from a hostname
          Fix MemoryInputStream::addData (Bug #589683)
          Fix a build error in MemoryInputStream
          Add Glib::ObjectBase::freeze_notify()/thaw_notify.  Fixes Bug #575533

    José Alburquerque (1):
          Repair Glib::KeyFile docs with regard to exceptions. Bug# 587766.

    Krzesimir Nowak (1):
          Wrapped several ISO 8601 related functions.

    Murray Cumming (1):
          Corrected the ChangeLog to mention changes that I accidentally committed in last month, but which I did want to commit some time.

2.21.2 (unstable):

Glib:
    Daniel Elstner (1):
          Treat empty Glib::spawn*() working dir as unset

    Jonathon Jongsma (1):
          Add OptionGroup::add_entry(.., double&)

Gio:
    Daniel Elstner (1):
          Remove stray semicolons

    Jonathon Jongsma (9):
          Fix build with glib from master
          wrap a couple added GDrive methods
          Wrap g_drive_eject_with_operation() and related functions
          implement GDrive::stop-button signal
          implement Gio::InetAddress::get_native_size()
          Implement Gio::Mount::mount/eject_with_operation()
          implement Gio::Volume::eject_with_operation()
          fix accidental bug in Gio::Drive::eject() that the compiler warned me about
          implement Gio::VolumeMonitor::drive-stop-button

2.21.1 (unstable):

Glib:
* Date: Constructor: Check for invalid dates.
  (José Alburquerque)
* Added Glib::ValueArray, for use in gstreamermm.
  (José Alburquerque)
* Added Glib::file_set_contents().
  (Jonathon Jongsma)
* gmmproc:
  - Avoid problems with spaces in _DEFS() calls.
  (Hubert Figuiere) Bug #586785.
  - Improve guessing of the *_get_type() function names from enum names.
  (José Alburquerque) Bug #575870.

Gio:
* Cancellable: Added connect() and disconnect().
* Added FileIOStream.
* Added InetAddress.
* Added Initable.
* Added IOStream.
* Added NetworkAddress.
* Added NetworkService.
* Added Resolver
* Added Socket.
* Added SocketAddress.
* Added SocketConnectable.
* Added SrvTarget.
  (Jonathon Jongsma)
* File::load_contents() Added overload without the etag_out parameter.
  (Hubert Figuiere) Bug #581349.

Windows Build:
* General Windows fixes.
* Fix the build directly from git.
(Armin Burgmeier)

2.20.0 (stable):

* Documentation fixes (Daniel Elstner)

2.19.8 (unstable):
(2.19.4 to 2.19.8 were skipped)

* Added FILE_CREATE_REPLACE_DESTINATION enum value.
* Added Error::TOO_MANY_OPEN_FILES error code.
* Fix some compiler warnings about extra ;s.
  (Murray Cumming)

2.19.3 (unstable):

* New API:
  * BufferedInputStream: buffer_size property
  * BufferedOutputStream: buffer_size, auto_grow properties
  * DataInputStream: byte_order, newline_type properties
  * DataOutputStream: byte_order property
  * FilterInputStream: close_base_stream property, get/set_close_base_stream()
  * FilterOutputStream: close_base_stream property, get/set_close_base_stream()
  * UnixInputStream: fd and close_fd properties, get_fd(), get/set_close_fd()
  * UnixOutputStream: fd and close_fd properties, get_fd(), get/set_close_fd()
* Make licenses consistent with eachother (library gpl vs. lesser gpl, etc)
  (Deng Xiyue)
* Fixed some problems when building with exceptions disabled (Murray Cumming)
* Build fixes (Theppitak Karoonboonyanan)

2.19.2 (unstable):

* File: Added make_directory_with_parents() method overload with no parameter.
  Bug #566003 (Philip Belemezov).
* NoteTree: Do not use a non-ASCII dash character in a comment, to
  avoid the MSVC++ warning C4819 with Visual Studio 2008.
  (Tao Wang) Bug #568072
* spawn_*() functions: Added alternative API for when
  GLIBMM_EXCEPTIONS_ENABLED is not enabled. (Murray Cumming)
  Bug #565487 (Jonathon Jongsma)
* uri_*() functions: Fix memory leak.
  (Jonathan Jongsma) Bug #566845 (Jason Kasper)
* ustring: Add an overload which takes only a format string and no arguments
  to be substituted. (Daniel Elstner) Bug #506394.

2.19.1 (unstable):

 * Fix accidental ABI breakage in 2.19.0 caused by adding default handlers for
   new Gio::Drive signals

2.19.0 (unstable):

 * wrapped new glib 2.19.x API
   * Gio::AppInfo: get_commandline(), can_delete(), do_delete(),
     reset_type_associations(), launch_default_for_uri()
   * Gio::Drive: new signals changed, disconnected, and eject_button
   * Gio::Icon: create(std::string), to_string()(),
   * Gio::Mount: guess_content_type_sync(), is_shadowed(), shadow(), unshadow()
   * Gio::content_type_from_mine_type();
   * Gio::DesktopAppInfo: create_from_keyfile()
   * Gio::Emblem: new class
   * Gio::EmblemedIcon: new class
   * Gio::MemoryOutputStream: new class
 * Bugs Fixed:
   * 555743 - warning in glibmm
   * 562716 - warning fixing cause more warnings.
   * 396963 - Add Glib::signal_idle().connect_once()
 * Thanks to contributions from Przemysław Grzegorczyk, Dave Foster, Hubert
   Figuiere, and Jonathon Jongsma for changes in this release

2.18.1 (stable):

 * Many windows build improvements
 * Bugs fixed:
   * 506410 - Call of overloaded Stringify is ambiguous
   * 529496 - Gio::Error::HOST_NOT_FOUND clashes with a netdb.h #define
   * 539891 - Can't use doxygen commands in *_override.xml
   * 555576 - name clash in fileinfo.h with winbase.h from VS2005
   * 556315 - Extra defs generation utility forgets to generate signals for inter...
   * 556387 - FileEnumerator::next_file reference counting problems
 * Thanks to contributions from Armin Burgmeier, Jonathon Jongsma, José
   Alburquerque, Murray Cumming, and Szilárd Pfeiffer

2.18.0 (stable):

 * Bug #550789: Fixed a licensing issue with some of the tools distributed with
   the source tarball (Murray Cumming)

2.17.3 (unstable):

 * More Glib::NodeTree improvements (Szilárd Pfeiffer, Murray Cumming)
 * Windows build fixes (Armin Burgmeier)

2.17.2 (unstable):

 * Changes to API that was added in this unstable series:
   * Glib::Tree (wrapper around GNode) renamed to Glib::NodeTree  to avoid
     confusion with GTree
   * pass the node to the traversal the callback (Szilárd Pfeiffer)
   * Move TraverseFlags inside the NodeTree class (Murray Cumming)
 * New API:
   * Added the drive_eject_button signal (Murray Cumming)
 * Bug Fixes:
   * #423990: glibmm et al don't recognize new GNU m4 (Damien Carbery)
   * #529496: Gio::Error::HOST_NOT_FOUND clashes with a netdb.h #define (Murray
     Cumming)
   * #523043: Initialization of Glib::ObjectBase for derived types should be
     mentioned in documentation (Moritz Ulrich)
   * #506410: Call of overloaded Stringify is ambiguous (Szilárd Pfeiffer,
     Murray Cumming)

2.17.1 (unstable):

  * New API: (Murray Cumming)
    * Gio::File: make_directory_with_parents(), query_file_type(), monitor().
    * Gio::FileEnumerator: get_container().
    * Gio::Mount: guess_content_type() and guess_content_type_finish().
    * Gio:ThemedIcon: prepend_name().
    * Gio::Volume: get_activation_root().
  * Bug Fixes:
    * #512348: provide documentation about threadsafety of
      Glib::Thread::create() when the slot object is of type sigc::trackable (Chris Vine)
    * #538803: minor fixes to Glib::Tree (Levi Bard)
    * #540656: Pass NULL in a couple functions instead of an empty string allow
      files to be overwritten (Armin Burgmeier)
    * #540875: add documentation for Glib::OwnershipType (Johannes Schmid)
    * #542929: Fix some compiler warnings (Benjamin Herr)
    * Fix AppLaunchContext::get_display(),
      AppLaunchContext::get_startup_notify_id() to use a list of Gio::File, not
      filepath string.  properly documented we know that this is correct. It's an
      API break but this function could nothave worked before. (Murray)
    * Bug #543292: Fix visual studio project file (Jens Georg)
  * Added Keyfile example (Murray Cumming)

2.17.0 (unstable):

  * Added copy constructor and assignment operator, made GDate constructor visible (José
    Alburquerque)
  * Added Glib::Tree, a wrapper for GNode, providing an N-ary tree container, more or
    less like a standard C++ container (Levi Bard)
  * Bug #529648 - give helpful warning message when library user forgets to initialize the
    library (Jonathon Jongsma)
  * Bug #529533 - Fix bug that prevented for Gio::Mount, Gio::Drive, and Gio::Volume from
    being wrapped for some backend implementations (Jonathon Jongsma)

2.16.2 (stable):

 * Bug 526831 – G_OPTION_REMAINING no longer works with OptionEntry (Murray
   Cumming)
 * Bug 527687 – ustring::erase(iterator) incorrect for non ascii character
   (Murray Cumming)
 * add API documentation for spawn_* functions (Murray Cumming)
 * fix possible memory leak in OptionEntr (Murray Cumming)

2.16.1 (stable):

* Reference-counting bugfix in Gio::File::create() and Gio::File::replace()
  (Murray Cumming)
* Include Gio::Error header in headers that have API that can throw this
  exception (Murray Cumming)
* Improve documentation (Murray Cumming)
* Build fixes for giomm on win32 (Jonathon Jongsma)
* fix warning with g++ 4.3 (Tim Retout)

2.16.0 (stable):

Changes compared to glibmm 2.14:

* New Gio API. Check for giomm-2.4 with pkg-config to use this.
  (Marko Anastasov, Jonathon Jongsma, José Alburquerque, Murray Cumming)
* New Glib::Checksum class.
  (Naveen Verma, Murray Cumming)
* New uri helper functions: uri_unescape_string(), uri_parse_scheme(),
  uri_escape_string().
  (Murray Cumming)

2.15.8 (unstable):

* File: load_contents(), load_contents_finish(),  load_partial_contents_finish():
  Use char*& instead of char** for contents.
  Use std::string& instead of char**  for etag_out.
  Added method overloads without cancellable.
  (Murray Cumming)
* Improved documentation: Mention exceptions instead of errors.

2.15.7 (unstable):

* File:
  - Added query_filesystem_info_async() and
  query_filesystem_info_finish() because these were added to the C API.
  (Murray Cumming)
  - Renamed contains_file() to file_has_prefix() because this was changed in the
  C API.
  (Wouter Bolsterlee)
* ThemedIcon: Added append_name() because this was added to the C API.
  (Murray Cumming)

Glib:
* Renamed uri_get_scheme() to uri_parse_scheme() because this was changed
  in the C API.
  (Wouter Bolsterlee)

Documentation:
* Corrections to the .devhelp file generation.
  (Jonathon Jongsma. Bug #518673)


2.15.6 (unstable):

Gio:
* Removed most vfuncs, because they are not useful to application developers,
  and are a likely source of errors. (Murray Cumming)
* DesktopAppInfo:
  - Added Added create(), create_from_file(),
    is_hidden() and set_desktop_env()
    Renamed new_from_file() to create_from_file().
    (José Alburquerque)
* File: equal(), get_relative_file(), contains_file(): Take const File
  parameters.
* FileAttributeInfoList: Added dup().
* MemoryInputStream: Added add_data(const void* data, gssize len).
* Mount: Really added signals.
* MountOperation: Wrapped the ask-question signal.
  (Murray Cumming)
* Volume:
  - Added should_automount().
    (Marko Anastasov)
  - Really added signals.
    (Murray Cumming)
* UnixOutputStream, DataOutputStream, DataInputStream: Made constructors
  protected.
  (Marko Anastasov)


Documentation:
* Install a devhelp file like the existing gtkmm one.
  (Jonathon Jongsma)

2.15.5 (unstable)

Gio:
* File, Mount, Volume:
  Updated for latest gio API changes, adding a MountFlags parameter to some
  methods.
  (Jonathon Jongsma)
* Volume, VolumeMonitor, Added some vfuncs, though we might remove these
  later as they seem useless and likely to be sources of problems.
  (Murray Cumming)

Glib:
* Actually install gi18n-lib.h
  (Takao Fujiwara. Bug #515133)

2.15.4 (unstable):

Glib:

* AppInfo: Added  vfuncs.
  (Jonathon Jongsma)
* Added BufferedOutputStream, DataInputStream and DataOutputStream, and
  FilterOutputStream.
  (Jonathon Jongsma)
* Cancellable: Added the signal.
  (Murray Cumming)
* Added ContentType functions.
  (Jonathon Jongsma)
* File:
  - Added overloads of create_file(), remove(), trash(),
    make_directory(), make_symbolic_link(), query_settable_attributes(),
    query_writable_namespaces(), query_filesystem_info(),
    query_default_handler() and mount_mountable(() without cancellable
    parameters.
    (Murray Cumming)
  - Added copy_attributes(), added mount_enclosing_volume(),
    mount_enclosing_volume_finish(), find_enclosing_mount(), and
    find_enclosing_mount_finish().
    (Murray Cumming)
  - set_attributes_from_info(): Reordered parameters so we can have default
    values.
    (Murray Cumming)
  - Added copy_async(), with overloads without slot_progress. copy_finish(),
    query_default_handler().
    (Marko Anastasov)
  - find_enclosing_mount(), append_to(): Reordered parameters and added
    overloads without cancellable.
    (Murray Cumming)
  - Added non-cancellable set_attribute_string(), set_attribute_byte_string(),
    set_attribute_{uint32, int32, uint64, int64}.
    (José Alburquerque)
* Added FilenameCompleter.
  (Murray Cumming)
* LoadableIcon:
  - Derive from Icon, and no longer derive FileIcon from Icon directly.
  (Murray Cumming)
  - Wrapped some vfuncs and some extra methods.
  (Jonathon Jongsma)
* Added MemoryInputStream.
  (Jonathon Jongsma)
* Added ThemedIcon
  (Murray Cumming)
* Added UnixInputStream, UnixOutputStream, and DesktopAppInfo, available only
  on Unix/Linux.
  (José Alburquerque, Murray Cumming)
* Volume: Added get_mount(), get_identifier(), enumerate_identifiers().
  (Marko Anastasov)
* VolumeMonitor: Added signals and properties.
  (Murray Cumming)

Build:
* Use local gmmproc files again, instead of only installed ones.
  (Murray Cumming)
* Fix compile with GCC 4.3.
  (Kjartan Maraas)


2.15.3 (unstable):

Gio:
* FilterInputStream: Really wrap this.
* VolumeMonitor: Workaround a crash in gio due to the
  eccentric use of the GType system to discover GVolumeMonitor
  implementations. See gio bug #511814.
* Added Gio::Error exception.
* Added more method overloads without optional parameters, and
  reordered more parameters to allow default values.
  (Murray Cumming)
* giomm.h: Added includes.
  (Jonathan Jongsma)

* Note that there are some examples in the gtkmm-documentation module.


2.15.2 (unstable):

Glib:

* Checksum: New class, wrapping GChecksum.
  (Naveen Verma. Bug #510235)
* ObjectBase: Added connect_property_changed_with_return()
  because connect_property_changed() does not return a sigc::connection.
  Bug #433984 (Philip Langdale, Kalle Vahlman).
* enums.pl .defs generator: Handle parantheses.
  (Marko Anastasov. Bug #498621)

Gio:
* Added FilterInputStream, Mount, FileMonitor, VolumeMonitor.
  (Marko Anastasov, Murray Cumming)
* Many methods' parameters have been reordered so we can
  add default parameter values.
* Many methods now have overloads with less parameters.
  (Murray Cumming, José Alburquerque, Marko Anastasov)


2.15.1 (unstable):

Gio:
* Actually build the giomm library.
* Added API reference documentation.
  (Murray Cumming)
* Added AppInfo and AppLaunchContext.
* Drive:
  - Added poll_for_media() and poll_for_media_finish().
  - Added capability-checking functions.
  (Marko Anastasov)
* File: Renamed create() to create_file(),
  create_async() to create_file_async() and
  create_finish() to create_file_finish() to slightly
  reduce confusion with the static create*() methods.
* FileInputStream, FileOutputStream: Derive from Seekable.
  (Murray Cumming)
* FileInputStream, InputStream, Volume: Modified *_finish
  functions to take a const AsyncResult.
  (Marko Anastasov)
* Added LoadableIcon.
  (Murray Cumming)
* MountOperation: Added MountOperationResult enumeration and make
  reply() take this instead of a bool.
  (Jonathon Jongsma)

  (Murray Cumming)

Glib:
* Added uri_unescape_string(), uri_get_scheme() and uri_escape_string().
  (Murray Cumming


2.15.0 (unstable):

* New giomm library (check for giomm-2.4 with pkg-config)
  in the glibmm tarball. This wraps the new gio API in glib 2.15/16.
  However, this API could change considerably before the stable
  glibmm 2.16 is released.
  (Marko Anastasov)
* ustring:
  - Added compose() to substitute placeholders in a format string, as an
  equivalent to sprintf(), to help internationalization/translation.
  - Added format() to simplify the common task of converting a value
  (such as a number) to a string, with optional stream formatting
  parmatters. This uses the regular C++ stream API in its implementation.
  (Daniel Elstner, Openismus)
* Glib::RefPtr: Deprecate clear(), replacing it with
  reset(), because people often do treemodel.clear() when they
  mean treemodel->clear(). reset() is consistent with std::auto_ptr<>.
  But the method is still there so the compiler still can't help
  you to avoid the mistake.
  (Murray Cumming)
* KeyFile: set_integer_list(),  set_boolean_list(), set_double_list()
  actually work now without crashing.
  (Daniel Elstner, Openismus)
* gmmproc:
  - Refuse to generate a wrapper for a construct-only
  property which is also write-only, and display a warning.
  (Daniel Elstner, bug #436789)
  - Added _DERIVES_INITIALLY_UNOWNED to sink floating
  references in constructor of classes that wrap
  GInitiallyUnowned-derived GTypes. Plus _INITIALLY_UNOWNED_SINK
  for hand-written constructors.
  (Murray Cumming)
* Build:
- Fix build for glib 2.15 by including
  gtestutils.h instead of gmessages.h to get g_assert(),
  though I am angry that this API break has been allowed.
  (Murray Cumming)
- Fix build for pre-releases of gcc 4.3 - also an include
  issue. (Sebastien Bacher, #498438)

2.14.2:

* Build: Hopefully fix the build on NetBSD-4.99.6/amd64.
  Bug #386990. (was already in 2.12.7) (Murray Cumming)
* gmmproc: Added support for the new _CONFIGINCLUDE() macro.
  (Armin Burgmeier)

2.14.1:

* Glib::wrap(): Don't fail when wrapping an interface that
  is implemented by an unrecognized type.
  gmmproc-generated code now uses the new wrap_auto_interface(),
  so newly-generated source code will require this latest glibmm
  version.
* Increase version number check for glib.
  (Rémi Cardona)

2.14:

Changes sinze 2.12:

* New Regex class, allowing string searching with regular expressions.
  (Murray Cumming, Daniel Elstner)
* New KeyFile class.
  (Rob Page, Jonathan Jongsma, Murray Cumming)
* Main: Added SignalTimeout::connect_seconds().
  (Murray Cumming)
* OptionContext: Added get/set_summary(), get/set_description(),
  set_translation_domain() and set_translate_func().
  (Jonathan Jongsma)
* Added Glib::get_user_special_dir(), get_user_data_dir(),
  get_user_config_dir(), and get_user_cache_dir().
  (Jonathan Jongsma, Murray Cumming)
* Improved documentation.
  (Johannes Schmid, Jonathan Jongsma, Ralf Stephan)

2.14.0:

* Regex:
  - Add escape_string().
  - match_full(): Rename to match().
  - match_all_full(): Rename to match_all().
  - split_full(): Rename to split().

2.13.9:

* KeyFile: Added Added get_double(), set_double(), get_double_list()
  and set_double_list().
  (Murray Cumming)

2.13.8:

* OptionContext: Added get/set_summary(), get/set_description(), set_translation_domain(),
  and set_translate_func().
  (Jonathon Jongsma)
* Documenation:
  Added RegEx class documentation. (Johannes Schmid)
  Show new API in 2.14.

2.13.7:

* Regex: Added a create() method and added default parameter values.
  Added a simple example.
* Added  SignalTimeout::connect_seconds(), in addition to the existing
  SignalTimeout::connect(), as a wrapper of g_timeout_add_seconds().
  Improveed the documentation.
* Added get_user_special_dir().
  (Murray Cumming)

2.13.6:

* Added Glib::Regex, an API for doing regular expression search/matching.
  This is not fully wrapped yet, but the simple versions of the API are there.
  We need to write an example for this.
  (Murray Cumming)

2.13.5:

* Correctly ifdef-out initialization of deprecated classes.
  (Johannes Schmid, Openismus)
* Build: Cope with newer m4 versions. (Yselkowitz)

2.13.4:

* Correct initialization when using --disable-deprecated for reduced code-size
  on embedded devices. (Johannes Schmid, Openismus)
* Glib::ObjectBase::is_derived_() is now public, though it is still only for
  internal use. This allows us to do some optimization of default signal handlers and
  vfuncs.
  (Armin Burgmeier, Openismus)
* Options: Don't overwrite default arguments. This change was lost in
  March 2006, but now it is back.
  (Armin Burgmeier)
* Dispatcher: Several minor implementation improvements. (Daniel Elstner)
* ustring: Minor improvements. (Daniel Elstner)
* Documentation: Actually use the signals documentation again.
  (Armin Burgmeier, Openismus)
* Build:
  - Fix code generation when using the latest m4, and functions named
  mkstemp, as experienced on Ubuntu Feisty.
  Bug #397167 (Dodji Seketeli, Daniel Elstner)
  - helperlist.h: Avoid warnings about a shadowed member.
  Bug #420316 from Bradley Bell.
  - utility.h: Avoid a warning about a redundant declaration.
  Bug #420339 from Bradley Bell.

2.13.3:


* Glib::ObjectBase::is_derived_() is now public, though it is still only for
  internal use. This allows us to do some optimization of default signal handlers and
  vfuncs.
  (Armin Burgmeier, Openismus)
* Build:
  - helperlist.h: Avoid warnings about a shadowed member.
  Bug #420316 from Bradley Bell.
  - utility.h: Avoid a warning about a redundant declaration.
  Bug #420339 from Bradley Bell.
* gmmproc improvements:
  - gmmproc: Allow () in property and signal docuemntation.
  - gmmproc: Do not try to remove a common prefix from the
  C enam values, if there is no common prefix.
  - enum.pl: Allow whitespace in front of an enum typedef.
  (Daniel Elstner)
  - enum.pl: Fix an infinite loop.
* ObjectBase: Added connect_property_changed(),
  as an alternative to use when the property proxies are not
  available because GLIBMM_PROPERTIES_ENABLED is not defined.
  (Murray Cumming)
* Value: When registering float parameters, use
  G_MAXFLOAT as the minimum, instead of G_MINFLOAT.
  Likewise for doubles.
  (Oliver Nittka)

2.13.2:

*Build:
 - Fix for api-default-signal-handlers option.
   Bug #357830 (Matt Hoosier)
 - win32: Remove unused source file from Visual Studio project.
   (Cedric Gustin)

2.13.1:

* KeyFile class added, wrapping GKeyFile,
  for parsing of .ini-style files.
  (Rob Page)
* Added get_user_data_dir(), get_user_config_dir(), and
  get_user_cache_dir().
  (Jonathon Jongsma)
* Support optional ifdef parameters in the .hg macros,
  to allow, for instance the --enable-atk=no option,
  to disable the build and use of the atkmm API,
  for use in embedded environments.
  (Johannes Schimd, Murray Cuming, Openismus)
* Documentation:
  - Small ustring reference documentation improvement.
  (Ralf Stephan)

2.12.0:

Changes sinze 2.10:
* Added the --enable-api-default-signal-handlers option, for use in
  embedded environments that have reduced resources. See configure --help
  for the other subsets.
* Value: Added init(const GValue*), so we can copy GValue instances
  of any type at runtime. Needed by the new branch of libgdamm.

2.11.3:

* Build: Added the --enable-api-default-signal-handlers option, for use in
  embedded environments that have reduced resources. See configure --help
  for the other subsets.

2.11.2:

* Date: Fix implementation of Glib::Date::set_time_current() so
  that it doesn't set the date to Dec 31, 1969.
  (Jonathon Jongsma)
* Value: Added init(const GValue*), so we can copy GValue instances
  of any type at runtime. Needed by the new branch of libgdamm.
  (Murray Cumming)
* Added a #warning to warn about including X11/Xlib.h before a glibmm header,
  which would break things. Bug #316726 from Mert Tugcu and Javeed Shaikh.
  (Murray Cumming)
* Build:
  - Quote some m4 macros to avoid warnings. Bugs (with patches) #347076
  and #347077
  (Kevin McBride).
  - Fix exporting of get/set_property() on mingw32-gcc.
  (Cedric Gustin)




2.10.1

* Windows Build:
 - Define GLIBMM_DLL when building with mingw32 or cygwin,
   because it is needed by gtkmm. Bug #309030
 (Cedric Gustin)
* OptionGroup: Allow default values, by not initializing them all.
  (Armin Burgmeier)
* Slight code size reduction by marking private functions as static.
  (Murray Cumming)

2.10.0:

* Windows Build:
 - ustring.h: Tag npos with GLIBMM_API, in order to
   dllexport it on win32. Bug #332438.
 - Updated MSVC++ build files and README, for MS Visual Studio 2005.
 (Cedric Gustin)
* gmmproc code generator:
 - WRAP_METHOD() Take an extra optional argument: deprecated deprecationtext -
  so that we can insert the appropriate doxygen tag in the documentation, where
  the C documentation does not do it for us.

2.9.1:

* Date:
  - Added set_time(time_t), set_time(GTimeVal), and deprecated
    set_time(GTime)
  - Added set_time_current().
  (Murray Cumming)
* Build: Added --enable-deprecated-api  option. When set to disabled,
  it does not build deprecated API. This reduces the size of the
  library, and might be useful for embedded devices.
  (Murray Cumming)

2.8.2:

* Solaris build fix: Correct the detection
  of make. (Mark Rouchal)

2.8.1:

* Build: Check for glib 2.8.

2.8.0:

API additions since glibmm 2.6:

* GModule: Add BIND_LOCAL enum value.
  (Bug #172748 from Phillip Neiswanger).
* MainContext Added signal_child_watch()
  and examples/child_watch.
  (Yair Hershkovitz)
* OptionEntry: Added FLAG_NO_ARG, FLAG_FILENAME,
  FLAG_OPTIONAL_ARG, and FLAG_NOALIAS enum values.
  (Murray Cumming)

2.7.3:

* Updated reference documentation from glib documentation.

2.7.2:

* OptionEntry: Added FLAG_NO_ARG, FLAG_FILENAME,
  FLAG_OPTIONAL_ARG, and FLAG_NOALIAS enum values.
* build_filename() and build_path(): Now use the implementation
  from glib.

2.7.1:

* GModule: Add BIND_LOCAL enum value.
  (Bug #172748 from Phillip Neiswanger).
* MainContext Added signal_child_watch()
  and examples/child_watch.
  (Yair Hershkovitz)
* Fixes from 2.6.2.

2.6.1:

* Interface::add_interface(): Disabled the check for a second call,
  introduced in 2.6.0, for now, because it stops some valid uses.
  (Bryan Forbes)

2.6.0:

New stable version. Changes compare to glibmm 2.4.x:

* Added Option, OptionContext, OptionGroup for parsing of command-line arguments.
* Added filename_display_basename() and filename_display_name().
* Added setenv() and unsetenv().
* add_interface() methods will no longer give warnings if you
  call them twice.
* gmmproc:
  - Now reuses C properties documentation.

2.5.6:

* add_interface() methods will no longer give warnings if you
call them twice.
* gmmproc: Output properties documentation taken from the .defs.
* examples now build on AIX.
  (Murray Cumming)
* MSVC++ .Net 2003 build fix. (Cedric Gustin)

2.5.5:

* Now builds with the following compilers, in addition to
the existing GNU g++, and Intel compilers:
- SUN Forte CC 5.5
- IBM AIX xlC v7
- Tru64 C++ V6.5-042
- IRIX MIPSpro 7.4.2m
  (Older versions of all these compilers might also work.)
  (Murray Cumming, www.thewrittenword.com)
* Now builds with MSVC++ .Net 2003 (gtkmm 2.4 already did).
  (Cedric Gustin)

2.5.4:

Options:
* Added Option(GOptionGroup* cast_item) constructor,
  needed by Gtk::Main.
* Added reference documentation.
(Murray Cumming)

2.5.3:

* Options:
  - Allow parsing of boolean arguments (arguments with no value).
  - Really use the short names.
  (Daniel Holbach, Murray Cumming)
* Added filename_display_basename() and filename_display_name().
  (Murray Cumming)
* Added setenv() and unsetenv(). (Murray Cumming)
* Use static keyword to prevent exporting private API.
  (Benoît Dejean)
* input example: Improvements and simplification. (Chris Vine)

2.5.2:

* OptionEntry: Remove useless enum. (Murray Cumming)
* Documentation:
  - examples: Added iochannel_stream example. (Chris Vine)
  - reference: Generate more reference API from the C documentation, and
    try to use the libstdc++ doxygen tags file to link to their
    documentation. (Murray Cumming)

2.5.1:

* OptionContext, OptionGroup, OptionEntry: Made the add_entry() methods
  type-safe and fixed several problems memory-management problems. This
  API is now worth looking at.

2.5.0:

* Added OptionContext, OptionGroup, and OptionEntry classes, for
  parsing of command-line options. See examples/options/

2.4.4:

* Signals: Avoid crashes when disconnecting a signal when handling that signal.
  (Murray Cumming, Martin Schulze)
*
2.4.3:

* Minor improvements to reference documentation. (Daniel Elstner)
* Minor Glib::Dispatcher improvements (Daniel Elstner)

2.4.2:

* Glib::Dispatcher: win32 implementation rewritten, and hopefully, improved.
  (Daniel Elstner)
* Glib::ustring:
  - Optimization and code-cleanup. (Daniel Elstner)
  - Added reference documentation for constuctors. (Murray Cumming)
* Fixed some compiler warnings.
  (Daniel Elstner)
* gmmproc: Some improvements for libgdamm. (Murray Cumming)


2.4.1:

* Build fixes for gcc 3.4.0.
* Doxygen not required when building from tarballs.
  (Murray Cumming)


2.4.0:

Changes since 2.2.0:

* Now separate from gtkmm, so you can use things like Glib::ustring without depending on gtkmm. This glibmm 2.4 API installs in parallel with gtkmm 2.0/2.2, so you can install applications which use either.
* When using pkg-config, you should check for "glibmm-2.4".
* Glib::ObjectBase inherits virtually from SigC::Object, allowing multiple inheritance with other classes that inherit from SigC::Object.
* RefPtr:
  - is_null() was removed, to encourage you to use "== 0" instead.
  - operator=(CppObject*) was removed.
* The gtkmmproc code-generator is now gmmproc, and has several improvements to support gtkmm 2.4.
* Now uses improved libsigc++ 2.0 API.
* Added i18n.h and i18n-lib.h, which include the relevant
  glib headers, which declare internationalization
  macros such as _().
* New methods:
  Glib::spawn_close_id(), Glib::MainLoop::depth(),
  Glib::Date::clamp_min(),  Glib::Date::clamp_max().
* Improved documentation.


2.3.8:

* Fix crash when using Glib::Main signals.
  (Martin Schulze)
* Corrected the configure-time SUN compiler check.
  (Murray Cumming, Alexander Nedotsukov)

2.3.7:

* Added configure macros to detect SUN compiler oddities.
* Various SUN Forte C+ and g++ 3.4 (cvs) build fixes.
  (Murray Cumming)
* gmmproc: Improved parsing of C docs.
  (Hagen Moebius)

2.3.6:

* Added i18n.h and i18n-lib.h, which include the relevant
  glib headers, which declare internationalization
  macros such as _(). (Murray Cumming)
* Added Glib::spawn_close_id(). (Murray Cumming)
* Added Glib::MainLoop::depth(). (Murray Cumming)
* Documentation: corrections to CHANGES (Martin Schulze).
* gmmproc: Can now handle "const const_iterator& iter"
  parameter names without getting confused by 2 consts.
  (Murray Cumming)

2.3.5:

* glibmm now uses libsigc++ 2 rather than libsigc++ 1.2.

2.3.4:

* ListHandle/SListHandle (intermediate container types):
  - Added a const_cast<> to allow lists of const elements.
* gmmproc: _WRAP_SIGNAL(): Added optional custom_c_callback
  parameter.
  (Murray Cumming)
* WIN32: Build fixes, mostly merged from the 2.2 branch.
  (Cedric Gustin)

2.3.3:

* gmmproc (code generator)
  - properties: Make read-only properties have const accessors,
    and add a second read-only const accessor for normal
    properties. Wrap construct-only properties as read-only,
    instead of ignoring them.
  - vfuncs: Really generate const vfuncs when requested. Put
    the method declaration directly into the .h file, so that
    the doxygen documentation can be next to it.
  - documentation:
    - Remove mergecdocs configure option - always
    merge the C docs, to avoid any risk of uploading or
    releasing empty documentation. Just delete the *_docs.xml
    files to make building from cvs faster.
    - Install a GLIBMM_CHECK_PERL() macro, for use by gtkmm
    and other *mm projects, to get the perl path needed by
    doxygen.
    - Install beautify_docs.pl so it can be reused in gtkmm
    and other *mm projects, instead of having lots of copies.
* Glib::ObjectBase: The default constructor, never before used,
  now generates a custom GType, for use when creating new
  implementations of Glib::Interfaces - for instance, see the
  new custom tree model example in gtkmm.
* Glib::Date: Added clamp_min() and clamp_max().
  (Murray Cumming)

* Documentation:
  - Added reference documentation for MainLoop, MainContext,
    Source, and Date. (Alberto Paro)

2.3.2:

* gmmproc (code generator):
  - signal proxies have extra space to avoid << with templates.
  - Added WRAP_METHOD_DOCS_ONLY() for reusing documentation even
    when the method is hand-coded.
  - _WRAP_SIGNAL(): Added optional no_default_handler parameter,
    because some of the new GTK+ signals have no public default
    handler vfunc.
* Added Glib::init(), for use by non-GUI apps which need to
  use Glib::wrap().
* PropertyProxy: Can now be used with Interfaces.
* Documentation improvements, so that gtkmm docs link to glibmm
  docs.
  (Murray Cumming)

2.3.1:

* gmmproc changes needed by gtkmm 2.3.0
  (Murray Cumming)
* examples updated and buildable and working,
  without gtkmm code.
  (J. Abelardo Gutierrez)

Changes in glibmm 2.3.0:

* Now separate from gtkmm, so you can use things like Glib::ustring without depending on gtkmm.
  This glibmm 2.4 API installs in parallel with gtkmm 2.0/2.2, so you can install this unstable library
  without the risk of breaking existing application.
* This does not yet require glib 2.3 because there has been no tarball release of that yet. For now, you
  can use glibmm 2.3.0 with glib 2.2.x.
* When using pkg-config, you should check for "glibmm-2.4".
* Glib::ObjectBase inherits virtually from SigC::Object, allowing multiple inheritance with other
  classes that inherit from SigC::Object.
* RefPtr:
  - is_null() was removed, to encourage you to use "== 0" instead.
  - operator=(CppObject*) was removed.
* gtkmmproc is now gmmproc.
* All the glibmm bugfixes in gtkmm 2.2.x.

2013-06-10  José Alburquerque  <jaalburquerque@gmail.com>

	Gen Scripts: Minor clean up of the description of the scripts.

	* tools/gen_scripts/gio_generate_docs.sh:
	* tools/gen_scripts/gio_generate_enums.sh:
	* tools/gen_scripts/gio_generate_extra_defs.sh:
	* tools/gen_scripts/gio_generate_methods.sh:
	* tools/gen_scripts/glib_generate_docs.sh:
	* tools/gen_scripts/glib_generate_enums.sh:
	* tools/gen_scripts/glib_generate_extra_defs.sh:
	* tools/gen_scripts/glib_generate_methods.sh:

2013-06-09  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Use an environment variable for the return mismatches.

	* tools/gmmproc.in: Check for the GMMPROC_RETURN_MISMATCHES
	environment variable and use its value as the default for the internal
	boolean '$main::return_mismatches' variable which when true makes
	gmmproc report if the return type in a _WRAP_METHOD() does not match
	the C function return type.

2013-06-07  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Write glibmm version in generated files.

	* tools/gmmproc.in: Use autoconf's substitution variable @PACKAGE_VERSION@.
	* tools/m4/base.m4: _START() macro: Add argument glibmm_version.
	* tools/pm/Output.pm: output_temp_g1(): Add argument glibmm_version.

	The problems with gtkmm 2.24.3 (bug 697835 and bug 700495) show that it can
	be useful to easily see which version of gmmproc/glibmm has generated a file.

2013-06-06  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::DBusInterfaceSkeleton: Constant corrections.

	* gio/src/dbusinterfaceskeleton.hg (get_info): Add a const get_info()
	method returning a constant InterfaceInfo and make the original one
	non-constant.
	(has_connection): Accept the Connection as constant because it should
	not be modified.
	* tools/m4/convert_gio.m4: Add a needed conversion.

2013-06-05  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the Gio::DBus::InterfaceSkeleton class.

	* gio/src/dbusinterfaceskeleton.{ccg,hg}:
	* gio/src/filelist.am: Add the sources wrapping the methods,
	properties and signals and list the sources in the list of files to be
	built.
	* gio/src/gio_signals.defs:
	* tools/extra_defs_gen/generate_defs_gio.cc: Add the
	GDBUSInterfaceSkeleton GType to the properties and signals defs
	generation tool and regenerate the .defs file.
	* tools/m4/convert_gio.m4: Add the conversions for the wrapped
	methods, properties and signals.

2013-06-04  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Glib::MainContext: Fix a small error in the documentation of acquire().

	* glib/glibmm/main.h: Change "context is the owner" to "thread is the owner".

2013-06-04  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	tests: Fix the glibmm_mainloop test.

	* tests/glibmm_mainloop/main.cc: Make it work as expected whichever thread
	executes first.

2013-06-02  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	tests: Add the glibmm_mainloop test.

	* tests/glibmm_mainloop/main.cc: New file. Tests MainContext and MainLoop,
	including MainContext::invoke().
	* tests/Makefile.am: Add glibmm_mainloop/test. Bug #668184.

2013-06-02  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Glib::MainContext: Add invoke().

	* glib/glibmm/main.[h|cc]: Add Glib::MainContext::invoke(). Bug #668184.

2013-05-21  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Add missing includes in glibmm.h and bytearray.hg.

	* glib/glibmm.h:
	* glib/src/bytearray.hg: Add missing includes.

2013-05-21  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	tools: Improve the testheaders.sh script.

	* tools/test_scripts/testheaders.sh: Stop if pkg-config fails.

2013-05-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	tools: Add the testheaders.sh script.

	* tools/test_scripts/testheaders.sh: New file. Compiles each specified header
	file, one at a time. Bug #697835.

2013-05-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	tools: Add the testmmh.sh script.

	* tools/test_scripts/testmmh.sh: New file. Checks if all header files are
	included in a <name>mm.h file. Bug #699993.

2013-05-14  José Alburquerque  <jaalburquerque@gmail.com>

	Custom Interface Properties: Use base finalize function to free data.

	* glib/glibmm/class.cc (Class::clone_custom_type): Specify a custom
	base finalize function for the custom type which would free the
	properties data that might exist due to properties of implemented
	interfaces being overridden.  This is better than having an interface
	finalize function because the custom type could implement several
	interfaces which would mean that the interface finalize function would
	execute more than once as opposed to just once for the base finalize
	function.
	* glib/glibmm/class.h (Class::interface_finalize_function): Replace
	with Class::custom_class_base_finalize_function().

	* glib/glibmm/interface.cc (Interface_Class::add_interface): Do not
	specify a custom interface finalize function.

	(Interface::Interface(const Interface_Class&): Also initialize the
	property GValues using g_param_value_set_default() so that they are
	initialized with the default values of the properties and not just the
	default value of the GValue type.

	Bug #697229.

2013-05-07  José Alburquerque  <jaalburquerque@gmail.com>

	UnixSocketAddress: Add the "path-as-array" property.

	* gio/src/unixsocketaddress.hg:

2013-05-07  Michael Kruglos <space3000@gmail.com>

	glibmm: Wrapped Base64 functionality from glib.

        glib/encoding and decoding are wrapped.
        step by step and in-place decoding are not wrapped.
        (they're too low level for C++, and they're available from the C library.)

        Bug #611589.

2013-04-29  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Output.pm: Use a better name for the c param mappings hash.

	* tools/pm/Output.pm (output_wrap_meth, convert_args_cpp_to_c,
	get_ctor_properties): Replace the 'cpp_param_mappings' variable name
	with 'c_param_name_mappings' which describes the function of the hash
	a little better.

2013-04-29  José Alburquerque  <jaalburquerque@gmail.com>

	DBusConnection: Correct a misplaced #endif G_OS_UNIX.

	* gio/src/dbusconnection.hg: Move the #endif from below the
	call_finish _WRAP_METHOD() to below the non-cancellable call method
	declaration.  It worked as it was because what was generated by
	gmmmproc was an #ifdef G_OS_UINX/#endif embedded in an outer #ifdef
	G_OS_UNIX/#endif but it's how it should be now.

2013-04-29  José Alburquerque  <jaalburquerque@gmail.com>

	Value: Remove unneeded whitespace in source files.

	* glib/glibmm/value.cc:
	* glib/glibmm/value.h:
	* glib/glibmm/value_custom.cc:
	* glib/glibmm/value_custom.h:
	* glib/src/value_basictypes.cc.m4:
	* glib/src/value_basictypes.h.m4:

2013-04-29  José Alburquerque  <jaalburquerque@gmail.com>

	Output.pm: convert_args_c_to_cpp(): Reverse mappings hash correctly.

	* tools/pm/Output.pm (convert_args_c_to_cpp): Reverse the hash that
	maps from parameter names to indexes to a hash that maps from
	indexes to parameter names correctly (by dereferencing the hash
	reference) so that parameter reordering for virtual functions works
	for all Perl versions.

	Bug #698989 (David Evans, John Ralls)

2013-04-29  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Fix _WRAP_SIGNAL(custom_c_callback) for void func().

	* tools/m4/signal.m4: If custom_c_callback is specified, and the signal
	handler takes no arguments and returns void, generate a SignalProxyInfo
	structure with pointers to local functions instead of
	&Glib::SignalProxyNormal::slot0_void_callback. Bug #605728.

2013-04-25  José Alburquerque  <jaalburquerque@gmail.com>

	Interface: Add a comment about overriding properties in constructor.

	* glib/glibmm/interface.cc (Interface(onst Interface_Class&)): Explain
	what is happening with the lines that override the properties of the
	implemented interface, if any, for a custom type.

2013-04-25  José Alburquerque  <jaalburquerque@gmail.com>

	Settings: Wrap the properties.

	* gio/src/settings.hg:

2013-04-25  José Alburquerque  <jaalburquerque@gmail.com>

	Implement derived interface properties in the present.

	* glib/glibmm/class.cc (Class::properties_quark): Initialize this
	GQuark which is used to store/get the data used for setting and
	getting the properties of the interfaces that a custom type overrides.
	(Class::interface_finalize_function): Add this function which
	once invoked frees the property data stored as qata in the GType and
	allocated/appended to in the Glib::Interface constructor below.
	* glib/glibmm/class.h: Declare the interface_finalize_function above.
	Also declare the quark used to store/get the property data and the
	typedef data type of the property data.

	* glib/glibmm/interface.cc (Interface_Class::add_interface): Specify a
	custom interface finalize function when adding the interface so that
	the resources allocated for handling the derived interface properties
	can be freed if the type is a custom interface type.
	(Interface::Interface(const Interface_Class&)): Modify the constructor
	so that when dealing with a custom interface type, it gets a list of
	the properties of the interface to be added and overrides these by
	appending appropriate GValues to the data used to handle
	getting/setting properties that is stored as qdata in the GType.  The
	constructor uses g_param_spec_overrided() to override the properties
	of the implemented interface and g_object_install_property() to
	install the properties.

	* glib/glibmm/property.cc (PropertyBase::install_property): Rewrite
	this method so that the acquired generated id's of custom implemented
	properties does not collide with the id's of properties of implemented
	interfaces that have been overridden in a custom type.  This is done
	by offsetting the acquired generated id (by addition) with the number
	of already existing properties (the ones that have been overridden).
	(custom_get_property_callback): Rewrite this function (which gets
	properties for custom types) so that if the property id is less than
	or equal to the number of overridden interface properties (which would
	mean that an overridden interface property should be gotten) the
	correct overridden interface property is gotten.  Otherwise, a custom
	property should be retrieved, in which case the id is offset (by
	subtraction) when the PropertyBase is retrieved from the id which
	would ensure getting the correct PropertyBase.
	(custom_set_property_callback): Rewrite this function as the above
	custom_get_property_callback was rewritten.

2013-04-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Glib::Source: Fix the destruction and deletion.

	* glib/glibmm/main.cc: Keep the Glib::Source wrapper until the GSource
	instance has been destroyed and all RefPtr<Source> have been deleted.
	Keep a separate ref count in glibmm. Bug #561885.

2013-04-14  José Alburquerque  <jaalburquerque@gmail.com>

	ByteArray: get_data(): Add a const version.

	* glib/src/bytearray.{ccg,hg}: Make the already existing get_data()
	method non-constant and add a constant one returning a const array as
	is done in general in *mm modules.

2013-04-12  José Alburquerque  <jaalburquerque@gmail.com>

	Tls Client Test: Update to test the TlsDatabase class.

	* tests/giomm_tls_client/main.cc: Slightly cleaned it up from the
	first commit.  Lookup the issuer's certificate in the database which
	is found when I run the test.

2013-04-12  José Alburquerque  <jaalburquerque@gmail.com>

	TlsDatabase: Make sure the cancellable param is optional in methods.

	* gio/src/tlsdatabase.hg: Use the {.?} gmmproc parameter option for
	the cancellable to ensure that it is optional (so that there are
	methods that don't require a cancellable for the methods that have
	one).

2013-04-11  José Alburquerque  <jaalburquerque@gmail.com>

	ByteArray: Add size() and get_data() methods.

	* glib/src/bytearray.{ccg,hg}:  Add these methods so that accessing
	the underlying GByteArray's data and len members (which is how it is
	done in the C API) is just as easy with glibmm.  Also use _WRAP_METHOD
	to wrap the create() method.

2013-04-09  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Parse the argument list of methods correctly.

	* tools/pm/Function.pm (parse_param): When splitting the argument
	list split the parameter '{...}' options out and separately and deal
	with them in their own 'elsif' which is more clear and avoids code
	duplication.  Also, don't split the '<...>' matches greedily because
	that causes problems when a Glib::RefPtr<> parameter has a default
	value.

	This problem was discovered while trying to not use the optional
	parameter syntax for the Gio::TlsCertificate::verify() method by using
	a default value for the 'trusted_ca' parameter although upon
	investigation it became clear that keeping the syntax (and the method
	overloads) would be useful because a verify() with no parameters can
	be used to verify things about a certificate unrelated to the identity
	and the trusted_ca (see the TlsCertificateFlags enum that the method
	returns).

2013-04-08  José Alburquerque  <jaalburquerque@gmail.com>

	Interface: Fix a small typo.

	* glib/glibmm/interface.cc:

2013-04-07  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::TlsServerConnection: Wrap it just like TlsClientConnection.

	* gio/src/tlsserverconnection.{ccg,hg}: Use a custom cast constructor
	just as in TlsClientConnection because this class too derives from
	Glib::Interface and Gio::TlsConnection though it only derives from
	GInterface in the C API.  It would have the same problems described in
	the commit fixing the TlsClientCOnnection class (the next to the last
	one).

2013-04-07  José Alburquerque  <jaalburquerque@gmail.com>

	Tests: Add a basic test for the Tls* API.

	* tests/giomm_tls_client/main.cc:  The test basically works though it
	would be good to test more thoroughly the TlsDatabase API.

2013-04-07  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::TlsClientConnection: Make the class work correctly.

	* tools/m4/class_interface.m4 (_CUSTOM_CTOR_CAST): Add a new macro so
	that classes wrapped by the _CLASS_INTERFACE() macro can implement a
	custom cast constructor.  This is so that classes like
	Tls[Client|Server]Connection, that derive from Glib::Interface but
	should also derive from a Glib::Object derived type, though they do
	not do so in the C API, don't produce warnings from an attempt to set
	the non-existent properties of the GObject derived type when an
	attempt to construct the C object is made in the default Glib::Object
	constructor.  Glib::wrap_auto_interface<>(), which is called by
	Glib::wrap() for interfaces, uses the cast constructor to create the
	wrapper which calls the cast constructor of Glib::Interface.  If the
	Glib::Object derived base class of the wrapper has a default
	constructor, that constructor is then called which leads to the
	Glib::Object default constructor being called, which tries to
	construct the C object and set its properties thus producing the
	property setting warnings.  A custom cast constructor can chain up to
	the cast constructor of the Glib::Object derived type thus avoiding
	the call to the Glib::Object default constructor and the non-existent
	property setting warnings.
	* glib/glibmm/interface.cc:
	* glib/glibmm/interface.h (Interface): Add a default constructor so
	that in the cases above (when the cast constructor of the
	Glib::Object's derived type is used), the compiler can find a
	Glib::Interface default constructor to use.  Using the Glib::Interface
	cast constructor as well as the cast constructor of the Glib::Object
	derived type would cause "ObjectBase::initialize() called twice
	for the same GObject" errors.

2013-04-06  Murray Cumming  <murrayc@murrayc.com>

	Add a test of implementing an interface.

	* tests/Makefile.am:
	* tests/glibmm_interface_implementation/main.cc: Add a very simple
	test that implements an interface, with a vfunc implementation and
	make sure that the vfunc is called when the caller method is called.

2013-04-02  José Alburquerque  <jaalburquerque@gmail.com>

	ByteArray: Add a Glib::Value<> template specialization for it.

	* glib/src/bytearray.{ccg,hg}: Add the specialization for ByteArray so
	that getting/setting properties of that type work.  Also added a
	Glib::ByteArray::get_type() method required for the specialization to
	compile.

This is the master branch for glibmm 2.37/8.
See also the glibmm-2-36 branch.

2013-03-31  José Alburquerque  <jaalburquerque@gmail.com>

	TlsCertificate: Use std::string for data instead of char*.

	* gio/src/tlscertificate.{ccg,hg} (TlsCertificate): Use a std::string
	in the data constructor instead of a char* because it is more C++
	like.  Remove the default value for the length argument so there is no
	ambiguity with the file constructor (which also uses std::string for
	the filename).
	(create_from_pem): Renamed from create() so that there is no ambiguity
	with the other file create() methods (one with a filename argument and
	the other with a filename and key file arguments).  Handwrote the
	method in the .ccg file (_WRAP_CREATE does not allow a custom method
	name).
	(property_certificate_pem): Use a std::string instead of a char* for
	the property type in keeping with the use of std::string for pem data.

	These changes are for when the Tls* classes are re-added to the build.

2013-03-31  José Alburquerque  <jaalburquerque@gmail.com>

	Credentials: Add the get_unix_pid() method.

	* gio/src/credentials.hg: Add the new method wrapping the
	g_credentials_get_unix_pid() C function.

2013-03-27  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::Tls*: Correct some referencing errors.

	* gio/src/tlscertificate.hg (get_issuer):
	* gio/src/tlsclientconnection.hg (get_server_identity):
	* gio/src/tlsconnection.hg (get*_certificate): Use refreturn in the
	wrapping of these because the C API does not reference the object when
	returning it.

2013-03-27  José Alburquerque  <jaalburquerque@gmail.com>

	giomm.h: Also remove the tlsfiledatabase.h include.

	* gio/giomm.h: Remove the include from here so that make check will
	not fail.

	* gio/src/error.hg (TlsError): A minor correction in the 'EOF'
	substitution regular expression.

2013-03-26  José Alburquerque  <jaalburquerque@gmail.com>

	TlsFileDatabase: Remove the class until its usage is more clear.

	* gio/src/filelist.am (tlsfiledatabase.hg): Remove from the build
	until it is more clear how the class should be used.

2013-03-26  José Alburquerque  <jaalburquerque@gmail.com>

	TlsError: Rename the EOF enum value.

	* gio/src/error.hg (EOF): Rename it to ENDOFFILE to avoid a clash with
	another definition of the identifier somewhere else which breaks the
	gtkmm build.

2013-03-26  Murray Cumming  <murrayc@murrayc.com>

	GTlsFileDatabase: Use std::string for filenames.

	* gio/src/tlsfiledatabase.hg: The anchor parameter
	and property are for a filename, so we should use
	std::string, because filenames are of unknown
	encoding.

2013-03-26  Murray Cumming  <murrayc@murrayc.com>

	Gio: Correct TlsDatabase/TlsFileDatbase derivation.

	* gio/src/tlsdatabase.hg:
	* gio/src/tlsfiledatabase.hg: TlsFileDatabase
	should derive from TlsDatabase, not the other
	way around. However, we do not use TlsFileDatabase,
	and it is odd (an interface that requires a
	non-interface other than GObject) so maybe we should
	not provide it yet anyway.

2013-03-25  Murray Cumming  <murrayc@murrayc.com>

	Gio: Add some TODOs about changing the base classes.

	* gio/src/actionmap.hg
	* gio/src/pollableinputstream.hg
	* gio/src/pollableoutputstream.hg
	* gio/src/remoteactiongroup.hg:
	We should probably derive from their prerequisite
	(required) classes instead. These were added in
	glibmm 2.34.

2013-03-25  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Wrap the GTlsError GError.

	* gio/src/error.hg: Wrap the GTlsError GError in this file.

	* gio/src/tlsclientconnection.hg:
	* gio/src/tlsconnection.hg: Have default true values for boolean
	setter methods in these classes.

	* gio/src/tlsfiledatabase.hg: Clarify a TODO.
	* gio/src/dbuserror.hg: Whitespace.

2013-03-25  Murray Cumming  <murrayc@murrayc.com>

	Gio::DesktopAppInfo: Added some methods.

	* gio/src/desktopappinfo.hg: Added has_key(),
	get_string() and get_boolean().

2013-03-25  Murray Cumming  <murrayc@murrayc.com>

	Gio::SocketClient: Added some methods.

	* gio/src/socketclient.hg: Added get/set_tls(),
	get/set_tls_validation_flags(), get/set_proxy_resolver().
	Added timeout, tls, enable-proxy, tls-validation, and
	proxy-resolver properties.
	Added the event signal.
	* tools/m4/convert_gio.m4: Added necessary conversions.

2013-03-25  Chun-wei Fan  <fanc999@yahoo.com.tw>

	Visual Studio Projects: Fix and update.

	* Fix Visual C++ projects for glibmm and giomm as numerous
	sources have been added for the addition of APIs so that
	these libraries can be properly built

	* Also make the project files work better with the GLib Visual C++
	builds (which are currently supported in the GLib source
	distribution), so that the files from the GLib build can be picked
	up by the glibmm projects when the Glib sources and glibmm sources
	are extracted in the same root folder (for example,
	c:\foo\glib-2.35.9 and c:\foo\glibmm-2.35.9)

	* Fix the resolver project files for Visual C++ 2008/2010 for having
	the wrong executable output name

2013-03-24  José Alburquerque  <jaalburquerque@gmail.com>

	Tls[Client|Server]Connection: Add the create() methods.

	* gio/src/tlsclientconnection.hg:
	* gio/src/tlsserverconnection.hg: Add the create() methods, wrapping
	the *_new() functions of these classes.  Since these classes are
	interfaces, it is not possible to use _WRAP_CTOR/WRAP_CREATE() to wrap
	the new functions.

	Also make these classes derive from TlsConnection which is their base
	class (see [1][2][3][4]).  Its odd because the base class is a GObject
	and the derived ones are GInterfaces, but that's how the C API has
	done it.  Hopefully it will not be a problem.

	[1] https://developer.gnome.org/gio/stable/GTlsConnection.html#GTlsConnection.description
	[2] https://developer.gnome.org/gio/stable/GTlsConnection.html#GTlsConnection.derived-interfaces
	[3] https://developer.gnome.org/gio/stable/GTlsClientConnection.html#GTlsClientConnection.description
	[4] https://developer.gnome.org/gio/stable/GTlsServerConnection.html#GTlsServerConnection.description

2013-03-24  José Alburquerque  <jaalburquerque@gmail.com>

	gio/src/tls*.ccg: Remove empty namespaces.

	* gio/src/tlsconnection.ccg:
	* gio/src/tlsdatabase.ccg:
	* gio/src/tlsinteraction.ccg: Remove empty namespaces and unneeded
	includes.

	* gio/src/gio_extra_objects.defs: Add GTlsBackend to avoid a gmmproc
	documentation warning.

2013-03-22  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Verify that void methods should not return a value.

	* tools/gmmproc.in: ($main::return_mismatches): Add boolean to store
	whether method return mismatches should be checked.  Make it false by
	default.
	(parse_command_line_args): Add logic to parse a new
	--return-mismatches option to specify if gmmproc should verify that
	void methods should not return a value.
	(print_usage): Modify the usage message to describe the new option.

	For convenience, output the source for which there are unwrapped
	functions, properties and signals.

	* tools/pm/DocsParser.pm (remove_example_code): Also output the source
	being processed when the example code is removed (for convenience).
	* tools/pm/Output.pm (error): Once more, output the source being
	processed when an error occurs, for convenience.
	(convert_args_cpp_to_c): Add a check for when the C++ method for which
	the parameters are being converted returns void but the C function
	does not return void.  If the added option above is specified, output
	a warning.

	Bug #696364.

2013-03-22  José Alburquerque  <jaalburquerque@gmail.com>

	TlsPassword: Correct its constructor parameter order.

	* gio/src/tlspassword.hg (TlsPassword): Reorder its parameters so that
	the flag comes last with a default parameter.
	(create): Do the same for its create() method.

2013-03-22  José Alburquerque  <jaalburquerque@gmail.com>

	TlsDatabase: Const and optional parameter corrections.

	* gio/src/tlsdatabase.hg: The "interaction" parameters in the methods
	are all optional (see the C API docs).
	(verify_chain):
	(verify_chain_async):
	(verify_chain_vfunc):
	(verify_chain_async_vfunc): Make these methods const because the
	database should not be changed by verifying a certificate's chain.
	(create_certificate_handle_vfunc): Make the certificate constant
	because it should not change when creating a handle for it.

2013-03-21  José Alburquerque  <jaalburquerque@gmail.com>

	TlsConnection: Correct its base class derivation.

	* gio/src/tlsconnection.hg: The class should derive from
	Gio::IOStream, not Glib::Object as in the C API.  Also add the
	get_peer_certificate() methods.

2013-03-21  José Alburquerque  <jaalburquerque@gmail.com>

	TlsCertificate: Wrap its single virtual function.

	* gio/src/tlscertificate.hg: Wrap the "verify" virtual function.  Also
	add a default value to the length parameter of the constructor
	accepting a data character array.
	* gio/src/gio_vfuncs.defs: Add the virtual function definition so that
	it is recognized.

2013-03-21  Murray Cumming  <murrayc@murrayc.com>

	Gio::FileInfo: Added get_deletion_date().

	* glib/src/fileenumerator.hg: Wrap the new
	g_file_info_get_deletion_date() function.
	* tools/m4/convert_glib.m4: Add a necessary conversion.

2013-03-21  Murray Cumming  <murrayc@murrayc.com>

	Gio::FileEnumerator: Added get_child().

	* glib/src/fileenumerator.hg: Wrap the new
	g_file_enumerator_get_child() function.

2013-03-21  Murray Cumming  <murrayc@murrayc.com>

	Glib::VariantBase: Added check_format_string().

	* glib/src/variant.hg:
	Wrap the new g_variant_check_format_string()
	function.

2013-03-21  Murray Cumming  <murrayc@murrayc.com>

	Gio::AsyncResult: Added is_tagged().

	* gio/src/applicationcommandline.hg:
	Wrapped the new g_async_result_is_tagged()
	function.

2013-03-21  Murray Cumming  <murrayc@murrayc.com>

	Gio::ApplicationCommandLine: Added some methods.

	* gio/src/applicationcommandline.hg:
	Added get_stdin() and create_file_for_arg(),
	wrapping new C functions.

2013-03-21  Murray Cumming  <murrayc@murrayc.com>

	Regenerated the -signals.defs files.

	* gio/src/gio_signals.defs: Regenerated using
	tools/gen_scripts/gio_generate_extra_defs.sh.

2013-03-19  Murray Cumming  <murrayc@murrayc.com>

	Regenerated the -methods.defs files.

	* gio/src/gio_methods.xml:
	* glib/src/glib_functions.xml:
	* glib/src/gmodule_functions.xml:
	* glib/src/gobject_functions.xml: Regenerated using
	tools/gen_scripts/gio_generate_methods.sh and
	tools/gen_scripts/glib_generate_methods.sh,
	with a slight hand-edit to avoid the problem in
	gioschedule.h with h2def.py (see previous commit).

2013-03-19  Murray Cumming  <murrayc@murrayc.com>

	h2def.py: Handle GLIB_AVAILABLE_IN_ALL

	* tools/defs_gen/h2def.py: Do not just ignore
	functions prefixed with GLIB_AVAILABLE_IN_ALL.
	This handles the latest glib/gio/gactiongroup.h file.

	However, we still need to handle the new
	GLIB_DEPRECATED_IN_2_36_FOR(old_func) form
	now used in glib/gio/gioschedule.h.

2013-03-19  Murray Cumming  <murrayc@murrayc.com>

	Regenerated the -enums.defs files.

	* gio/src/gio_enums.xml:
	* glib/src/glib_enums.xml: Regenerated using
	tools/gen_scripts/gio_generate_enums.sh and
	tools/gen_scripts/glib_generate_enums.sh.

2013-03-19  Murray Cumming  <murrayc@murrayc.com>

	Regenerated the -docs.xml files.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Regenerated using
	tools/gen_scripts/gio_generate_docs.sh and
	tools/gen_scripts/glib_generate_docs.sh.
2.35.9:

2013-03-13  José Alburquerque  <jaalburquerque@gmail.com>

	TlsFileDatabase: Use _WRAP_METHOD() to wrap the create() method.

	* gio/src/tlsfiledatabase.{ccg,hg}: It can't be properly wrapped using
	_WRAP_CTOR()/WRAP_CREATE() yet but it can be wrapped using
	_WRAP_METHOD().  (I don't know why I thought it had to be
	handwrapped.)

2013-03-12  José Alburquerque  <jaalburquerque@gmail.com>

	TlsFileDatabase: Add a TODO.

	* gio/src/tlsfiledatabase.hg:

2013-03-12  José Alburquerque  <jaalburquerque@gmail.com>

	TlsFileDatabase: Wrap the create() method.

	* gio/src/tlsfiledatabase.{ccg,hg}: Manually wrap it because
	presently the *_new() function does more than call g_initable_new().

2013-02-26  José Alburquerque  <jaalburquerque@gmail.com>

	Tls*: Add the rest of the (unwrapped) properties, methods and vfuncs.

	* gio/src/tlscertificate.{ccg,hg}: Wrap the "certificate" property.
	* gio/src/tlsclientconnection.hg: Add the get_accepted_cas() methods
	and the "accepted-cas" property.
	* gio/src/tlsdatabase.hg: Add the lookup_certificates_issued_by*()
	methods and virtual functions.  Correct a TlsCertificate conversion
	for the virtual functions so that the underlying GObject is properly
	copied from the C++ wrapper.
	* tools/m4/convert_gio.m4: Add a ByteArray conversion.

	* gio/src/tlspassword.hg: Clarify a TODO.

	* glib/glibmm.h: Add bytes.h and bytearray.h to the includes.

2013-02-25  José Alburquerque  <jaalburquerque@gmail.com>

	glibmm: Add ByteArray.

	* glib/src/bytearray.{ccg,hg}:
	* glib/src/filelist.am: Add the new sources for the ByteArray class
	that wraps GByteArray and include the sources in the build.  Some of
	the GTls* API uses GByteArray so it is necessary to wrap it.
	* glib/src/glib_extra_objects.defs: Include an object definition for
	GByteArray to avoid a gmmproc documentation warning.
	* tools/m4/convert_glib.m4: Add a GByteArray conversion so the sources
	can be processed properly.

2013-02-25  Pavel Vasin  <rat4vier@gmail.com>

	AppInfo::get_all(): Fix ownerships

	Bug #694505

2013-02-25  José Alburquerque  <jaalburquerque@gmail.com>

	TlsDatabase: Virtual function const correction.

	* gio/src/tlsdatabase.hg (create_certificate_handle_vfunc): Make it
	const because it does not modify the database.

2013-02-24  José Alburquerque  <jaalburquerque@gmail.com>

	Tls[Database|Interaction]: Add the virtual functions.

	* gio/src/tlsdatabase.hg:
	* gio/src/tlsinteraction.hg: Add the virtual functions.  It is
	necessary to wrap GByteArray to wrap the remaining three virtual
	functions of TlsDatabase.

2.35.8 (unstable);

2013-02-21  Murray Cumming  <murrayc@murrayc.com>

	Fix the build  with --enable-warnings=fatal.

	* glib/src/threads.hg: The GThread definition is now deprecated,
	meaning it should only be used via a pointer.
	However, we depend on it, so this temporarily undefs the
	deprecation, so we can still use those checks elsewhere in the build.
	It looks like we will have to do a third version of Glib::Threads,
	after already replacing Glib::Thread.
	This fixes make distcheck.

2013-02-21  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Signal*::connect(): Make them less thread-unsafe.

	* glib/glibmm/main.cc: Make SignalTimeout::connect(), connect_seconds(),
	SignalIdle::connect() and SignalChildWatch::connect() less thread-unsafe
	by moving conn_node->install() to before g_source_attach().
	* glib/glibmm/main.h: Describe that the Signal*::connect*() methods that
	return a sigc::connection are not thread-safe. Bug #396958.

2013-02-20  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Signal[Timeout|Idle]::connect_once() docs: Warn about thread-unsafety.

	* glib/glibmm/main.cc: Fix an incomplete comment.
	* glib/glibmm/main.h: SignalTimeout::connect_once(), connect_seconds_once(),
	SignalIdle::connect_once(): Describe the caution necessary because
	sigc::trackable-derived objects are not thread-safe. Bug #396963.

2013-02-20  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	ThreadPool::push() docs: Note that sigc::trackable is not thread-safe.

	* glib/glibmm/threadpool.h: push(): Describe how sigc::trackable-derived
	classes can be used in a thread-safe way.
	* glib/src/threads.hg: create(): Correct the description added in the
	previous commit. Bug #512348.

2013-02-20  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Threads::Thread::create(): Update the documentation.

	* examples/thread/thread.cc: Don't derive from sigc::trackable.
	* glib/src/threads.hg: create(): Describe how sigc::trackable-derived classes
	can be used in a thread-safe way. Bug #512348.

2013-01-30  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Predefine G_OS_UNIX or G_OS_WIN32 in Doxygen's configuration file.

	* docs/reference/Doxyfile.in: Predefine either G_OS_UNIX or G_OS_WIN32,
	depending on HOST_WINDOWS_NATIVE. Update to Doxygen 1.8.3 status.
	* glib/src/iochannel.hg: Remove the DOXYGEN_SHOULD_SKIP_THIS that was added
	just to get Windows-specific methods included in the documentation.

2013-01-30  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	DBus::[Connection|Proxy]: Change ifdef G_OS_LINUX to ifdef G_OS_UNIX.

	* gio/src/dbusconnection.[ccg|hg]:
	* gio/src/dbusproxy.[ccg|hg]: Change G_OS_LINUX to G_OS_UNIX. Glib does not
	define G_OS_LINUX. Correct function declarations for DBus::Proxy::call().

2013-01-29  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Improve the conversion of documentation to Doxygen format.

	* tools/defs_gen/docextract.py: Handle 'Since ' without a colon.
	* tools/m4/signal.m4:
	* tools/pm/Output.pm: When a function declaration is surrounded by
	ifdef/endif, put its documentation inside the ifdef/endif.
	* tools/pm/DocsParser.pm: Handle 'Since ' without a colon. Escape most
	backslashes, not just \r and \n. Convert more <tags> to something that
	Doxygen understands.

2013-01-27  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Documentation: Fix many warnings from Doxygen.

	* gio/src/gio_docs_override.xml:
	* glib/src/glib_docs_override.xml: Move "Since: n.m" from the <return> to the
	<description> entries. gmmproc adds a period at the end of the @return
	Doxygen command, and Doxygen warns for "@newin{n,m}.".
	* glib/glibmm/interface.h:
	* glib/glibmm/stringutils.h:
	* glib/glibmm/vectorutils.h:
	* gio/src/*.hg:
	* glib/src/*.hg: (Here "*" means "many", not "all") Examples of changes:
	Add missing @param. Change names of parameters, to make them equal in
	function declaration and @param command. Change "@name" to "@a name".
	Change "<ulink url=" to "<a href=".

2013-01-17  José Alburquerque  <jaalburquerque@gmail.com>

	TlsConnection: Wrap the virtual functions.

	* gio/src/tlsconnection.hg: Wrap the three virtual functions that were
	left as TODO's now that it's possible to wrap virtual functions with
	slots.
	* tools/m4/vfunc.m4: Use 'retval' instead of 'result' for variables
	that store the result of the C base virtual function invocation and
	the C++ virtual function invocation because 'result' conflicts with
	the AsyncResult 'result' parameter of the handshake_finish_vfunc().

2013-01-16  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: _WRAP_VFUNC: Support the wrapping of slots.

	* tools/pm/WrapParser.pm (on_wrap_vfunc): Add support for parsing the
	additional 'slot_name', 'slot_callback', and 'no_slot_copy' options
	that do the same thing as the corresponding _WRAP_METHOD options (ie.
	specify the name of the C++ slot parameter, the name of the callback
	function and whether to use the original slot or a copy of it,
	respectively.  Also pass the options along to:
	(output_wrap_vfunc): Store the options in the C++ virtual function
	object so they can be tested for when converting the parameters and
	composing the _VFUNC* m4 macro calls.
	* tools/pm/Output.pm (output_wrap_vfunc_cc):
	- Append the additional 'slot_type', 'slot_name' and 'no_slot_copy'
	parameters to the _VFUNC_CC m4 macro invocation so that it can include
	code for the vfunc to copy the slot parameter and pass it on to the C
	function.
	- Also append the additional 'slot_type' and 'c_data_param_name' to
	the _VFUNC_PCC m4 macro so that it knows the slot type and the C
	gpointer parameter name that contains the slot so that the macro can
	generate code to extract the slot from the data parameter and pass the
	slot on to the C++ virtual function.
	(convert_args_c_to_cpp):
	- Rewritten so that it loops through the C++ parameters so that it is
	possible to re-order the parameters using the existing mapping
	functionality that allows parameters to be re-ordered for the
	_WRAP_[CREATE|CTOR|METHOD] macros.  Also re-written so that it knows
	how to deal with slot parameters.
	* tools/m4/vfunc.m4 (_VFUNC_PCC): Modified to accept the additional
	'slot_type' and 'c_data_param_name' arguments and to insert code to
	extract the slot from the C gpointer data parameter to be passed on
	to the C++ virtual function.
	(_VFUNC_CC): Modified to accept the additional 'slot_type',
	'slot_name' and 'no_slot_copy' arguments and to insert code to either
	copy the slot in a 'slot_copy' variable or set the variable to the
	actual slot (if it's so been specified) which is then passed on to the
	C function.

2013-01-16  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: _WRAP_[CREATE|CTOR|METHOD]: Allow any order of {} options.

	* tools/pm/Function.pm: Make it possible to use any order desired of
	the options to specify whether parameters should be optional or should
	be re-ordered in the _WRAP_* directives.

2013-01-14  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Gio::File: Remove refreturn to avoid memory leaks.

	* gio/src/file.hg: Remove the refreturn argument from _WRAP_METHOD for read()
	and 13 other methods. The glib functions add a ref.
	Change @newin2p24 to @newin{2,24}. Bug #691606.

2013-01-09  José Alburquerque  <jaalburquerque@gmail.com>

	giomm.h: Add the tls[client|server]connection.h headers.

	* gio/giomm.h: Add the two new headers.

2013-01-08  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the Tls[Client|Server]Connection classes.

	* gio/src/tlsclientconnection.{ccg,hg}: Add the new client sources
	wrapping the methods and properties.
	* gio/src/tlsserverconnection.{ccg,hg}: Add the new server sources
	wrapping its single property.
	* gio/src/filelist.am: Include the new sources in the list of files to
	be built.
	* gio/src/enums.hg: Add the TlsAuthenticationMode enum needed for the
	server class here because it is documented in the Tls Overview section
	of the C API's documentation and not as part of any other class.
	* tools/m4/convert_gio.m4: Add a necessary conversion.

	* gio/src/tlsdatabase.{ccg,hg}: Fix the includes so that the
	tlscertificate.h header file does not have to be included in the .h
	file but instead in the .c file.

2013-01-07  José Alburquerque  <jaalburquerque@gmail.com>

	giomm.h: Add the new tls*.h headers.

	* gio/giomm.h: Add the
	tls[connection|database|filedatabase|interaction].h headers.

2013-01-07  José Alburquerque  <jaalburquerque@gmail.com>

	Tls[Database|Interaction|Passowrd]: Const corrections.

	* gio/src/tlsdatabase.hg (verify_chain):
	(verify_chain_async): Accept the SocketConnectable as a const because
	it is used to check for certificates that have been pinned (marked as
	good) for a specific domain in a browser session and not modified.
	(lookup_certificate_issuer)
	(lookup_certificate_issuer_async): Accept the TlsCertificate for which
	to look for the issuer as const because it is not modified according
	to the docs.
	* gio/src/tlsinteraction.hg (ask_password):
	(ask_password_async)
	(invoke_ask_password): Accept the TlsPassword as non-const because the
	docs say that it is filled in by the methods, not used to compare a
	user entry with an existing password.
	* gio/src/tlspassword.hg (get_value_vfunc):
	(get_default_warning_vfunc): Make these const because they are getter
	functions.
	* tools/m4/convert_gio.m4: Adjust the conversions according to above
	changes.

2013-01-07  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: _WRAP_ENUM: Skip enum constants whose names are deleted.

	* tools/pm/Enum.pm, build_element_list(): If a custom substitution argument
	in _WRAP_ENUM() removes all of an enum constant's name, exclude that constant
	from the element list. Useful for GdkEventType. Bug #544694.

2013-01-07  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Improve the search for documentation of enums.

	* tools/pm/Enum.pm, build_element_list(): Search for value documentation
	before custom substitutions are applied to the element name. Bug #544694.

2013-01-03  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the TlsConnection class.

	* gio/src/filelist.am:
	* gio/src/tlsconnection.{ccg,hg}: Add the new sources wrapping the
	methods, properties and signals of the new class.  Also add the
	sources to the list of files to be built and add the virtual
	functions as a TODO.
	* gio/src/gio_vfuncs.defs: Add the definitions of the virtual
	functions of the class for when the virtual functions are wrapped.
	* tools/m4/convert_gio.m4: Add conversions relevant to wrapping the
	class.

2013-01-03  José Alburquerque  <jaalburquerque@gmail.com>

	TlsDatabase: Add a TODO to wrap virtual functions.

	* gio/src/tlsdatabase.hg: Add the virtual functions but as a TODO so
	that the parameters can be properly ordered according to the order in
	the methods.
	* gio/src/gio_vfuncs.defs: Add the virtual function definitions for
	when the vfuncs are wrapped.

	* gio/src/tlscertificate.hg: Do not wrap a write-only construct-only
	property.

2013-01-03  José Alburquerque  <jaalburquerque@gmail.com>

	TlsDatabase: Reorder parameters so that flags can have defaults.

	* gio/src/tlsdatabase.hg (lookup_certificate_issuer):
	(lookup_certificate_issuer_async): Reorder the parameters in these
	methods as is done in the other methods so that the flag parameter can
	be last and have a default value.

2013-01-03  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the TlsDatabase class which implements TlsFileDatabase.

	* gio/src/filelist.am:
	* gio/src/tlsdatabase.{ccg,hg}: Add the sources wrapping the C
	functions and include the sources in the list of files to be built.
	* tools/m4/convert_gio.m4: Add the necessary conversions for the
	wrapped methods in the sources.

	* gio/src/tlsfiledatabase.hg: Add a TODO.

2013-01-02  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the TlsFileDatabase interface.

	* gio/src/filelist.am:
	* gio/src/tlsfiledatabase.{ccg,hg}: Add the new sources wrapping a
	single property and include them in the list of files to be built.
	* gio/src/tlsinteraction.hg: Correct a typo.

2013-01-01  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the TlsInteraction class.

	* gio/src/tlsinteraction.{ccg,hg}:
	* gio/src/filelist.am: Add the sources wrapping the C functions and
	include the sources in the build.
	* gio/src/gio_vfuncs.defs: Add the virtual functions of the class.
	The vfuncs are not wrapped yet so that gmmproc can be modified so that
	virtual functions with slot parameters can be wrapped as is already
	possible with methods.
	* tools/m4/convert_gio.m4: Add necessary conversions.

2012-12-28  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: _WRAP_METHOD: Ensure that slot parameters can be optional.

	* tools/pm/Output.pm (output_wrap_meth): Only pass the slot parameters
	to the m4 _*METHOD() macros if convert_args_cpp_to_c() signals that a
	possible slot parameter should be included.
	(convert_args_cpp_to_c): Add a boolean called 'include_slot' to the
	objCppfunc object that is by default false that is set when a slot
	parameter is encountered and should converted.

2012-12-28  José Alburquerque  <jaalburquerque@gmail.com>

	Variant: Allow containing complex types in arrays and in variants.

	* glib/src/variant.hg (Variant< Variant<T> >): Add a new class capable
	of containing any Variant<>.  The class is just like
	Variant<VariantBase> except that with it, it is now possible to store
	and handle complex variant types in a variant easily in a C++ way.
	The modified test below exemplifies.
	(Variant< std::vector<T> >::create): Create a Variant<> for each of
	the members in the vector and then use g_variant_builder_add_value()
	to add the underlying GVariant of the wrapped elements in the builder
	instead of using the variadic g_variant_builder_add() function which
	causes problems when dealing with types that are more complex than
	basic ones.
	(Variant< std::vector<T> >::get_child): Rewritten to get the child as
	a GVariant, wrap the GVariant in a Variant<> and then get its value
	instead of assuming that the array in the variant is a fixed array of
	basic types so that complex types are supported in arrays.
	(Variant< std::vector<T> >::get): Rewritten as get_child() above so
	that the elements in the array are gotten as a GVariant, wrapped in a
	Variant<> and then retrieved and placed in the resulting vector,
	again, to ensure that a vector of complex types can be stored in a
	variant.
	* tests/glibmm_variant/main.cc: Modify the test to ensure that any
	type other than basic ones are supported.

2012-12-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Gio::Action: Add more documentation of get_state_hint() and get_state().

	* gio/src/action.hg: get_state_hint() and get_state() returns void, which
	makes them useless. That can't be fixed until the next ABI break. Explain in
	the documentation what to do instead of calling these methods. Bug #690134.

2012-12-27  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	SignalProxy: Fix the documentation, especially of connect_notify().

	* glib/src/signalproxy.h.m4: Many small fixes of the documentation, and a
	more thorough rewrite of the doc of SignalProxy[0-6]::connect_notify().
	Bug #126213, comment 5.

2012-12-18  Andrew Potter  <agpotter@gmail.com>

	VariantBase: Add operator for BoolExpr (const void*).

	* glib/src/variant.{ccg,hg}: Adds operator BoolExpr.
	Also deletes relational operators to prevent unexpected conversion.
	Bug #690121.

2012-12-13  Andrew Potter  <agpotter@gmail.com>

	SimpleAction: Fix stateful action constructor typo, allowing use.

	* gio/src/simpleaction.hg: Fix 'sate' typo to 'state', allowing
	the constructor to be used. Bug #690122.

2012-12-12  Andrew Potter  <agpotter@gmail.com>

	Threads: Add create(slot, name).

	* glib/src/threads.{ccg,hg}: Add a method to create named threads.

	Bug #689863.

2012-11-20  Andrew Potter  <agpotter@gmail.com>

	VariantType: Add create_tuple().

	* glib/src/varianttype.{ccg,hg}: Add the method following the style of
	VariantContainerBase::create_tuple(), completing a TODO.

	Bug #688682.

2012-11-20  José Alburquerque  <jaalburquerque@gmail.com>

	VariantType: Correct the referencing in the create*() methods.

	* tools/m4/convert_glib.m4: Correct the 'GVarianType*' to VariantType
	conversion to not take an extra reference when wrapping the
	GVariantType in the VariantType.
	* glib/src/variant.hg:
	* glib/src/varianttype.hg: Also move the 'const GVariantType'
	conversion from the global glib convert file (above) to these local
	files because it takes an extra reference of the GVariantType.

	Bug #688440 (Andrew Potter).

2012-11-18  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Documentation: Adjust if the method has a slot param.

	* tools/pm/WrapParser.pm (on_wrap_method): Pass the objCppfunc object
	to the DocParser::lookup_documentation() subroutine so that it can
	decide if the final parameter of the C function should be excluded
	from the docs.  The final parameter (which would be a gpointer
	user_data parameter) would be omitted if the C++ method has a slot
	parameter.
	* tools/pm/DocsParser.pm (lookup_documentation): Pass the objCppfunc
	on to the append_parameter_docs() subroutine which does what's
	described above.
	(append_parameter_documentation): Decide whether to skip the final C
	parameter as described above.  Also rename 'callback' parameters to
	'slot' and use '@a slot' instead of '@a callback' in the main
	description.
	(substitute_identifiers): Replace C *Callback types to C++ Slot*
	types.

	Bug #688587.

2012-11-18  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: _WRAP_METHOD: Support wrapping methods with slots.

	* tools/pm/WrapParser.pm (on_wrap_method): Add code to parse the
	additional 'slot_name', 'slot_callback' and 'no_slot_copy' options.
	- The 'slot_name' options specifies the name of the slot parameter in
	  the C++ method declaration.
	- The 'slot_callback' option specifies the name of the callback to
	  pass to the C function.
	- The 'no_slot_copy' option specifies that the actual slot should be
	  passed to the C function in the data parameter and not a copy.  By
	  default, a copy is used.
	* tools/pm/Output.pm (output_wrap_meth): Pass the new slot options
	along to the *METHOD() m4 macros.
	(convert_args_cpp_to_c):
	- If there is a slot parameter, ignore the final user_data parameter
	  in the C function when comparing the argument count in the C++
	  method and the C function.
	- Convert a possible slot parameter to the address of the specified
	  slot callback (with the 'slot_callback' option).  Report an error if
	  no callback has been specified.
	- Pass a 'slot_copy' variable as the final user data parameter to the
	  C function.  The variable is declared by the _*METHOD() m4 macros.
	* tools/m4/method.m4 (_METHOD):
	(_STATIC_METHOD):
	- Accept the new 'slot_type', 'slot_name' and 'no_slot_copy' options
	  which specify the C++ slot type (without the const and the &), the
	  C++ slot parameter name and whether to create a copy of the slot or
	  not respectively.
	- Insert code to declare a 'slot_copy' variable that is either a copy
	  of the slot or a pointer to the actual C++ slot based on the
	  'no_slot_copy' option.

	Bug #688587.

2012-11-15  José Alburquerque  <jaalburquerque@gmail.com>

	giomm.h: Include the tlspassword.h header file.

	* gio/giomm.h:

2012-11-14  Debarshi Ray  <debarshir@src.gnome.org>

	ustring docs: The global locale should be set when using C++ streams.

	* glib/glibmm/ustring.h: Replace output.imbue(std::locale("")) by
	std::locale::global(std::locale("")) in the description of how to use
	std::ostringstream. Bug #661588.

2012-11-13  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the TlsPassword class.

	* gio/src/tlspassword.{ccg,hg}:
	* gio/src/filelist.am: Add the new sources containing the constructor,
	methods, properties and virtual functions and include the sources in
	the build.
	* gio/src/gio_vfuncs.defs: Add the GTlsPassword virtual functions so
	that they are recognized by gmmproc.
	* tools/m4/convert_gio.m4: Add an enum conversion.

2012-11-13  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the GTls* GTypes to the extra defs generation utility.

	* tools/extra_defs_gen/generate_defs_gio.cc: Add the GTypes.
	* gio/src/gio_signals.defs: And regenerate the signal and property
	defs file.

2012-11-13  José Alburquerque  <jaalburquerque@gmail.com>

	giomm.h: Re-add an accidentally removed include.

	* gio/giomm.h: Re-add 'simpleaction.h' which was accidentally removed.
	Also re-sort the includes by the base filename (without the .h) as
	they were before.

2012-11-12  José Alburquerque  <jaalburquerque@gmail.com>

	giomm.h: Include missing headers.

	* gio/giomm.h: Include all the headers generated from the .hg files.

2012-11-11  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the TlsCertificate class.

	* gio/src/filelist.am:
	* gio/src/tlscertificate.{ccg,hg}: Add the sources wrapping the
	constructors, methods and (most) properties and include the sources in
	the build.
	* gio/src/enums.hg: Add the TlsCertificateFlags enum (wrapping the C
	enum).
	* tools/extra_defs_gen/generate_defs_gio.cc: Add the GTlsCertificate
	GType to the list of types for which signal and property defs are to
	be generated.
	* gio/src/gio_signals.defs: Regenerate the signal and property defs
	file.
	* tools/m4/convert_gio.m4: Add necessary conversions.

	* gio/src/gio_extra_objects.defs: Add TlsClientConnection to avoid a
	gmmproc docs warning.

2012-11-08  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: _WRAP_CTOR: Handle *_new() functions with a final GError**.

	* tools/pm/WrapParser.pm (on_wrap_ctor): Add code to parse an
	additional "errthrow" optional option in a _WRAP_CTOR() macro.
	* tools/pm/Output.pm (output_wrap_ctor): Pass the "errorthrow" option
	along as a string to:
	(get_ctor_properties): Ignore the final GError** parameter of the C
	*_new() function because it does not form part of the property list
	that the constructor to has to set.

	Bug #687959.

2012-11-07  José Alburquerque  <jaalburquerque@gmail.com>

	DesktopAppInfo: Add some new getter methods.

	* gio/src/desktopappinfo.hg: Add the get_keywords(),
	get_startup_wm_class(), get_generic_name(), get_show_in(),
	get_nodisplay() and get_categories() getter methods wrapping the
	corresponding C functions.

2012-11-06  José Alburquerque  <jaalburquerque@gmail.com>

	Variant: Don't refsink variants created using the custom cast ctor.

	* glib/src/variant.ccg:
	* glib/src/variant.hg:
	* glib/src/variant_basictypes.cc.m4: Remove the call to
	g_variant_ref_sink() in the create() methods of the variant types that
	use the custom cast constructor to wrap the newly created C object
	because the custom cast constructor already refsinks the object if
	necessary.

2012-11-06  José Alburquerque  <jaalburquerque@gmail.com>

	MemoryOutputStream: Add the steal_as_bytes() method.

	* gio/src/memoryoutputstream.{ccg,hg}: Add the method that wraps the
	corresponding C function.

2012-11-06  José Alburquerque  <jaalburquerque@gmail.com>

	AppInfo: Add create_duplicate().

	* gio/src/appinfo.{hg,ccg}: Add the new method (which creates a
	duplicate of the AppInfo).  Also, use gmmproc's optional parameter
	functionality to wrap the launch_default_for_uri() method without the
	optional AppLaunchContext parameter.

2012-11-06  José Alburquerque  <jaalburquerque@gmail.com>

	Variant< std::vector<std::string> >: Add create_from_object_paths().

	* glib/src/variant.hg: Add the new method that creates a variant of
	vector of strings out of object paths.  This is so the type of the
	variant is rightly set to G_VARIANT_TYPE_OBJECT_PATH_ARRAY and not
	G_VARIANT_TYPE_BYTESTRING_ARRAY in case some application needs to make
	a distinction.
	  Also _IGNORE the g_variant_get_objv() and g_variant_dup_objv()
	functions because it's possible to get object paths from a variant of
	vector of strings if it contains them with the existing getter
	methods because object paths are merely strings.
	* glib/src/variantiter.hg: Add an _IGNORE.
	* glib/src/checksum.ccg:
	* glib/src/convert.ccg: Whitespace.

2012-11-05  José Alburquerque  <jaalburquerque@gmail.com>

	Regenerate the XML docs files for glibmm and giomm.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: These files now include enum XML
	documentation.
	* glib/src/glib_extra_objects.defs: Add IOChannel to avoid a gmmproc
	documentation warning.

2012-11-04  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Make enum documentation possible.

	* tools/defs_gen/docextract.py (enum_name_pattern): Add a new regular
	expression that recognizes gtk-doc enum comment blocks (though
	imperfectly because it also catches things such as structure comment
	blocks).
	(identifier_patterns): Append the new enum_name_pattern to the list of
	patterns used to test each gtk-doc block's identifier to see what type
	of block it is.
	(parse_file): Do not add a particular gtk-doc block if it has been
	marked as a block initially thought to be an enum comment block but
	later found not to be so.
	(skip_to_identifier): Mark the current comment block as an enum type
	if the enum_name_pattern matches the identifier.
	(process_params): Mark the current block as invalid if the block was
	recognized as an enum type but no parameters are found or if any of
	the parameter names are not all caps.
	(parse_dir): Include .h files for processing because gtk-doc enum
	comment blocks are included in those files.
	* tools/defs_gen/docextract_to_xml.py: Add an option to not print out
	enum docs.  Assume that enum docs should be printed out by default.
	* tools/pm/DocsParser.pm (parse_on_start):
	(parse_on_end): Add logic to correctly parse an <enum> tag (which is
	just like the already existing <function> and <signal> tags.  The only
	difference is in the name of the tags.  The function name syntax is
	the same as a C function name, the signal name has the form
	'CStructName::signal-name' while the enum name has the form
	'CEnumName')
	(lookup_enum_description): Add this subroutine that gets the
	the description of the specified enum.
	(lookup_enum_value_documentation): Add this subroutine that gets the
	description of an enum value as a Doxygen block.
	(lookup_documentation): Use the new remove_example_code subroutine
	described below.
	(remove_example_code): Add this subroutine that removes example code
	from the specified text so that it can be used in other places.
	* tools/pm/Enum.pm (c_prefix): Add a new field to the class storing
	the enum's C prefix.  This field is used when looking up an enum's
	value documentation.
	(parse_values): Modified to store the C prefix of the enum.
	(build_element_list): Modified to lookup the documentation of the
	values of the enum and insert the Doxygen block just before each
	value.  This allows Doxygen to document each value of the enum.
	* tools/pm/Output.pm (output_wrap_enum): Modified to lookup
	the description of the enum previously parsed by the DocParser and
	merge it with an already passed in comment for the enum which is then
	passed as before to the _ENUM macro.
	* tools/m4/enum.m4: Whitespace correction.

	Bug #544694.

2012-11-04  Murray Cumming  <murrayc@murrayc.com>

        MountOperation: Correct an ABI break.

        * gio/src/mountoperation.hg: Use the no_default_handler option with
	the new _WRAP_SIGNAL() to avoid a new on_*() vfunc increasing the size
	of the class. This got into the 2.34.0 release at the last moment
	but it seems better to correct it before people use it than to leave it.

2012-11-05  José Alburquerque  <jaalburquerque@gmail.com>

	UnixConnection: Remove the const receive_credentials_finish() method.

	* gio/src/unixconnection.hg: It doesn't make sense and there are no
	other const *_finish() methods in giomm.  Further, it's not needed for
	getting a const Credentials.  That's already possible with the
	existing receive_credentials_finish() method.

2012-11-04  José Alburquerque  <jaalburquerque@gmail.com>

	UnixConnection: Add [receive|send]_credentials_[async|finish]().

	* gio/src/unixconnection.{ccg,hg}: Add the new methods (adding
	non-cancellable versions for the async methods) wrapping the
	corresponding C functions.
	* gio/src/socketconnection.hg: Typo.

2012-11-04  José Alburquerque  <jaalburquerque@gmail.com>

	ThemedIcon: Wrap the "names" property.

	* gio/src/themedicon.hg:

2012-11-04  José Alburquerque  <jaalburquerque@gmail.com>

	SocketConnection: Add connect*() and is_connected() methods.

	* gio/src/socketconnection.{ccg,hg}: Add connect(), connect_async(),
	connect_finish() and is_connected() methods (wrapping the
	corresponding C functions).
	* gio/src/resolver.hg: Add an _IGNORE.

2012-11-04  José Alburquerque  <jaalburquerque@gmail.com>

	docextract_to_xml.py: Replace &colon; with ':' in generated XML files.

	* tools/defs_gen/docextract_to_xml.py: Otherwise gmmproc reports
	errors if this entity is encountered when trying to parse the XML
	documentation.

2012-11-01  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Improve the documentation of properties.

	* tools/m4/property.m4: Change "the property of the value" to "the value of
	the property". Make the description of the return value different for
	PropertyProxy, PropertyProxy_ReadOnly and PropertyProxy_WriteOnly.

2012-10-30  José Alburquerque  <jaalburquerque@gmail.com>

	Resolver: Add lookup_records() and lookup_records_finish().

	* glib/glibmm/containerhandle_shared.h: Add TypeTraits specializations
	for VariantBase (for the futre) and VariantContainerBase.
	* gio/src/resolver.hg:  Add the new methods (mentioned above) because
	the VariantContainerBase TypeTraits specialization allows the vector
	utilities to convert to/from GVariants in a GList correctly.

2012-10-29  José Alburquerque  <jaalburquerque@gmail.com>

	Resolver: Add the lookup_records_async() methods.

	* gio/src/resolver.{ccg,hg}: Add the methods (cancellable and
	non-cancellable versions) adding TODO's about wrapping the remaining
	related methods (lookup_records() and lookup_records_finish()).
	* tools/m4/convert_gio.m4: Add a necessary enum conversion.
	* glib/src/variant.hg: Typo discovered while adding above methods.

2012-10-29  José Alburquerque  <jaalburquerque@gmail.com>

	Add some TODO's.

	* gio/src/menuitem.hg:
	* gio/src/menumodel.hg: Add TODO's about possibly adding methods to
	the classes in these files (these TODO's were added a few days ago and
	being commited now).  Also add a TODO about an unwrapped signal in
	MenuModel.
	* glib/src/glib_extra_objects.defs: Add GArray to the list of objects
	to avoid a gmmproc documentation warning.

2012-10-29  Mark Vender  <markv743@yahoo.co.uk>

	Strip trailing whitespace.

	* gio/giomm/*.[h|cc]:
	* gio/src/*.[hg|ccg]:
	* glib/glibmm/*.[h|cc]:
	* glib/src/*.[hg|ccg]: Strip trailing whitespace. Bug #681072.

2012-10-25  José Alburquerque  <jaalburquerque@gmail.com>

	ContentType: Fix typo in the content_type_get_symbolic_icon() name.

	* gio/giomm/contenttype.cc: The name was misspelled because the 'o'
	and 'l' in 'symbolic' were interchanged.  The name is correctly
	spelled in the .h file so I guess it's safe to rename it in the .cc
	file for 2.34 and the master branch.

2012-10-24  José Alburquerque  <jaalburquerque@gmail.com>

	DBus::[Connection|Proxy]: Use ifdefs for the UnixFDList call*() methods.

	* gio/src/dbusconnection.hg:
	* gio/src/dbusproxy.hg: Place the call*() methods taking a UnixFDList
	parameter within '#ifdef G_OS_UNIX' ifdefs because the UnixFDList
	class exists only on the Unix platform.

2012-10-24  José Alburquerque  <jaalburquerque@gmail.com>

	Remove the use of g_type_init() because it has been deprecated.

	* glib/glibmm/wrap.cc:
	* tools/extra_defs_gen/generate_defs_gio.cc:
	* tools/extra_defs_gen/generate_defs_glib.cc: The docs for the
	function says that the GType system is initialized automatically now
	as of 2.36.
	* tools/extra_defs_gen/generate_extra_defs.cc: Whitespace correction.

2.34.0:

2012-10-21  Murray Cumming  <murrayc@murrayc.com>

        Add some documentation.

        * gio/src/dbusintrospection.hg:
        * gio/src/dbusserver.ccg:
        * gio/src/inputstream.hg:
        * gio/src/menu.hg:
        * gio/src/menuitem.hg:
        * gio/src/outputstream.hg:
        * glib/src/threads.hg: Deal with some TODOS, mostly
	adding documentation based on the C documentation.

2012-10-21  Murray Cumming  <murrayc@murrayc.com>

        Create only .tar.xz tarballs.

        * configure.ac: This is what ftp.gnome.org wants, so this avoids
	it doing any repackaging.

2.33.14:

2012-10-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Add 3-argument @newin.

	* tools/pm/DocsParser.pm: Convert "Since: 1.2.3" to "@newin{1,2,3}".
	Some C projects (goocanvas, grilo, gstreamer) use "Since: 1.2.3", instead of
	"Since: 1.2". The corresponding C++ projects need an ALIAS for this @newin
	in Doxyfile.in, like in mm-common/skeletonmm/doc/reference/Doxyfile.in.

2012-10-08  José Alburquerque  <jaalburquerque@gmail.com>

	FileInfo: set_attribute_strings(): Const correction.

	* gio/src/fileinfo.hg: Pass the attr_value vector as a const
	std::vector<>& and not just a std::vecto<>&.  I must not have been
	paying attention to what I was doing when wrapping this.

2012-10-07  Murray Cumming  <murrayc@murrayc.com>

        Require the latest mm-common.

        * configure.ac: This should avoid us creating tarballs without
	the mm-common improvements.

2012-10-06  Murray Cumming  <murrayc@murrayc.com>

        MenuItem: get_attribute(): Remove const overload / make it const.

        * gio/src/menuitem.hg: It does not make sense to have a return
	by value that is const.
        * gio/src/menuattributeiter.hg:
        * gio/src/menumodel.hg: Add TODOs for a future ABI break, so we can
	fix the same problem here.

2012-10-04  José Alburquerque  <jaalburquerque@gmail.com>

	MenuItem: Rename the get_attribute_value() methods to get_attribute().

	* gio/src/menuitem.hg: Rename the just added methods to just
	get_attribute() instead of get_attribute_value() to make the method
	name shorter.  Also deprecate the set_attribute_value() method and add
	a set_attribute() method to go with the newly renamed get_attribute()
	methods.

2012-10-03  José Alburquerque  <jaalburquerque@gmail.com>

	MountOperation: Wrap the "show-unmount-progesss" signal.

	* gio/src/mountoperation.hg:

2012-10-03  José Alburquerque  <jaalburquerque@gmail.com>

	MenuItem: Add the get_attribute_value() methods.

	* gio/src/menuitem.hg: Add the methods (const and non-const versions)
	and overloads without the VariantType parameter which can be null,
	wrapping the g_menu_item_get_attribute_value() function.
	(MenuItem): Add an overload for the "label" and "submenu" constructor
	without the label parameter which can be null.
	(create): Do the same for the create() method of the constructor
	above.
	* gio/src/menumodel.hg: Add an _IGNORE (completing a TODO).

2012-10-03  José Alburquerque  <jaalburquerque@gmail.com>

	IOStream: Add the splice_async() and splice_finish() methods.

	* gio/src/iostream.{ccg,hg}: Add cancellable and non-cancellable
	versions of the splice_async() method wrapping the corresponding C
	function.  Add the splice_finish() method wrapping the corresponding C
	function.  Also add the class docs.

2012-10-02  José Alburquerque  <jaalburquerque@gmail.com>

	FileInfo, FileAttributeMatcher: Wrap some unwrapped functions.

	* gio/src/fileinfo.hg (FileAttributeMatcher): Add the
	create_difference() and to_string() methods wrapping the
	g_file_attribute_matcher_subtract() and the
	g_file_attribute_matcher_to_string() functions.
	(FileInfo): Add the has_namespace(), [get|set]_attribute_status(),
	and [get|set]_attribute_strings() methods wrapping the
	g_file_info_has_namespace(), g_file_info_[get|set]_attribute_status(),
	and g_file_info_[get|set]_attribute_stringv() functions.
	* tools/m4/convert_gio.m4: Add an enum and FileAttributeMatcher
	conversions.

2012-10-02  José Alburquerque  <jaalburquerque@gmail.com>

	VariantIter: Correct an _IGNORE.

	* glib/src/variantiter.hg:

2012-10-01  José Alburquerque  <jaalburquerque@gmail.com>

	VariantIter: Add init() method.

	* glib/src/variantiter.hg: Wrap the g_variant_iter_init() function.
	* tools/m4/convert_glib.m4: Add a necessary conversion.
	* glib/src/varianttype.hg: Add an _IGNORE.

2012-10-01  Murray Cumming  <murrayc@murrayc-desktop>

	DBus::Proxy: Add call(), call_sync() and call_finish() for unix_fd_list.

	* gio/src/dbusproxy.[hg|ccg]: Add method overloads for the call methods
	that take a GUnixFDList. This is based on the similar methods in
	dbusconnection.[hg|ccg].

2012-10-01  Murray Cumming  <murrayc@murrayc.com>

	DBusConnection: Fix a typo in implementation.

	* gio/src/dbusconnection.ccg:
	g_dbus_connection_call_with_unix_fd_list() was mistyped. I wonder why
	the compiler did not complain.

2012-09-30  José Alburquerque  <jaalburquerque@gmail.com>

	ActionGroup: Add the query_action() methods.

	* tools/m4/base.m4:
	* tools/m4/convert_base.m4:
	* tools/m4/filelist.am:
	* tools/m4/initialize.m4:
	* tools/m4/initialize_base.m4:
	* tools/m4/initialize_gio.m4:
	* tools/m4/initialize_glib.m4:
	* tools/m4/initialize_glibmm.m4: Move the _INITIALIZE macros into
	their own files as is done for the _CONVERT macros so that some basic
	types that are common (like initializing a bool& from a gboolean) can
	be defined once and used in other circumstances.

	* gio/src/dbusconnection.hg: Move an _INITIALIZATION macro to the
	general files above (the gio initialize file).

	* gio/src/actiongroup.hg: Add the query_action() methods (the needed
	_INITIALIZATION macros are in the glib initialize file).

	* tools/pm/Output.pm (convert_args_cpp_to_c): Correct the indentation
	of the declarations of the C output variables and the setting of the
	C++ output parameters from the C variables for methods that use the
	output parameter feature of gmmproc.

2012-09-30  José Alburquerque  <jaalburquerque@gmail.com>

	RegEx: Add the get_has_cr_or_lf() method.

	* glib/src/regex.hg:

2012-09-25  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Make the output param feature work for single indirection.

	* tools/pm/Output.pm (convert_args_cpp_to_c): When inserting C object
	initializations for C objects that will be used to set output
	parameters, initialize the C object to a "default constructed" object
	of the same type if there is single indirection and not zero to ensure
	successful compilation in that case.
	* tools/m4/method.m4: Whitespace correction of the body of generated
	non-static methods.  This ensures each statement is on its own line
	and that there are no blank lines to make methods as compact as
	possible.

	Bug #662371.

2.33.13:

2012-09-25  Murray Cumming  <murrayc@murrayc.com>

	gio_docs.xml: Replace &colon; with :.

        * gio/src/gio_docs.xml: This fixes the build.

2012-09-24  Murray Cumming  <murrayc@murrayc.com>

        Update the *_methods defs files.

        * gio/src/gio_methods.defs:
        * glib/src/glib_functions.defs:
        * glib/src/gobject_functions.defs: Updated with tools/gen_scripts/

2012-09-24  Murray Cumming  <murrayc@murrayc.com>

        Update the docs XML files.

        * gio/src/gio_docs.xml:
        * glib/src/glib_docs.xml: Updated with tools/gen_scripts/

2012-09-24  José Alburquerque  <jaalburquerque@gmail.com>

	Converter[Input|Output]Stream: Correct whitespace typos.

	* gio/src/converterinputstream.hg:
	* gio/src/converteroutputstream.hg:

2012-09-24  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the Converter[Input|Output]Stream classes.

	* gio/src/converterinputstream.{ccg,hg}:
	* gio/src/converteroutputstream.{ccg,hg}:
	* gio/src/filelist.am: Add the new sources adding the constructors,
	create methods, the methods and properties of the new classes.  Add
	the sources to the build.
	* gio/src/gio_signals.defs:
	* tools/extra_defs_gen/generate_defs_gio.cc: Add the two new GTypes to
	the extra defs generation utility and regenerate the signal and
	property defs file to get the properties of the new classes.
	* tools/m4/convert_gio.m4: Add the necessary Converter conversions.

2012-09-20  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the PollableOutputStream interface.

	* gio/src/pollableoutputstream.{ccg,hg}:
	* gio/src/filelist.am: Add the sources adding the new interface
	methods and virtual functions and include the sources in the build.
	* gio/src/gio_extra_objects.defs: Add the new object in this file to
	avoid a gmmproc documentation warning.
	* gio/src/gio_vfuncs.defs: Add the new interface virtual functions.

2012-09-20  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the PollableInputStream interface.

	* gio/src/pollableinputstream.{ccg,hg}:
	* gio/src/filelist.am: Add the sources adding the new interface
	methods and virtual functions and include the sources in the build.
	* gio/src/gio_extra_objects.defs: Mention the new object in this file
	to avoid the gmmproc documentation warnings.
	* gio/src/gio_vfuncs.defs: Add the new interface virtual functions but
	alphabetize the existing entries by class name.

2012-09-19  José Alburquerque  <jaalburquerque@gmail.com>

	_WRAP_VFUNC: Prepend @throws clause to vfuncs that throw errors.

	* tools/pm/Output.pm (output_wrap_vfunc_h): Prepend a Doxygen @throws
	clause to the declaration of virtual functions that throw Glib::Error.

2012-09-18  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::Connection: Add the call_[finish|sync]() with UnixFDLists.

	* gio/src/dbusconnection.{hg,ccg}: Add the methods using gmmproc's
	output parameter functionality.  Also add the cancellable and
	non-cancellable asynchronous call() methods that were #ifdef'ed out
	because of the missing call_finish() method.
	* tools/m4/convert_gio.m4: Add a necessary enum conversion.

	Bug #662371.

2012-09-18  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _WRAP_METHOD: Allow setting parameters from C output params.

	* tools/m4/convert_base.m4 (_INITIALIZATION): Insert newlines between
	a possible series of statements that has been specified as an
	initialization.  For example, the declaration, assignment and the
	g_free() call would each be on a seperate line in the following (from
	datainputstream.hg):

	_INITIALIZATION(`std::string&',`return-char*',`char* tmp = $4; $3 = tmp; g_free(tmp)')

	* tools/pm/Function.pm (FLAG_PARAM_OPTIONAL):
	(FLAG_PARAM_OUTPUT): Added new constant flags representing if a
	parameter is optional or if it is an output parameter.
	(EXPORT_OK): Exported the above flags so they can be used in other
	modules.
	(param_optional): Renamed to param_flags.  Redesigned it to store a
	possible combination of both flags above and not just if a parameter
	is optional.
	(parse_param): Modified the subroutine to look for an '>>' in a
	possible '{.*}' following the current parameter name which would
	signal that the parameter is an output parameter.  The syntax for
	signaling if a parameter is optional, is an output parameter or should
	be mapped to a specific C parameter would be:

	cpp_param_name{c_param_name>>?}

	c_param_name means that the C++ parameter should be mapped to the C
	parameter no matter the parameter order of either.  The '>>' means
	that the parameter should be set from the C parameter because the C
	parameter is an output parameter.   Finally, the '?' means that the
	parameter is optional thus overloads should be generated without that
	paramter.  All three components within the {} are optional.  A '.' may
	be used instead of the c parameter name if the C++ parameter name is
	the same as the C parameter name.

	(possible_args_list): Modified to use the param_flags variable.

	* tools/pm/Output.pm (output_wrap_vfunc_h): Modified to receive the
	new return type from convert_args_cpp_to_c() (see below).
	(output_wrap_meth): Modified to receive the new return from
	convert_args_cpp_to_c (see below) and pass them to the _METHOD() and
	_STATIC_METHOD() macros.
	(convert_args_cpp_to_c): Modified to generate a
	list of C declarations for any possible C output parameters and to
	generate a list of _INITIALIZE() macros to initialize the C++
	parameters from the C output parameters.  The function returns an array
	of three strings (the convert macros, the possible C declarations and
	the _INITIALIZE() macros in that order).

	* tools/pm/WrapParser.pm (string_split_commas): Modified the
	subroutine to ignore '>>' if they are in '{}' (so that the '>>' can
	signal that a parameter should be set from a C output parameter.

	* tools/m4/method.m4 (_METHOD, _STATIC_METHOD): Rewrote to accept
	C declarations of possible C output parameters and _INITIALIZE macros
	which would initialize the appropriate C++ parameters from the output
	variables and insert them appropriately in the generated code.

	Bug #662371.

2012-09-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Improve the use of _IGNORE. Don't use gio_others.defs.

	* gio/src/applicationcommandline.hg: Change a _CONVERSION (due to the
	exclusion of gio_others.defs).
	* gio/src/dbusintrospection.hg:
	* gio/src/fileinfo.hg: Add _IGNORE.
	* gio/src/fileiostream.hg:
	* gio/src/fileoutputstream.hg: Correct an _IGNORE.
	* gio/src/gio.defs: Don't include gio_others.defs. One of its entries is
	wrong and all of them also exist (in correct form) in gio_methods.defs or
	gio_signals.defs.
	* glib/src/convert.hg:
	* glib/src/regex.hg: Add _IGNORE.
	* glib/src/date.hg:
	* glib/src/fileutils.hg:
	* glib/src/markup.hg:
	* glib/src/optionentry.hg:
	* glib/src/shell.hg:
	* glib/src/spawn.hg:
	* glib/src/thread.hg:
	* glib/src/threads.hg:
	* glib/src/unicode.hg:
	* glib/src/uriutils.hg: Remove _IGNORE(g_iconv).
	* glib/src/variantiter.hg: Add an _IGNORE. Remove _IGNORE(g_variant_iter_new).

2012-09-18  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Improve the search for unwrapped methods.

	* tools/pm/GtkDefs.pm: lookup_method_set_weak_mark(): New function.
	get_unwrapped(): Correct the search when methods from more than one class
	have been wrapped.
	GtkDefs::Function::new(): Take into account that a method (g_iconv) may be
	nameless. After this change the patch of g_iconv in glib_functions.defs.patch
	is probably unnecessary but harmless.
	* tools/pm/WrapParser.pm: on_wrap_method_docs_only(), on_wrap_ctor():
	Call GtkDefs::lookup_method_set_weak_mark().
	on_wrap_method(): Call GtkDefs::lookup_method_set_weak_mark() if the method
	is static.

2012-09-14  José Alburquerque  <jaalburquerque@gmail.com>

	_CLASS_GOBJECT: Allow classes to have custom wrap() functions.

	* tools/m4/class_gobject.m4 (_CUSTOM_WRAP_FUNCTION): Add this new
	macro which can be used in _CLASS_GOBJECT classes so that if they want
	they can write their own implementation of their Glib::wrap()
	function.  This is useful for modules such as gstreamermm that want to
	keep certain classes (like the plug-ins) from being registered on
	startup but then do a one time registration of the wrap_new() function
	in the Glib::wrap() function before calling Glib::wrap_auto() which
	can then find the wrap_new() function if necessary.

	Bug #684006.

2012-09-14  José Alburquerque  <jaalburquerque@gmail.com>

	generate_wrap_init.pl: Allow classes in files to not be registered.

	* tools/m4/class_shared.m4: Add a new _NO_WRAP_INIT_REGISTRATION macro
	used in the generate_wrap_init.pl script to recognize a file whose
	classes should not be registered by wrap_init().
	* tools/generate_wrap_init.pl.in (exclude_from_wrap_init): Include a
	hash map to determine if the classes in a file should not be
	registered with the wrapping system by the wrap_init() function.
	(main): Modified to see if the new _NO_WRAP_INIT_REGISTRATION macro is
	used in a file and store a true/false value in the hash map for the
	specified file.  Also, modified to not include the includes, the
	*_get_type() function declarations, the wrap_new() function
	declarations and the *::get_type() invocations of the classes in the
	file marked for no registration.

	Bug #684006.

2012-09-16  Murray Cumming  <murrayc@murrayc.com>

	File: Add remove_async() and remove_finish().

        * gio/src/file.[hg|ccg]: As for the sync version, we
	rename delete to remove, because the sync vesion would be
	delete(), which uses a C++ keyword.

2012-09-15  Murray Cumming  <murrayc@murrayc.com>

        Simplified lots of code by using the {?} _WRAP_METHOD() syntax.

        * gio/src/application.[hg|ccg]:
        * gio/src/bufferedinputstream.[hg|ccg]:
        * gio/src/datainputstream.[hg|ccg]:
        * gio/src/dataoutputstream.[hg|ccg]:
        * gio/src/dbusconnection.[hg|ccg]:
        * gio/src/fileenumerator.[hg|ccg]:
        * gio/src/initable.[hg|ccg]:
        * gio/src/inputstream.[hg|ccg]:
        * gio/src/iostream.[hg|ccg]:
        * gio/src/outputstream.[hg|ccg]:
        * gio/src/resolver.[hg|ccg]:
        * gio/src/seekable.[hg|ccg]:
        * gio/src/socket.[hg|ccg]:
        * gio/src/socketaddressenumerator.[hg|ccg]:
        * gio/src/socketclient.[hg|ccg]: This relatively new gmmproc syntax lets
	us avoid the manual implementations and declarations just to have
	overloads without the Cancellable parameters.
        * gio/src/unixconnection.hg: This had no method overloads without
	Cancellable parameters but now it does.

2012-09-15  Murray Cumming  <murrayc@murrayc.com>

	Gio::File: Correct the commit again

        * gio/src/file.[hg|ccg]: make_directory() was missing a {?}.

2012-09-15  Murray Cumming  <murrayc@murrayc.com>

	Gio::File: Correct the previous commit.

        * gio/src/file.[hg|ccg]: Do not use {?} with query_file_type()
	because it cannot cope with also having a default parameter value
	on an earlier parameter.

2012-09-15  Murray Cumming  <murrayc@murrayc.com>

        Gio::File: Simplify the code by using {?} in _WRAP_METHOD()

        * gio/src/file.[hg|ccg]: This relatively new gmmproc syntax lets
	us avoid the manual implementations and declarations just to have
	overloads without the Cancellable parameters.

2012-09-15  Murray Cumming  <murrayc@murrayc.com>

	AppLaunchContext: Add setenv(), unsetenv() and get_environment().

        * gio/src/applaunchcontext.hg: Wrap these C functions.

2012-09-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Use std::time_t instead of ::time_t.

	* build/c_std.m4:
	* glib/src/date.[hg|ccg]: Use std::time_t instead of ::time_t. Only
	std::time_t is required to be declared in <ctime>, which is recommended
	instead of <time.h> in C++ programs.

2012-09-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Use std::size_t and std::ptrdiff_t.

	* glib/glibmm/arrayhandle.h:
	* glib/glibmm/containers.h:
	* glib/glibmm/listhandle.h:
	* glib/glibmm/slisthandle.h:
	* glib/glibmm/vectorutils.h: Use std::size_t and std::ptrdiff_t instead
	of ::size_t and ::ptrdiff_t. Only the std versions are required to be
	declared in <cstddef>.
	* examples/network/resolver.cc:
	* glib/glibmm/containerhandle_shared.h:
	* glib/glibmm/helperlist.h:
	* glib/glibmm/main.h:
	* glib/glibmm/vectorutils.cc: Use std::size_t instead of ::size_t.
	* glib/src/convert.hg: Use std::size_t instead of ::size_t in a comment.
	* glib/glibmm/property.cc:
	* glib/glibmm/ustring.h: Use std::ptrdiff_t instead of ::ptrdiff_t.

2.33.12:

2012-09-07  Murray Cumming  <murrayc@murrayc.com>

	Socket: Remove create_source() again.

	* gio/src/socket.hg:
	* tools/m4/convert_glib.m4: Comment out
	create_source() because Glib::Source (in main.h)
	does not have a Glib::wrap(). Maybe it should.

2012-09-07  Murray Cumming  <murrayc@murrayc.com>

	Socket. Add several methods.

	* gio/src/socket.hg: Added create_source(),
	get_available_bytes(), get_ttl(), set_ttl(),
	get_broadcast(), set_broadcast(),
	get_multicast_loopback(), set_multicast_loopback(),
	get_multicast_ttl(), set_multicast_ttl(),
	join_multicast_group(), leave_multicast_group(),
	and properties.
	* tools/m4/convert_glib.m4: Added a conversion for
	GIOSource.

2012-09-07  Murray Cumming  <murrayc@murrayc.com>

	Volume: Add get_sort_key().

	* gio/src/volume.hg: Wrap g_volume_get_sort_key().

2012-09-07  Murray Cumming  <murrayc@murrayc.com>

	ContentType: get_icon(): Fix a refcount error.

	* gio/giomm/contenttype.cc: get_icon(): Take a reference.

2012-09-07  Murray Cumming  <murrayc@murrayc.com>

	MenuItem: Add get_link().

	* gio/src/menuitem.hg: Wrap g_menu_item_get_link().

2012-09-07  Murray Cumming  <murrayc@murrayc.com>

	Gio: DBusAuthObserver: Add allow_mechanism().

	* gio/src/dbusauthobserver.hg: Add the allow_mechanism()
	method and signal.

2012-09-07  Murray Cumming  <murrayc@murrayc.com>

	Application: Add get_dbus_*() methods.

	* gio/src/application.hg: Add get_dbus_connection()
	and get_dbus_object_path().
	* tools/m4/convert_gio.m4: Added a necessary conversion.

2012-09-06  Murray Cumming  <murrayc@murrayc.com>

	Tell the documentation generator about GMenu.

	* gio/src/gio_extra_objects.defs: Add GMenu to avoid
	a warning from gmmproc.

2012-09-06  Murray Cumming  <murrayc@murrayc.com>

	Regenerated some glib .defs.

	* glib/src/glib_docs.xml:
	* glib/src/glib_enums.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs:

2012-09-06  Murray Cumming  <murrayc@murrayc.com>

	Regenerate other gio .defs.

	* gio/src/gio_docs.xml:
	* gio/src/gio_signals.defs: Regenerated.

2012-09-06  Murray Cumming  <murrayc@murrayc.com>

	Add get_symbolic_icon() methods.

	* gio/src/gio_methods.defs: Regenerated.
	* gio/giomm/contenttype.[h|cc]: Add get_symbolic_icon().
	* gio/src/drive.hg: Add get_symbolic_icon().
	* gio/src/fileinfo.hg: Add get_symbolic_icon().
	* gio/src/mount.hg: Add get_symbolic_icon().
	* gio/src/volume.hg: Add get_symbolic_icon().

2012-09-06  José Alburquerque  <jaalburquerque@gmail.com>

	Converter: Correct the "convert" virtual function.

	* gio/src/converter.hg (convert_vfunc): Have the virtual function
	throw the final GError parameter of the C function instead of
	including it in the C++ parameter list.  This is done by using the
	recently added _WRAP_VFUNC functionality.

2012-09-05  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: _WRAP_VFUNC: Handle virtual functions that throw GErrors.

	* tools/pm/WrapParser.pm (on_wrap_vfunc): Modified so that _WRAP_VFUNC
	recognizes an optional "errthrow" parameter as is done in
	_WRAP_METHOD.
	(output_wrap_vfunc): Modified to tag the located virtual function
	definition as one that will be wrapped by a C++ method that throws the
	final C GError parameter.
	* tools/pm/Output.pm (output_wrap_vfunc_cc): Modified to pass an
	optional "errthrow" string to _VFUNC_CC and _VFUNC_PCC so that they
	can include the proper code for the getting and throwing of the
	GError.  Also modified to pass the "errthrow" string to the
	convert_args_cpp_to_c() so that it process the C++ method as one
	throwing a Glib::Error.
	(convert_args_c_to_cpp): Modified to ignore the final GError if the
	C function has been marked as one that will be wrapped by a C++ method
	throwing the final C GError parameter.

	* tools/m4/vfunc.m4 (_VFUNC_PCC): Modified to recognize a final
	"errthrow" string parameter in which case code is inserted to declare
	a local parameter in which to store the C GError and then throw
	it as a Glib::Error if an error was received when the underlying C
	function is called in the virtual function callback.
	(_VFUNC_CC): Also modified to recognize a final "errthrow" string
	parameter inserting code to store and then throw a possibly obtained
	GError as a Glib::Error in the C++ virtual function when calling the
	underlying C virtual function.

	Bug #683460.

2012-09-04  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the ZlibDecompressor and the CharsetConverter classes.

	* gio/src/charsetconverter.{ccg,hg}:
	* gio/src/zlibdecompressor.{ccg,hg}:
	* gio/src/filelist.am: Add the new sources wrapping the C functions
	and properties in the corresponding classes.  Include the sources in
	the build.
	* gio/src/gio_signals.defs:
	* tools/extra_defs_gen/generate_defs_gio.cc: Add the GTypes for the C
	types in the property and signal generation utility and regenerate the
	defs file so the properties of the new classes can be wrapped.

	* gio/src/zlibcompressor.hg: Make the constructor protected and not
	private (typo).

2012-09-03  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the ZlibCompressor class.

	* gio/src/zlibcompressor.{ccg,hg}:
	* gio/src/filelist.am: Add the ZlibCompressor class which derives from
	the Converter interface wrapping the C functions and properties and
	include the sources in the build.
	* tools/extra_defs_gen/generate_defs_gio.cc:
	* gio/src/gio_signals.defs: Add the GZlibCompressor GType to the
	properties and signals generation utility and regenerate the defs
	file.
	* tools/m4/convert_gio.m4: Add the new enum conversion.

2012-09-02  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the Converter interface.

	* gio/src/converter.{ccg,hg}: Add the source files wrapping the C
	functions as methods and wrapping the virtual functions.
	* gio/src/filelist.am: Include the sources in the build.
	* gio/src/gio_vfuncs.defs: Add the necessary virtual function
	definitions so the virtual functions can be wrapped.
	* tools/m4/convert_gio.m4: Add the new enum and flag conversions.

2012-09-01  Murray Cumming  <murrayc@murrayc.com>

        Avoid warnings from documenation generation.

        * gio/src/gio_docs.xml: Replace &colon; with :

2012-09-01  Murray Cumming  <murrayc@murrayc.com>

	Gio::AppInfo: Wrap some new methods.

        * gio/src/appinfo.hg: Add get_display_name(),
	set_as_last_used_for_type() and get_supported_types().

2012-09-01  Murray Cumming  <murrayc@murrayc.com>

        Regenerate .defs.

        * gio/src/gio_docs.xml:
        * gio/src/gio_methods.defs:
        * gio/src/gio_signals.defs:
        * glib/src/glib_docs.xml:
        * glib/src/glib_enums.defs:
        * glib/src/glib_functions.defs:
        * glib/src/gobject_functions.defs: Regenerate using tools/gen_scripts/

2012-09-01  Murray Cumming  <murrayc@murrayc.com>

	Gio: ProxyAddress: Wrap some new methods.

	* gio/src/proxyaddress.hg: Add get_destination_protocol()
	and get_uri().

2012-09-01  Murray Cumming  <murrayc@murrayc.com>

	Gio: Menu, MenuModel: Wrap some new methods.

	* gio/src/menu.hg: Add append_section().
	* gio/src/menumodel.hg: Add is_mutable() and get_n_items().

2.33.4:

2012-08-01  Murray Cumming  <murrayc@murrayc.com>

	gio_extra_objects: Mention GMenuItem.

	* gio/src/gio_extra_objects.defs:
	This helps the documentation generator.

2012-07-28  Krzesimir Nowak  <qdlacz@gmail.com>

	Add a test checking whether floating variants are always sunk.

	* tests/glibmm_variant/main.cc: New test.
	Bug #680407

2012-07-28  Krzesimir Nowak  <qdlacz@gmail.com>

	Implement custom cast constructor for VariantBase.

	* glib/src/variant.hg:
	* glib/src/variant.ccg: Use _CUSTOM_CTOR_CAST macro and implement
	cast constructor.  This is needed, because we always want to sink
	a GVariant.
	Bug #680407

2012-07-28  Krzesimir Nowak  <qdlacz@gmail.com>

	Add _CUSTOM_CTOR_CAST macro for _CLASS_OPAQUE_COPYABLE.

	* tools/m4/class_opaque_copyable.m4: New macro.
	Bug #680407

2012-07-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Glib::Threads:[Rec]Mutex: Add wrap() functions.

	* glib/src/threads.[hg|ccg]: Add Mutex* wrap(GMutex*) and
	RecMutex* wrap(GRecMutex*). Bug #483790.

2012-07-22  Krzesimir Nowak  <qdlacz@gmail.com>

	Properly wrap g_key_file_load_from_dirs().

	* glib/src/keyfile.hg:
	* glib/src/keyfile.ccg: The just deprecated wrapper was
	incorrectly passing an array wrapper for full_path parameter when
	it should pass a std::string&, because full_path is an output
	parameter. Added handwritten wrapper passing proper parameter.

2012-07-22  Krzesimir Nowak  <qdlacz@gmail.com>

	Wrap g_variant_type_peek_string() by hand.

	* glib/src/gvarianttype.hg:
	* glib/src/gvarianttype.ccg: The wrapped function does not return
	a C string (it is not NULL terminated), so std::string(str, size)
	constructor needs to be used. I wonder how glibmm_variant test
	passed through all distchecks so far...

2012-07-16  Murray Cumming  <murrayc@murrayc.com>

	Show get_type() in the API documentation.

	* tools/m4/class_boxedtype.m4:
	* tools/m4/class_boxedtype_static.m4:
	* tools/m4/class_gobject.m4:
	* tools/m4/class_interface.m4: Move the static get_type()
	functions out of the ifdef so that doxygen can see them,
	because they are sometimes needed, for instance when
	implementing a custom container.
	Bug #670212 (Mark Vender).

2012-07-10  Krzesimir Nowak  <qdlacz@gmail.com>

	Glib::Checksum: Fix a typo.

	* glib/src/checksum.hg: Should be *_SHOULD_*, not *_SHOUD_*.

2.33.3:

2012-07-10  Murray Cumming  <murrayc@murrayc.com>

	Gio::InetSocketAddress: Added get_flowinfo() and get_scope_id()

	* gio/src/inetsocketaddress.hg: And add the properties.

2012-07-10  Murray Cumming  <murrayc@murrayc.com>

	Gio::OutputStream: Add write_bytes().

	* tools/m4/convert_glib.m4:
	* gio/src/outputstream.[hg|ccg]: Add write_bytes(), write_bytes_async(),
	and write_bytes_finish().

2012-07-10  Murray Cumming  <murrayc@murrayc.com>

	Added Glib::Bytes and Gio::InputStream::read_bytes().

	* glib/src/bytes.[hg|ccg]:
	* glib/src/filelist.am:
	* tools/m4/convert_glib.m4: Added a simple GBytes wrapper.
	* gio/src/inputstream.[hg|ccg]: Added read_bytes(), read_bytes_async()
	and read_bytes_finish() using the new Glib::Bytes type.

2012-07-10  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus::Connection: Add get_last_serial().

	* gio/src/dbusconnection.hg: Wrap g_dbus_connection_get_last_serial().

2012-07-02  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	generate_wrap_init.pl: Add _INCLUDE_IN_WRAP_INIT, _GMMPROC_WRAP_CONDITIONALLY.

	* tools/generate_wrap_init.pl.in: Handle _INCLUDE_IN_WRAP_INIT and
	_GMMPROC_WRAP_CONDITIONALLY.
	* tools/m4/class_shared.m4: Add _INCLUDE_IN_WRAP_INIT and
	_GMMPROC_WRAP_CONDITIONALLY. Bug #678883.

2012-07-01  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Update .gitignore.

	* .gitignore: Add /glib/glibmm/threads.[h|cc]. Update /examples/dbus/*.

2.33.2:

2012-06-19  Murray Cumming  <murrayc@murrayc.com>

	gio_signals.defs: Regenerate.

	* gio/src/gio_signals.defs: Regenerate with gen_scripts.

2012-06-19  Murray Cumming  <murrayc@murrayc.com>

	gen_scripts: Correct some comments/documentation.

	* tools/gen_scripts/gio_generate_extra_defs.sh:
	* tools/gen_scripts/glib_generate_extra_defs.sh:
	These do not need JHBUILD_SOURCES to be defined.

2012-06-13  Murray Cumming  <murrayc@murrayc.com>

	Updated the *docs.xml files.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Used the gen_scripts.

2012-06-13  Murray Cumming  <murrayc@murrayc.com>

	Updated the methods .defs.

	* gio/src/gio_methods.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs: Used the gen_scripts.

2012-06-13  Murray Cumming  <murrayc@murrayc.com>

	Updated the enums .defs.

	* gio/src/gio_enums.defs:
	* glib/src/glib_enums.defs: Used the gen_scripts.

2012-06-13  Murray Cumming  <murrayc@murrayc.com>

	Simplify the gen_scripts slightly.

	* tools/gen_scripts/gio_generate_docs.sh:
	* tools/gen_scripts/gio_generate_enums.sh:
	* tools/gen_scripts/gio_generate_methods.sh:
	* tools/gen_scripts/glib_generate_docs.sh:
	* tools/gen_scripts/glib_generate_enums.sh:
	* tools/gen_scripts/glib_generate_methods.sh:
	Do not require changes to PATH.

2.33.1 (unstable):

2012-06-08  Michał Wróbel  <michal.wrobel@flytronic.pl>

	Thread::RecMutex: Don't initialize this as a GStaticMutex.

	The previous code (removed here) depended on an implementation
	detail of GStaticRecMutex, which was changed in this glib commit:
	http://git.gnome.org/browse/glib/commit/?id=2b281e40f32b7916d856dcc95e6f8fe625fcff03

	This change avoids a deadlock with that version of glib.
	Note that Thread::* is deprecated anyway, which is lucky because we do not
	know for sure that this fix is enough.
	Bug #677291

2012-06-04  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Glib::add_exception_handler(): Fix misplaced endif.

	* glib/glibmm/exceptionhandler.h: Fix a misplaced endif, which has made
	Doxygen exclude add_exception_handler() from the documentation.

2012-05-28  Murray Cumming  <murrayc@murrayc.com>

	Application: Pass 0 (NULL) rather than "" to GApplication.

	* gio/src/application.ccg: It is annoying that GApplication (and other
	C code) distinguishes, of course.

2012-05-27  Murray Cumming  <murrayc@murrayc.com>

	Gio::Application: Allow the application ID to be empty.

	* configure.ac: Depend on the latest unstable glib release (2.33.1).
	* gio/src/application.hg: constructor, create(): Add a default
	(empty string) parameter for the application ID, because this may
	now be empty if you do not need the full GApplication functionality.

2012-04-21  Kalev Lember  <kalevlember@gmail.com>

	Gio: Start wrapping GResource.

	* gio/src/resource.[hg|ccg]: Add Gio::ResourceError so that the
	resource handling functions in gtkmm could use it. The rest of the
	GResource API is unwrapped.
	* gio/src/filelist.am: List new resource.hg file.
	Bug #674545.

2012-04-17  Krzesimir Nowak  <qdlacz@gmail.com>

	Miscutils: Fix typos.

	* glib/glibmm/miscutils.cc: Return early from get_system_data_dirs()
	and get_system_config_dirs() when C function returns NULL.

2.32.0:

2012-04-05  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Add macro _CUSTOM_CTOR_CAST in _CLASS_BOXEDTYPE.

	* tools/m4/class_boxedtype.m4: Add macro _CUSTOM_CTOR_CAST.
	Bug #511136, comment 20.

2012-04-10  Chun-wei Fan  <fanc999@src.gnome.org>

	Update Visual Studio projects

	* Fix Visual C++ projects for glibmm and giomm as numerous
	sources have been added for the addition of APIs so that
	these libraries can be properly built

2012-04-04  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Glib::Dispatcher: Don't send messages to a deleted Dispatcher.

	* glib/glibmm/dispatcher.h: Add missing usage rules.
	* glib/glibmm/dispatcher.cc: Avoid delivering messages to deleted Dispatchers.
	Don't block message delivery while a second main loop is running.
	Bug #651942.

2012-04-04  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Make SignalTimeout,SignalIdle::connect_once() more thread safe.

	* glib/glibmm/main.cc: Call SourceConnectionNode::install() before
	g_source_attach(). Suggested by Chris Vine. Bug #396963 comments 15-18.

2012-04-03  Murray Cumming  <murrayc@murrayc.com>

	Some improvements to the documentation in the previous commit.

	* glib/glibmm/property.h:

2012-04-03  Mark Vender  <markv743@yahoo.co.uk>

	Document Glib::Property and Glib::PropertyBase

	* glib/glibmm/property.h:
	Bug #673291

2012-04-03  Murray Cumming  <murrayc@murrayc.com>

	Slight rewrite of the documenation in the previous commit.

	* tools/m4/class_interface.m4:

2012-04-03  Mark Vender  <markv743@yahoo.co.uk>

	gmmproc: Generate the documentation of default constructors of interface classes.

	Bug #673213

2012-04-03  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Make SignalTimeout,SignalIdle::connect_once() more thread safe.

	* glib/glibmm/main.cc: Don't create a sigc::connection in the connect_once()
	methods. Bug #396963.

2012-03-30  Murray Cumming  <murrayc@murrayc.com>

	Regenerate .defs files.

	* gio/src/gio_docs.xml:
	* gio/src/gio_enums.defs:
	* gio/src/gio_signals.defs:
	* glib/src/glib_docs.xml:
	* glib/src/glib_enums.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs: Regenereated using
	the scripts.

2.31.22:

2012-03-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: _WRAP_SIGNAL(): Mark deprecated signals in the _p.h and .cc files.

	* tools/pm/WrapParser.pm: output_wrap_signal(): Pass $deprecated to
	output_wrap_default_signal_handler_[h|cc]().
	* tools/pm/Output.pm: output_wrap_default_signal_handler_[h|cc]():
	Take a 'deprecated' bool parameter and pass it to _SIGNAL_P[H|CC]().
	* tools/m4/signal.m4: _SIGNAL_PROXY(): Add deprecation info to the .cc file.
	_SIGNAL_PH(), _SIGNAL_PCC(): Take a 'deprecated' bool parameter.

2012-03-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: _WRAP_PROPERTY(): Fix mixed-up deprecation and documentation.

	* tools/pm/Output.pm: Add $deprecated in the first call to _PROPERTY_PROXY().
	* tools/m4/property.m4: Correct comments in .cc files by swapping #endif's
	in _PROPERTY_PROXY().

2012-03-25  Murray Cumming  <murrayc@murrayc.com>

	Gio: Move AppLaunchContext into its own header file.

	* gio/src/appinfo.[hg|ccg]: Move the AppLaunchContext class into:
	* gio/src/applaunchcontext.[hg|ccg]:
	This helps gmmproc, for instance when deriving from it for
	Gdk::AppLaunchContext.

2012-03-25  José Alburquerque  <jaalburquerque@gmail.com>

	Action, DBusObject: Ensure vfunc callbacks return valid memory.

	* gio/src/action.hg (get_name_vfunc_callback):
	* gio/src/dbusobject.hg (get_object_path_vfunc_callback):
	(get_interfaces_vfunc_callback): Ensure that the return values of the
	virtual functions of these callbacks are properly copied by correcting
	the appropriate conversions so that the callbacks don't return empty
	memory.

2012-03-23  Murray Cumming  <murrayc@murrayc.com>

	ActionGroup: list_actions_vfunc(): Do not return freed memory.

	* gio/src/actiongroup.hg: list_actions vfunc: Correct the conversion,
	doing a deep copy of the array of strings.

2012-03-23  Murray Cumming  <murrayc@murrayc.com>

	gmmproc: _WRAP_SIGNAL(): Allow signals to be deprecated.

	* tools/pm/WrapParser.pm: on_wrap_signal(): Parse an optional
    	deprecated "the explanation" parameter.
	* tools/pm/Output.pm: output_wrap_signal_decl(): Take a deprecated bool
    	and deprecated_docs, passing them to the m4 macro.
	* tools/m4/signal.m4: _SIGNAL_PROXY(): Take a deprecated bool parameter
	and use it to ifdef-out the signal declaration.
	However, we cannot put the ifdef around the default signal handler,
	because that would break ABI.

2012-03-22  Murray Cumming  <murrayc@murrayc.com>

	Gio: MenuItem: set_action_and_target(): Add one without the variant.

	* gio/src/menuitem.[hg|ccg]: set_action_and_target(): Rename to
	set_action() and add a set_action() with just the action name,
	because the GVariant* is optional.

2012-03-22  Murray Cumming  <murrayc@murrayc.com>

	Gio: SimpleAction: Add a parameter that takes no VariantType.

	* gio/src/simpleaction.[hg|ccg]: The GVariantType* is optional.

2012-03-22  Murray Cumming  <murrayc@murrayc.com>

	Gio: Menu, MenuItem: Add default parameter values.

	* gio/src/menu.hg:
	* gio/src/menuitem.hg: Let the detailed_description parameters be
	empty.

2012-03-22  Murray Cumming  <murrayc@murrayc.com>

	Gio: Add Menu and MenuItem.

	* tools/extra_defs_gen/generate_defs_gio.cc: Mention the new GTypes here,
	though they do not seem to have any properties or signals.

	* gio/src/filelist.am:
	* gio/src/menu.[hg|ccg]:
	* gio/src/menuitem.[hg|ccg]: Add these classes, as a way to create
	the Gio::MenuModel for Gtk::Application::set_app_menu() and set_menubar().
	* tools/m4/convert_gio.m4: Add MenuItem conversion.
	* gio/giomm.h: Mention the new headers here.

2012-03-22  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Dispatcher examples: Use Glib::signal_idle().connect_once().

	* examples/thread/dispatcher.cc: Use Glib::signal_idle().connect_once().
	* examples/thread/dispatcher2.cc: Use Glib::signal_idle().connect_once().
	Rename class Dispatcher to ThreadDispatcher. Bug #396963

2012-03-15  Murray Cumming  <murrayc@murrayc.com>

	Fix some warnings found by clang++.

	* glib/glibmm/class.cc: registered_derived_type(): Use (void*)0 instead
	of NULL to avoid a missing sentintel warning.

2012-03-16  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::DBus::Object: Add the signals of the interface.

	* gio/src/dbusobject.hg: Add the signal_interface_[added|removed]()
	signals of the interface.
	* tools/extra_defs_gen/generate_defs_gio.cc: Add the GDBusObject GType
	to the signal and properties generation utility.
	* gio/src/gio_signals.defs: Regenerate the defs file to get the
	signals of the interface.
	* tools/m4/convert_gio.m4: Add a necessary conversion for wrapping the
	signals.

	* gio/src/dbusinterface.hg: Whitespace corrections.

2012-03-15  José Alburquerque  <jaalburquerque@gmail.com>

	DateTime: Correct the declaration of the TimeVal struct.

	* glib/src/datetime.hg: It was declared as a class but is in fact a
	struct.  I also built the jhbuild c++ sources (as gtkmm was) using
	clang++ out of curiosity which discovered this.

2012-03-14  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::DBus: Add the Interface and Object interfaces.

	* gio/src/dbusinterface.{ccg,hg}:
	* gio/src/dbusobject.{ccg,hg}:
	* gio/src/filelist.am: Add the new sources and include them in the
	list of files to be built.
	* gio/src/gio_vfuncs.defs: Add the virtual function definitions for
	the new interfaces.
	* tools/m4/convert_gio.m4: Add conversions for the new interfaces.

2012-03-12  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Glib::Threads::Private, Glib::Dispatcher: Delete Glib::DispatchNotifier.

	* glib/src/thread.hg: Add missing @deprecated.
	* glib/src/threads.hg: Add Private::replace(). Add documentation to Private.
	* glib/glibmm/dispatcher.cc: Use Private::replace() instead of set().
	Bug #671587.

2.31.20:

2012-03-03  Murray Cumming  <murrayc@murrayc.com>

	Gio::Application: Add quit().

	* gio/src/application.hg: Wrap g_application_quit().

2012-03-02  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Signal*: Better description of the connect*() methods.

	* glib/glibmm/main.h: Mention that returning false from a bool-returning
	handler disconnects the handler. Other minor changes of the descriptions.
	Bug #669906.

2012-03-02  Murray Cumming  <murrayc@murrayc.com>

	h2defs.py: Ignore the new GDK_AVAILABLE_IN_* macros.

	* tools/defs_gen/h2def.py: Strip these macros so we can actually
	parse the latest headers.

2012-03-01  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Allow destructors to be documented.

	* tools/m4/base.m4 (SECTION_DTOR_DOCUMENTATION): Add a new section in
	which to store a destructor's documentation.
	* tools/m4/class_shared.m4 (_DOCUMENT_DTOR): Add a new macro which
	takes text and places it in a Doxygen comment block sending the
	comment block to the new section above.  The text can be multiline.
	The macro assumes that any lines below the first, if any, have at
	least one space preceding them.  If the text is a single line, it can
	be double quoted (the double quotes are removed).
	* tools/m4/class_boxedtype.m4:
	* tools/m4/class_gobject.m4:
	* tools/m4/class_interface.m4:
	* tools/m4/class_opaque_copyable.m4: Modify these so that any Doxygen
	comment block sent to the new section above is inserted in the
	generated declaration of the destructor.

	Bug #668918.

2012-02-29  José Alburquerque  <jaalburquerque@gmail.com>

	Generation Scripts: Don't assume the root directory is glibmm.

	* tools/gen_scripts/gio_generate_docs.sh:
	* tools/gen_scripts/gio_generate_enums.sh:
	* tools/gen_scripts/gio_generate_extra_defs.sh:
	* tools/gen_scripts/gio_generate_methods.sh:
	* tools/gen_scripts/glib_generate_docs.sh:
	* tools/gen_scripts/glib_generate_enums.sh:
	* tools/gen_scripts/glib_generate_extra_defs.sh:
	* tools/gen_scripts/glib_generate_methods.sh: Modify them so that they
	assume that they reside in the tools/gen_scripts directory and find
	the root of glibmm based on that instead of assuming that the name of
	the root directory is glibmm.

	* gio/src/gio_enums.defs.patch: Add this patch file to streamline the
	enum generation so that keeping the custom Gio::HOST_WAS_NOT_FOUND
	enum value is easier.

2012-02-29  Murray Cumming  <murrayc@murrayc.com>

	Add back our custom Gio::HOST_WAS_NOT_FOUND enum value.

	* gio/src/gio_enums.defs: This is easy to lose, but we always
	notice during make check.

2012-02-28  José Alburquerque  <jaalburquerque@gmail.com>

	tools: Add XML docs and defs generation scripts.

	* tools/gen_scripts/gio_generate_docs.sh:
	* tools/gen_scripts/gio_generate_enums.sh:
	* tools/gen_scripts/gio_generate_extra_defs.sh:
	* tools/gen_scripts/gio_generate_methods.sh:
	* tools/gen_scripts/glib_generate_docs.sh:
	* tools/gen_scripts/glib_generate_enums.sh:
	* tools/gen_scripts/glib_generate_extra_defs.sh:
	* tools/gen_scripts/glib_generate_methods.sh: Add these scripts to
	generate the XML docs and defs files for glibmm and giomm.  A
	'JHBUILD_SOURCES' variable pointing to the jhbuild root source
	directory needs to be defined and the various tools (like h2def.py,
	enum.pl, etc.) need to be in the command path for these scripts to run
	successfully.  They generate the appropriate files, patch them if
	necessary, and place them in the correct place.  All that's needed is
	to run the scripts.

	* gio/src/gio_docs.xml:
	* gio/src/gio_enums.defs:
	* gio/src/gio_methods.defs:
	* gio/src/gio_signals.defs:
	* glib/src/glib_docs.xml:
	* glib/src/glib_enums.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gmodule_functions.defs:
	* glib/src/gobject_enums.defs:
	* glib/src/gobject_functions.defs: Regenerate all the XML and defs
	files to ensure that the scripts work.

	* glib/src/glib_enums.defs.patch: Add this patch file so that it isn't
	necessary to manually edit the defs file.
	* gio/src/gio_signals.defs.patch:
	* glib/src/glib_functions.defs.patch: Update these patch files so the
	defs files patch successfully.

	Bug #668918.

2012-02-28  José Alburquerque  <jaalburquerque@gmail.com>

	docextract_to_xml.py: Generate signal docs by default.

	* tools/defs_gen/docextract_to_xml.py: Change the --with-signals
	option to --no-signals and assume that signal documentation should be
	generated by default.  The --no-signals option requests that the docs
	not be generated.

	Bug #668918.

2012-02-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	DBus::Error, DBus::Proxy: Fix interaction with generate_wrap_init.pl.

	* gio/src/dbuserror.hg: Remove now unnecessary declaration of friend
	Gio::wrap_init().
	* gio/src/dbusproxy.hg: Add _GMMPROC_EXTRA_NAMESPACE(DBus). Bug #640029.

2012-02-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Fix exceptions thrown by Thread::create() and Threads::Thread::create.

	* glib/src/thread.ccg: create(): Call g_thread_try_new() instead of
	g_thread_new(). Throw a Glib::ThreadError when appropriate, instead of calling
	Glib::Error::throw_exception(), which would throw Glib::Threads::ThreadError.
	* glib/src/threads.ccg:create(): Call g_thread_try_new() instead of
	g_thread_new(). Remove parameter 'joinable'.
	* glib/src/threads.hg: Remove parameter 'joinable'. Remove comments about
	non-joinable threads and thread priorities.
	* examples/network/resolver.cc:
	* examples/network/socket-client.cc:
	* examples/network/socket-server.cc:
	* examples/thread/dispatcher.cc:
	* examples/thread/dispatcher2.cc:
	* examples/thread/thread.cc: Remove parameter 'joinable' in calls to
	Glib::Threads::Thread::create(). Bug #640029.

2012-02-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Fix the build with --disable-deprecated-api.

	* glib/glibmm/main.cc: Call get_time() instead of the deprecated
	get_current_time(), when GLIBMM_DISABLE_DEPRECATED is defined.
	* glib/src/thread.[hg|ccg]: Use _IS_DEPRECATED instead of
	_DEPRECATE_IFDEF_{START|END}. _DEPRECATE_IFDEF_{START|END} does not include
	code generated by gmmproc within #ifndef/#endif.
	* glib/src/threads.ccg: Change catch(Glib::Thread::Exit&) to
	catch(Glib::Threads::Thread::Exit&).
	* glib/src/threads.hg: Add _GMMPROC_EXTRA_NAMESPACE(Threads).
	* glib/src/valuearray.hg:
	* gio/src/application.hg: #undef G_DISABLE_DEPRECATED in the .cc file.
	* tools/m4/class_shared.m4: Define _IS_DEPRECATED. Bug #640029.

2012-02-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	generate_wrap_init.pl: Improve reg. of exception classes in sub-namespaces.

	* tools/generate_wrap_init.pl.in: When there are exception classes in sub-
	namespaces, create extra wrap_init() functions in those namespaces, and
	register the exception classes from there. wrap_init() is a friend that makes
	a pointer to the private throw_func(), and that's easier if wrap_init() is
	declared in the same namespace as the exception class. Bug #640029.

2012-02-28  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	generate_wrap_init.pl: Improve it for deprecated files and sub-namespaces.

	* tools/generate_wrap_init.pl.in: Note that _IS_DEPRECATED deprecates a
	whole file. Keep track of sub-namespaces for _CLASS_GOBJECT and
	_CLASS_GTKOBJECT (not just for _WRAP_GERROR). Ignore macros in comments.
	Bug #640029.

2.31.18.1:

2012-02-26  José Alburquerque  <jaalburquerque@gmail.com>

	h2def.py: Handle types such as 'const gchar* const *' for functions.

	* tools/defs_gen/h2def.py (clean_func): Make deprecated handling more
	general so that macros such as GDK_DEPRECATED and GDK_DEPRECATED_FOR()
	are also stripped.  Also replace '* const' with '*-const' in the
	constants processing section so that types such as 'const gchar*
	const*' (which are now used in the declaration of functions such as
	gtk_about_dialog_get_authors()) are correctly processed.

2012-02-26  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::DBus::[ActionGroup|MenuModel]: Have get() and not create() methods.

	* gio/src/dbusactiongroup.hg:
	* gio/src/dbusmenumodel.hg: Have get() methods to get instances of
	theses classes and not create() methods as is done in
	Gio::Application.

	Bug #637445.

2012-02-24  Murray Cumming  <murrayc@murrayc.com>

	gmmproc: _WRAP_PROPERTY(): Allow properties to be deprecated.

	* tools/m4/property.m4: get_docs(): Take optional documentation_docs
	too, like DocsParser::lookup_documentation().
	* tools/pm/Output.pm: output_wrap_property(): Take a deprecated bool
	and deprecated_docs, adding the ifdef if necessary and passing
	it to the _PROPERTY_PROXY() m4 macro, with the amended documentation.
	* tools/pm/Property.pm: _PROPERTY_PROXY(): Take a deprecated bool
	parameter and add the ifndef if necessary.
	* tools/pm/WrapParser.pm: on_wrap_property(): Parse an optional
	deprecated "the explanation" parameter.

2012-02-24  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::Application, Gio::DBus::AuthObserver: Typos.

	* gio/src/application.hg:
	* gio/src/dbusauthobserver.hg:

2012-02-24  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::Application: Add missing virtual functions and methods.

	* gio/src/application.{ccg,hg}: Add the rest of the virtual functions
	-- all except the one with a GVariantBuilder parameter because that
	type is not wrapped yet.  Also add the [set|get]_default() methods
	wrapping the respective C functions.
	* gio/src/gio_vfuncs.defs: Add the rest of GApplication's virtual
	function definitions so they can be wrapped.
	* tools/m4/convert_gio.m4: Add GApplication conversions.

2012-02-24  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add class docs to recently added Application related classes.

	* gio/src/actionmap.hg:
	* gio/src/dbusactiongroup.hg:
	* gio/src/dbusmenumodel.hg:
	* gio/src/menuattributeiter.hg:
	* gio/src/menulinkiter.hg:
	* gio/src/remoteactiongroup.hg:

2012-02-24  José Alburquerque  <jaalburquerque@gmail.com>

	MenuModel: Add the attribute and link constants.

	* gio/src/dbusmenumodel.hg:
	* gio/src/menumodel.ccg: Add the class documentation.  Also add the
	attribute and link constants from the C API in enums and re-wrap the
	existing methods to use the enums (this was adapted from gstreamermm).

2012-02-23  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the DBus::MenuModel class.

	* gio/src/dbusmenumodel.{ccg,hg}: Add the sources wrapping a single
	create() method.
	* gio/src/filelist.am: Add the sources to the list of files to be
	built.

2012-02-23  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::DBus::Connection: Add the MenuModel export/unexport methods.

	* gio/src/dbusconnection.{ccg,hg}: Add the two new methods, wrapping
	the two functions in the GMenuModel exporter API:
	http://developer.gnome.org/gio/2.31/gio-GMenuModel-exporter.html
	* tools/m4/convert_gio.m4: Add necessary conversions.

2012-02-22  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: MenuModel, MenuAttributeIter: Correct typos.

	* gio/src/menuattributeiter.hg (get_next): Remove extra (unneeded)
	parameter to the _WRAP_METHOD_DOCS_ONLY macro.
	* gio/src/menumodel.ccg: Whitespace.

2012-02-22  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the MenuModel and Menu[Attribute|Link]Iter classes.

	* gio/src/menuattributeiter.{ccg,hg}:
	* gio/src/menulinkiter.{ccg,hg}:
	* gio/src/menumodel.{ccg,hg}:
	* gio/src/filelist.am: Add the sources for the classes and include
	them in the list of source files to build.
	* tools/m4/convert_gio.m4:
	* tools/m4/convert_glib.m4: Add the necessary conversions.

2012-02-22  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::Application: Derive from the ActionGroup interface.

	* gio/src/application.hg: As is done in the C API.

2.31.18:

2012-02-20  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::DBus::Connection: Add the ActionGroup export/unexport methods.

	* gio/src/dbusconnection.{ccg,hg}: Add the two new methods, wrapping
	the two functions in the new GActionGroup exporter API:
	http://developer.gnome.org/gio/2.31/gio-GActionGroup-exporter.html

2012-02-20  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the DBus::ActionGroup class.

	* gio/src/dbusactiongroup.{ccg,hg}: Add the sources, wrapping the
	create() method.
	* gio/src/filelist.am: Include the sources in the build.

2012-02-20  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the RemoteActionGroup interface.

	* gio/src/remoteactiongroup.{ccg,hg}:
	* gio/src/filelist.am: Add the sources, wrapping the methods and
	virtual functions, and include them in the list of files to be built.
	* gio/src/gio_vfuncs.defs: Add the GRemoteActionGroup virtual
	functions.

	* gio/src/applicationcommandline.hg: Add the class documentation
	block.

2012-02-16  José Alburquerque  <jaalburquerque@gmail.com>

	h2def.py: Handle deprecated functions.

	* tools/defs_gen/h2def.py: The g_application_set_action_group() and
	the g_volume_monitor_adopt_orphan_mount() functions are wrapped but
	not generated because they have been deprecated in their header files
	by using a GLIB_DEPRECATED macro before the function declaration.
	Modify this tool to strip the macro so the functions are recognized.
	* gio/src/gio_methods.defs: Regenerate so the missing method
	definitions are included.

2012-02-15  José Alburquerque  <jaalburquerque@gmail.com>

	giomm: Add the ActionMap interface.

	* gio/src/actionmap.{ccg,hg}:
	* gio/src/filelist.am: Add the new sources.

	* gio/src/gio_methods.defs: Regenerate to get the new ActionMap
	methods.
	* gio/src/gio_vfuncs.defs: Add the ActionMap virtual functions.

	* gio/src/application.hg:
	* gio/src/simpleactiongroup.hg: These classes implement the new
	interface.

	* gio/src/gio_extra_objects.defs: Add new objects so that there are no
	missing define-object warnings from gmmproc.

2012-02-15  José Alburquerque  <jaalburquerque@gmail.com>

	reviewed by: <delete if not using a buddy>

	* gio/src/actionmap.ccg:
	* gio/src/actionmap.hg:

2012-02-14  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: docs: Remove possible parens in gtk-doc signal references.

	* tools/pm/DocsParser.pm: Discard possible parenthesis following a
	gtk-doc signal reference.  This avoids a double set of parenthesis
	appearing in the documentation.

	Bug #668918.

2012-02-14  José Alburquerque  <jaalburquerque@gmail.com>

	Gio::DBus::Proxy: Add a TODO.

	* gio/src/dbusproxy.hg: Add a TODO.
	* gio/src/filemonitor.hg: Typo.
	* tools/pm/DocsParser.pm (convert_tags_to_doxygen): Allow <listitem>
	tags to not be on a line by themselves also (as was done with the
	<itemizedlist> tag.

2012-02-14  José Alburquerque  <jaalburquerque@gmail.com>

	Remove unnecessary signal docs.

	* gio/src/dbusserver.hg:
	* gio/src/drive.hg: Remove signal docs from .hg files that is now
	automatically included by gmmproc.

2012-02-14  José Alburquerque  <jaalburquerque@gmail.com>

	Regenerate XML docs for glibmm and giomm.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Regenerate these, now including the signal
	docs so that gmmproc can include their docs in the source generation
	process.

2.31.16.1:

2012-02-13  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: docs: Convert signal and property names correctly.

	* tools/pm/DocsParser.pm (substitute_identifiers): Search for gtk-doc
	property and signal references and convert them to appropriate C++
	names so that they are referenced correctly in the documentation.

	Bug #668918.

2012-02-08  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: DocsParser.pm (convert_tags_to_doxygen): Correct typo.

	* tools/pm/DocsParser.pm (convert_tags_to_doxygen): Make the newline
	following the <itemizedlist> tags optional when converting them to
	Doxygen format (in case the tags are not necessarily on a line by
	themselves).

2012-02-08  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Translate the <itemizedlist> tags in docs correctly.

	* tools/pm/DocsParser.pm (lookup_documentation): Typo.
	(convert_tags_to_doxygen): Add substitutions to convert gtk-doc
	<itemizedlist> tags to Doxygen format.  For example, see
	Gtk::ToolItem's "create-menu-proxy" and "toolbar-reconfigured"
	signal docs.

2012-02-07  José Alburquerque  <jaalburquerque@gmail.com>

	docextract_to_xml.py: Add some HTML entity conversions.

	* tools/defs_gen/docextract_to_xml.py: Add some HTML entity
	conversions that produce errors when processed by gmmproc.

2012-02-07  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Method generation: Fix indentation of void methods.

	* tools/m4/method.m4: Make sure that the generated line in methods
	returning void is indented properly (by two spaces).  Before, there
	was no indentation (see for example the Entry::set_inner_border()
	method).

2012-02-03  José Alburquerque  <jaalburquerque@gmail.com>

	gmmproc: Add documentation to wrapped signals.

	* tools/m4/signal.m4: Add docs to the on_*() default handlers
	referring the users to the signal_*() docs.
	* tools/pm/DocsParser.pm (parse_on_start):
	(parse_on_end): Allow the <signal></signal> tags from the generated
	XML docs to be processed in a similar way as the <function></function>
	tags are processed.  The docs of the signals are stored as
	"Class::a_signal_name" in the hash.
	(append_parameter_docs): Skip the first parameter for signals also
	because the first parameter of signals is the object for which the
	signal is triggered.
	(lookup_documentation): Generalize the no docs warning to include
	signals also.
	* tools/pm/Function.pm (get_refdoc_comment): Modify the subroutine to
	accept the docs of the signal (that the DocsParser stores) and include
	the prototype of the slot in the docs.
	* tools/pm/Output.pm (output_wrap_sig_decl): Modify the subroutine to
	look up the documentation of the signal which it then passes to
	get_refdoc_comment() so that the documentation of the signal from the
	generated XML is included in the declaration of the signal.

	Bug #668918 (Mark)

2.31.16:

2012-01-30  TS  <t.sailer@alumni.ethz.ch>

	Dispatcher: Fix the build on win32.

	* glib/glibmm/dispatcher.cc: Mention the new Threads:: namespace in the
	ifdefed win32 code.

2011-12-08  Haikel Guemar  <karlthered@gmail.com>

	thread.h: Move calls to deprecated glib functions into thread.cc.

	* glib/src/thread.[hg|ccg]: Move calls to deprecated glib functions
	from thread.h into new public helper functions, so they are only
	used in our .cc file. This avoids warnings in application compiles
	just because they happen to include this header.

2.31.2:

2011-11-24  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Make class Glib::Threads::Private buildable with --enable-warnings=fatal.

	* glib/src/threads.hg: G_PRIVATE_INIT(destructor_func) is used only in an
	initialization.

2011-11-23  Murray Cumming  <murrayc@murrayc.com>

	Add Glib::Threads::* in threads.h, deprecating everything in thread.h

	* glib/src/filelist.am:
	* glib/src/thread.[hg|ccg]: Deprecate the whole file, adding
	deprecation doxygen comments to all API.
	* glib/src/threads.[hg|ccg]: A new Threads namespace containing
	equivalents for everything in thread.h, implemented using
	only non-deprecated glib API. This was necessary because we had
	to break the ABI to do this.
	* glib/glibmm.h: Include threads.h

	* glib/glibmm/main.[h|cc]: Added a wait() method overload that
	takes the new types, deprecating the existing wait() method.

	* examples/network/resolver.cc:
	* examples/network/socket-client.cc:
	* examples/network/socket-server.cc:
	* examples/thread/dispatcher.cc:
	* examples/thread/dispatcher2.cc:
	* examples/thread/thread.cc:
	* examples/thread/threadpool.cc:
	* glib/glibmm/dispatcher.cc:
	* glib/glibmm/exceptionhandler.cc:
	* glib/glibmm/threadpool.[h|cc]: Use the new Glib::Threads::* types
	instead of thread.h.

2011-11-23  Murray Cumming  <murrayc@murrayc.com>

	Avoid a deprecation warning in implelementation of deprecated API.

	* glib/glibmm/main.cc: Define GLIB_DISABLE_DEPRECATION_WARNINGS
	to avoid a warning about g_source_get_current_time(),
	which we must use in our own deprecated code.

2011-11-23  Murray Cumming  <murrayc@murrayc.com>

	class.cc: Avoid compiler warnings when using -std=c++0x with g++.

	* glib/glibmm/class.cc: Add casts because GTypeQuery::class_size
	and instance_size are guint but GTypeInfo::class_size and
	instance_size are guint16.

2011-11-18  Murray Cumming  <murrayc@murrayc.com>

	Require glibmm 2.2.10 so that make check works.

	* configure.ac: Bug #663686 (Michael Biebl)

2011-11-16  Hub Figuière  <hub@figuiere.net>

	Ensure template parameter has a space before to avoid trigraphs.
	(Gtkmm bug #663303)

	* tools/m4/property.m4: Ensure template parameter has a space
	before to avoid trigraphs.

2011-10-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add some unwrapped methods and properties.

	* gio/src/drive.hg: Add get_sort_key().
	* gio/src/emblemedicon.hg: Add clear_emblems().
	* gio/src/fileicon.hg: Add the "file" property.
	* gio/src/inetaddress.hg: Add address_equal().
	* gio/src/mount.hg: Add get_sort_key().
	* gio/src/socket.hg: Add the "timeout" property.
	* gio/src/socketaddress.hg: Add the "family" property.
	* tools/m4/convert_gio.m4: Add a necessary conversion.

2011-10-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Example Removal: Also remove code in </programlisting> tags.

	* tools/pm/DocsParser.pm (lookup_documentation): Also remove code in
	<programlisting>...</programlisting> tags.

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	Avoid use of deprecated API in tests and examples.

	* tests/Makefile.am:
	* examples/Makefile.am: Disable deprecated API.
	* examples/network/socket-client.cc:
	* examples/network/socket-server.cc:
	* examples/thread/dispatcher.cc:
	* examples/thread/dispatcher2.cc:
	* examples/thread/thread.cc: Remove calls to Glib::thread_init(), instead
	calling Glib::init() where that side-effect was also intended.

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	threadpool example: Use Mutex instead of StaticMutex.

	* examples/thread/threadpool.cc: The advantage of StaticMutex was that
	it would silently do nothing if threads were not initialized. That
	was never a useful distinction in this example anyway.
	Also remove the deprecated thread_init() call.
	* glib/src/thread.ccg: Mutex: Add a TODO about not using the deprecated
	API.

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	Fix the deprecation ifdefs.

	* glib/src/thread.hg: Move the deprecation ifdefs to avoid affecting
	non-deprecated API.

2.31.0.1:

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	Avoid an unused-parameter compiler warning.

	* glib/src/thread.ccg: thread_init(): Comment out the vtable parameter.

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	thread.h: Allow use of this without causing deprecation compiler warnings.

	* glib/src/thread.hg: undef and then redefine G_DISABLE_DEPRECATED, and
	define GLIB_DISABLE_DEPRECATION_WARNINGS, if G_DISABLE_DEPRECATED is
	defined, so we can use the deprecated API in this header (though only in
	our own deprecated API).

	* tools/generate_wrap_init.pl.in: Include glibmm.h instead of glib.h so
	we can include thread.h first (via glibmm.h) instead of only later.
	This seems more logical than explicitly including thread.h in all
	(even non-glibmm) generated wrap_init.cc files.

  * tools/m4/base.m4:
	* glib/glibmm.h:
	* glib/glibmm/dispatcher.cc:
	* glib/glibmm/exceptionhandler.cc:
	* glib/glibmm/main.cc:
	* examples/thread/thread.cc:
	* examples/thread/threadpool.cc: Adjust the includes to include thread.h
	first.

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	Move IOCondition from main.h to iochannel.h and autogenerate it.

	* glib/src/iochannel.hg: Use _WRAP_ENUM() for IOCondition instead of
	hand-coding it in
	* glib/glibmm/main.h:
	though this requires some manual editing of
	* glib/src/glib_enums.defs: due to the weird defines that GioChannel uses for
	its values. See the comment.
	* glib/glibmm/streamiochannel.cc: Adjust the includes.
	This avoids the need to include glib.h from main.h.

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	Avoid some deprecation compiler warnings.

	* gio/src/file.hg:
	* gio/src/volumemonitor.hg:
	* glib/src/date.hg: Add GLIB_DISABLE_DEPRECATION_WARNINGS to
	SECTION_CC_PRE_INCLUDES to avoid compiler warnings with the new glib
	deprecation system.
	* glib/src/value_basictypes.cc.m4: undef them here too, because
	g_value_set_char() and g_value_get_char() are deprecated.

2011-10-26  Murray Cumming  <murrayc@murrayc.com>

	Thread: Move deprecated parts together.

	* glib/src/thread.hg: This simplifies things a bit.

2011-10-25  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Don't include C code examples found in the XML docs.

	* tools/pm/DocsParser.pm (lookup_documentation): Remove the C example
	code from the attained documentation of the specified function.  Print
	a warning that the example code has been removed if that is the
	case.  Include the function name in the warning so that it is known
	where the examples are in case it is convenient to translate them.
	(convert_tags_to_doxygen): No longer convert tags and symbols that
	signal example code to Doxygen format since they are removed with the
	example code.

	Bug #650544

2011-10-25  Murray Cumming  <murrayc@murrayc.com>

	giomm/wrap_init.h: Remove the glibmm.h include from here too.

	* gio/giomm/wrap_init.[h|cc]: Move the #include into the .cc file.
	* gio/giomm.h: Add an #include glibmm.h here instead.

2011-10-25  Murray Cumming  <murrayc@murrayc.com>

	gmmproc: Include <glibmm.h> in .cc files for convenience.

	* tools/m4/base.m4: Add an include <glibmm.h> line to the .cc files.
	* glib/src/optioncontext.ccg: Rename a namespace to avoid a clash.

	It is more useful to keep the general glibmm.h include out of headers.

2011-10-24  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Don't include <glibmm.h> by default in generated files.

	* tools/m4/base.m4: Include <glibmm/ustring.h> and <sigc++/sigc++.h>
	by default in header files of generated files in modules other than
	glibmm.  This should make compilation faster for those modules.

	* gio/src/*.{h,cc}g:
	* gio/giomm/slot_async.cc: Adjust includes according to the above
	change.

	Bug #662597

2.31.0:

2011-10-25  Murray Cumming  <murrayc@murrayc.com>

	Regenerated more defs.

	* gio/src/gio_enums.defs: Regenerated with enums.pl.
	* gio/src/gio_methods.defs: Regenerated with h2defs.py.
	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs: Regenereated with h2defs.py
	* glib/src/glib_deprecated_functions.defs: Added this file.
	* glib/src/glib.defs: Mention the new file.

2011-10-25  Murray Cumming  <murrayc@murrayc.com>

	Do not use gthread-2.0.

	* configure.ac: Do not use gthread-2.0 at all, because it only contains
	empty functions so it is better to just not call them.
	Require the latest glib version, to avoid people using this version of
	glibmm with a version of glib that would need g_thread_init().
	* glib/src/thread.ccg: thread_init(): Do not call g_thread_init() because
	it now does nothing and would require linking to gthread-2.0.

2011-10-25  Murray Cumming  <murrayc@murrayc.com>

	Fix the make check build by always linking to gthread-2.0.

	* configure.ac: Always use gthread-2.0 because there is now no advantage to
	not doing that, because threading is now always enabled in glib.
	Remove the separate GTHREAD* variables.
	* glib/glibmm/Makefile.am:
	* gio/giomm/Makefile.am:
	* tests/Makefile.am:
	* tools/Makefile.am:
	* examples/Makefile.am: Remove use of the GTHREAD* variables..
	* examples/network/resolver.cc: Remove the non-threading option and code that
	uses it.

2011-10-25  Murray Cumming  <murrayc@murrayc.com>

	Regenerate enums defs.

  * glib/src/glib_enums.defs, gobject_enums.defs: Regenerated with enums.pl.
	* glib/src/glib_deprecated_enums.defs: Added this file.
	* glib/src/filelist.am: Mention the new file.
	* glib/src/glib.defs: Mention the new file and actually mention
	gobject_enums.defs.

2011-10-23  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::Connection: Temporarily remove newly added call() methods.

	* gio/src/dbusconnection.{ccg,hg}: Remove the newly added call()
	methods with a UnixFDList parameter until the call_finish() method
	with a UnixFDList parameter is added also.

	* gio/src/credentials.hg:
	* gio/src/dbusmessage.ccg:
	* gio/src/dbusmessage.hg: Typos.

2011-10-21  Murray Cumming  <murrayc@murrayc.com>

	Thread: Use g_thread_new() instead of g_thread_create().

	* glib/src/thread.[hg|ccg]: create(): Replace use of (deprecated)
  g_thread_create() with g_thread_new(), ignoring the joinable parameter.
  create(lots of parameters): Deprecate this, because the parameters are
  ignored by g_thread_create_full() now.

2011-10-21  Murray Cumming  <murrayc@murrayc.com>

	Deprecated thread_init(), Thread::joinable(), *_priotity(), etc.

	* glib/src/thread.[hg|ccg]: Deprecate thread_init(), thread_supported,
	Thread::joinable(), Thread::set_priority(), Thread::get_priority() and
	ThreadPriority.

2011-10-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Remove M4 warnings due to commas in return types.

	* tools/m4/convert_base.m4 (__HASH2): Appropriately quote the
	pushdef() arguments and the m4_ifelse() arguments due to some warnings
	generated because of the newly wrapped method in the
	ApplicationCommandLine class (get_platform_data()) which has a comma
	in the return type.  The wrapping was successful even with the warning
	but the return type was still being split when passed to this macro.
	Document what the macro does.
	(_CONVERT): Typos.
	(_CONVERSION):
	(_INITIALIZATION): Document what parameters are allowed for these
	macros.

2011-10-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::Connection: Correct UnixFDList class forward declaration.

	* gio/src/dbusconnection.hg: Place the class declaration in the Gio
	namespace and not in the Gio::DBus namespace which is incorrect to fix
	the build.  There was a '-Werror' option in the CXXFLAGS variable of
	my ~/.jhbuildrc file which was causing deprecation warnings to break
	the build so I did not verify the previous to last commit, sorry.

2011-10-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	Date: set_time(): Use g_date_set_time_t() instead of g_date_set_time().

	* glib/src/date.ccg: The latter function is deprecated.  This fixes
	the build with the master branch of glib with deprecations disabled
	though there's one small error related to the Threads discussion on
	the mailing list that will still have to be looked at.

2011-10-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusMethodInvocation: Add UnixFDList return_value() method overload.

	* gio/src/dbusmethodinvocation.hg: Add the method overload.
	* gio/src/dbusmessage.hg: Add an _IGNORE.

2011-10-13  Murray Cumming  <murrayc@murrayc.com>

	Do not include glib/gvarianttype.h.

	* glib/src/thread.hg: Include glib.h instead. The recent glib version
	has a pragma that complains about this.

2011-10-12  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::Connection: Add UnixFDList call() method overloads.

	* gio/src/dbusconnection.{ccg,hg}: Add cancellable and
	non-cancellable UnixFDList call() methods.  The TODO's are for when
	gmmproc can possibly handle setting C++ parameters from C output
	parameters properly which may be possible with a few changes.

2011-10-12  José Alburquerque  <jaalburqu@svn.gnome.org>

	VariantContainerBase: Add create_maybe().

	* glib/src/variant.{ccg,hg}: Add a create_maybe() method because it
	was discussed on the mailing list.  Clearly the variant classes are
	not intended for general use.  However, this method is added just
	so that the API is more complete.

2011-10-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	DataInputStream: Add read_line_utf8() and read_line_finish_utf8().

	* gio/src/datainputstream.hg: Add the two methods and their overloads
	using the new gmmproc parameter reordering, optional parameter
	signaling and output parameter signaling functionality.  It's not
	difficult to write the _INITIALIZATION and _WRAP_METHOD macros but
	they may not be readily understandable.  I think they are, but I could
	be wrong.

2011-10-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _WRAP_METHOD: Use {OUT} instead of {RET} for output params.

	* tools/pm/Output.pm: Use {OUT} instead of {RET} to signify that a
	parameter is an output parameter because it is probably more
	intuitive.
	* tools/m4/convert_base.m4 (_INITIALIZE): Don't quote the C return
	because otherwise the macros in it aren't expanded when the macro is
	used.  This could be because of the recent M4 changes in the previous
	to the last commit.

2011-10-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	ApplicationCommandLine: Add the get_platform_data() method.

	* gio/src/applicationcommandline.hg:

2011-10-10  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _WRAP_METHOD: Allow return types to have commas.

	* tools/pm/WrapParser.pm (string_split_commas): Modify so that when
	splitting by commas, '<' and '>' are taken into account by levels as
	is done with '(' and ')'.  This so that if a return type in a
	_WRAP_METHOD has a comma (which is possible, e.g. with std::map<>) the
	return type is not split incorrectly.
	(read_file): Modified so that '<' and '>' are tokens by which to
	split.
	* tools/pm/Output.pm (output_wrap_meth): Add `' around the return type
	when calling the _METHOD() and _STATIC_METHOD() M4 macros so that
	commas don't split the return type into more than one argument.
	* tools/m4/method.m4: Do the same (for the return type) in _METHOD()
	and _STATIC_METHOD() when calling the _CONVERT() macro for the same
	reason as above.

	Bug #661401

2011-10-10  José Alburquerque  <jaalburqu@svn.gnome.org>

	SimpleAction: Wrap the signals and properties.

	* gio/src/simpleaction.hg: Wrap the signals using the
	no_default_handler option because there are no signal members exposed
	in the GSimpleActionClass struct (in fact, there is no
	GSimpleActionClass struct).  Also wrap the properties.

2011-10-10  José Alburquerque  <jaalburqu@svn.gnome.org>

	Application, {,Simple}Action{,Group}: Update @newins{}'s.

	* gio/src/action.hg:
	* gio/src/application.hg:
	* gio/src/simpleaction.hg:
	* gio/src/simpleactiongroup.hg:

	* gio/src/applicationcommandline.hg: Add bug URL to a TODO.

2011-10-10  José Alburquerque  <jaalburqu@svn.gnome.org>

	ApplicationCommandLine: Update a TODO.

	* gio/src/applicationcommandline.hg:

2011-10-09  José Alburquerque  <jaalburqu@svn.gnome.org>

	Re-add Application and related class so they can be finished.

	* gio/giomm.h:
	* gio/src/action.ccg:
	* gio/src/action.hg:
	* gio/src/actiongroup.ccg:
	* gio/src/actiongroup.hg:
	* gio/src/application.ccg:
	* gio/src/application.hg:
	* gio/src/applicationcommandline.ccg:
	* gio/src/applicationcommandline.hg:
	* gio/src/filelist.am:
	* gio/src/simpleaction.ccg:
	* gio/src/simpleaction.hg:
	* gio/src/simpleactiongroup.ccg:
	* gio/src/simpleactiongroup.hg:

2011-09-27  Krzesimir Nowak  <qdlacz@gmail.com>

	Fix h2def.py not parsing function starting with G_GNUC_* macros.

	* tools/defs_gen/h2def.py: Strip some G_GNUC_* macros that are known
	to be placed before return type of function prototype.
	Fixes bug #660225.

2.30.0

2011-09-27  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus::Server: Add constructors.

	* gio/src/dbusserver.[hg|ccg]: Uncomment the constructors now that bug #639478
	has been fixed, though nobody has tried to use this yet.

2011-09-27  Murray Cumming  <murrayc@murrayc.com>

	Regenerated .defs files.

	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs:
	* glib/src/gmodule_functions.defs:
	* gio/src/gio_functions.defs: Regenerated with h2defs.py, though see
	bug #660225 .
	* glib/src/datetime.hg: Added an m4 conversion that is now necessary.

2011-09-26  Murray Cumming  <murrayc@murrayc.com>

	Remove Application and friends, because they are still not ready.

	* gio/src/action.[hg|ccg]:
	* gio/src/actiongroup..[hg|ccg]:
	* gio/src/application.[hg|ccg]:
	* gio/src/applicationcommandline..[hg|ccg]:
	* gio/src/simpleaction..[hg|ccg]:
	* gio/src/simpleactiongroup.[hg|ccg]: Removed.
	* gio/src/filelist.am:
	* goi/giomm.h: Do not mention them.
	See bug #637445#c29

2011-09-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	Action, ActionGroup: Wrap virtual functions.

	* gio/src/gio_vfuncs.defs: Add virtual function definitions for the
	Action and ActionGroup classes.
	* gio/src/action.hg:
	* gio/src/actiongroup.hg: Wrap the virtual functions.
	* tools/m4/convert_gio.m4: Correct a VariantType return conversion.

2011-09-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add SimpleActionGroup.

	* gio/src/simpleactiongroup.{ccg,hg}:
	* gio/src/filelist.am: Add sources and include them in the build file
	list.
	* tools/m4/convert_gio.m4: Add necessary conversions.
	* gio/src/simpleaction.hg: Added class doc title.

2011-09-21  José Alburquerque  <jaalburqu@svn.gnome.org>

	SimpleAction: Add create() methods.

	* gio/src/simpleaction.hg: Add two forgotten create methods for the
	class.  Also filed bug #659783 about not being able to wrap the
	signals.

2011-09-21  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add SimpleAction, an implementation of the Action interface.

	* gio/src/simpleaction.{ccg,hg}:
	* gio/src/filelist.am: Add the sources and include them in the list of
	files that should be processed.

	* tools/extra_defs_gen/generate_defs_gio.cc: Add G_SIMPLE_ACTION_TYPE
	to the list of types for which properties and signals should be
	generated.
	* gio/src/gio_signals.defs: Regenerate with above to get the
	properties and signals of new class.

2011-09-20  José Alburquerque  <jaalburqu@svn.gnome.org>

	ActionGroup: Wrap remaining methods.

	* gio/src/actiongroup.hg: Add the get_action_parameter_type(),
	get_action_state_type(), get_action_state_hint(), and
	get_action_state() methods which were TODO's.

2011-09-20  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add Action class wrapping GAction.

	* gio/src/action.{ccg,hg}:
	* gio/src/filelist.am: Add the new sources wrapping the methods and
	signals of GAction and include them in the list of files to be built.

	* tools/extra_defs_gen/generate_defs_gio.cc: Add G_TYPE_ACTION to
	the list of types for which signals and properties should be
	generated.
	* gio/src/gio_signals.defs:
	* gio/src/gio_methods.defs: Regenerate to get the new methods and
	properties being wrapped.

	* gio/src/gio_extra_objects.defs: Add Action to the list of extra
	objects so gmmproc's documentation generation does not produce
	warnings because of it.  Also added DBusNodeInfo and Proxy.

	* tools/m4/convert_gio.m4: Alphabetized the conversion by groups
	pertaining to types.  Removed the Variant return conversions which
	take copies.
	* glib/src/variant.hg: Moved the conversions here because they are
	specific to the methods in this class, specifically get_child() and
	get().

2011-09-17  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: DocParser: Correct the removal of link tags.

	* tools/pm/DocsParser.pm (convert_tags_to_doxygen): Make the matching
	of the characters of a link tag not greedy so that the first
	occurrence of the final '>' is accepted in a match instead of a
	possible later one pertaining to a different tag altogether. Also
	translate '|[' and ']|' to '@code' and '@endcode' respectively.

	Bug #650544

2.29.13:

2011-09-06  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant< std::vector<std::string> >: Ensure correct creation.

	* glib/src/variant.ccg (Variant< std::vector<std::string> >::create):
	Use g_variant_new_bytestring_array() to create the variant instead of
	a builder to avoid an unknown bug.
	Bug #657030 (Aurimas Černius)

2011-09-06  Murray Cumming  <murrayc@murrayc.com>

	giomm: Variant< vector<std::string> > (array of bytestrings): Fixes.

	* glib/src/variant.ccg: create(): Use VariantType::to_string.c_str() instead
	of reinterpret_cast. I have no idea why we ever used reinterpret_cast.
	* tests/glibmm_variant/main.cc: Add a simple test for this VariantType
	specialization, though it still fails.
  Bug #657030 (Aurimas Černius)

2011-09-02  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Correct handling of constversion etc. in _WRAP_METHOD.

	* tools/pm/WrapParser.pm: The parameters refreturn, errthrow, and
	constversion in _WRAP_METHOD was applied also to following instances
	wrapping the same C function. Bug #657751, comment 5.

2.29.12:

2011-08-25  Chun-wei Fan  <fanc999@src.gnome.org>

	Update Visual Studio projects

	* Made line endings on the VS 2010 solution file to have Windows-
	style EOL so that it works properly

2011-08-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	TimeZoneMonitor: Remove as was done in glib.

	* gio/src/filelist.am:
	* gio/src/timezonemonitor.{ccg,hg}: Remove sources and the mention
	from the build.
	* glib/src/timezone.hg (refresh_local): Remove this method as the
	function that it wraps was also removed from glib.
	* tools/extra_defs_gen/generate_defs_gio.cc
	(G_TYPE_TIME_ZONE_MONITOR): Remove this GType from the list of types
	for which properties and signals are generated.

	See the glib commit:
	http://git.gnome.org/browse/glib/commit/?id=5b68b49b2072c371c72ee96175e3d6a727eb5e8b

2011-08-22  Murray Cumming  <murrayc@murrayc.com>

	configure: Require the latest libsigc++.

	* configure.ac: Because our tests require it.

2011-08-03  Murray Cumming  <murrayc@murrayc.com>

	giomm: Application: local_command_line_vfunc(): Use references for parameters.

	* gio/src/application.hg: Use references instead of pointers, now that
	we know how these paramters are actually used. See bug #643478.

2011-08-03  Murray Cumming  <murrayc@murrayc.com>

	Add back Gio::Application and friends so we can try to finish them.

	* gio/src/actiongroup.[hg|ccg]:
	* gio/src/application.[hg|ccg]:
	* gio/src/applicationcommandline.[hg|ccg]:
	See http://mail.gnome.org/archives/gtkmm-list/2011-March/msg00062.html

2.29.11:

2011-07-19  Murray Cumming  <murrayc@murrayc.com>

	Add reftpr_sigc_bind test case.

	* tests/glibmm_refptr_sigc_bind/main.cc:
	* tests/Makefile.am: Add a new test case from Kjell Ahlstedt, to test a fix
  in libsigc++. See bug #564005#c14.

2011-07-19  Murray Cumming  <murrayc@murrayc.com>

	Add h2defs.py and docextract_to_xml.py, removed from pygboject.

	* tools/defs_gen/definitions.py:
	* tools/defs_gen/defsparser.py:
	* tools/defs_gen/docextract.py:
	* tools/defs_gen/docextract_to_xml.py:
	* tools/defs_gen/h2def.py:
	* tools/defs_gen/scmexpr.py: Add h2def.py and docextract_to_xml.py,
	and any .py files that they use, because they were removed from pygobject.
	* tools/Makefile.am: Add these to EXTRA_DIST.

2011-07-18  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _STRUCT_NOT_HIDDEN: Make macro local to class only.

	* tools/m4/class_shared.m4 (STRUCT_NOT_HIDDEN): Undefine the boolean
	variable that signals that the typedefs generated by gmmproc should
	not be generated once the _STRUCT_NOT_HIDDEN macro is used so that it
	doesn't affect all the classes defined in a file.

2011-07-12  Murray Cumming  <murrayc@murrayc.com>

	AppInfo: Add launch() taking one file, and launch_uri() taking one URI.

	* gio/src/appinfo.[hg|ccg]: Add launch() overloads that take a single
	Gio::File, for convenience.
	Also add launch_uri() to take a single URI.

2011-07-12  Murray Cumming  <murrayc@murrayc.com>

	AppInfo::launch(): Correct the parameter type.

	* gio/src/appinfo.hg: g_app_info_launch() takes a GList of GFile, not of
	strings. Also use a vector instead of a ListHandle, as per our new convention.
	It is acceptable to change this API/ABI because this method could never
	possibly have been used by any application without crashes, so this can't
	make anything worse.
	Also add an overload without the launch_context parameter, using the new {?}
	syntax.
	Luckily we did not implement the vfuncs, or maybe we disabled them because of
	the crashes.

2011-07-12  Murray Cumming  <murrayc@murrayc.com>

	AppInfo::launch_uris(): Corrected (with deprecation) and add overload.

	* gio/src/appinfo.[hg|ccg]: Deprecate the existing method and add one that
	takes a C++ AppLaunchContext instead of a GAppLaunchContext*.
	Also add an overload with no AppLaunchContext, using the new {?} syntax.

2.29.10:

2011-06-29  Murray Cumming  <murrayc@murrayc.com>

	Add -Wformat-security to the --enable-warnings=fatal build.

	* configure.ac: This seems to be popular now.

2011-06-19  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add TimeZoneMonitor.

	* tools/extra_defs_gen/generate_defs_gio.cc: Add the
	G_TYPE_TIME_ZONE_MONITOR type to the list of types for which signals
	and properties should be generated.
	* gio/src/gio_signals.defs:
	* gio/src/gio_signals.defs.patch: Regenerate the signal and properties
	defs file and add a patch file so it does not have to be edited
	manually.
	* gio/src/gio_methods.defs:
	* gio/src/gio_methods.defs.patch: Regenerate the methods defs file and
	add a patch file as above.

	* gio/src/filelist.am:
	* gio/src/timezonemonitor.{ccg,hg}: Add the sources and mention them
	in the build so they are processed.
	* tools/m4/convert_gio.m4: Add a necessary conversion.

2011-06-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	DateTime, TimeZone: Use classes without Glib::RefPt<>.

	* glib/src/datetime.hg:
	* glib/src/timezone.hg: Since these classes are immutable (like
	Glib::VariantBase), remove the need to use these classes with
	Glib::RefPtr<> by using the _CLASS_OPAQUE_COPYABLE macro instead of
	the _CLASS_OPAQUE_REFCOUNTED macro.  This should make using the
	classes a little less tedious.
	* tools/m4/convert_glib.m4: Modify the corresponding conversions
	according to the above.

2011-06-15  José Alburquerque  <jaalburqu@svn.gnome.org>

	DateTime: Add methods and create() methods not creating now instances.

	* glib/src/glib_functions.defs: h2def.py missed the g_date_time_add*()
	functions because they were preceded by an unknown macro, namely
	G_GNUC_WARN_UNUSED_RESULT, so temporarily removed the macros and
	regenerated this file to get the definitions for those functions.
	h2def.py will probably have to be modified to skip over those macros
	properly in the future.  Also corrected the
	g_date_time_[compare|hash|equal] definitions so that the functions
	could be wrapped as method members of DateTime.
	* glib/src/glib_functions.defs.patch: Added this patch file so future
	editing of the above file should not be necessary.
	* glib/src/datetime.hg: Added the missing create() and the rest of the
	methods.
	* tools/m4/convert_glib.m4: Added necessary conversions.

2011-06-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	TimeZone: Const corrections.

	* glib/src/timezone.hg: Correct the constness of the TimeZone for some
	methods.

2011-06-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	TimeZone: Const corrections.

	* glib/src/timezone.hg: Correct the constness of the TimeZone for some
	methods.

2011-06-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	Increase the Glib requirement to 2.29.8.

	* configure.ac: The requirement was increased in the previous to the
	last commit but make sure it is shown clearly in the ChangeLog and in
	git.

2011-06-14  José Alburquerque  <jaalburqu@svn.gnome.org>


	glibmm: Add TimeZone and partial DateTime classes.

	* glib/src/datetime.{ccg,hg}:
	* glib/src/timezone.{ccg,hg}:
	* glib/src/filelist.am: Add the new sources and mention them in the
	build structure so they are processed.
	* glib/src/glib_extra_objects.defs: Include object definitions of the
	new classes so there are no gmmproc warnings when parsing the docs.
	* tools/m4/convert_glib.m4: Add necessary conversions.

2011-06-14  José Alburquerque  <jaalburqu@svn.gnome.org>


	glibmm: Regenerate the defs and xml doc files.

	* glib/src/glib_docs.xml:
	* glib/src/glib_enums.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gobject_enums.defs:
	* glib/src/gobject_functions.defs: Regenerate with Glib 2.29.8 to get
	the new functions enums and docs.

	* configure.ac: Increase the Glib requirement to 2.29.8.

2.28.1:

2011-06-13  Kalev Lember  <kalev@smartlink.ee>

	Removed doctooldir variable from pkgconfig files

	* glib/glibmm{,-uninstalled}.pc.in: Removed doctooldir variable now
	that the scripts are in mm-common.
	https://bugzilla.redhat.com/show_bug.cgi?id=712474
	Bug #652461

2011-06-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	m4 Macros: _INITIALZE: Modify so that $1 substitutes C++ type w/o &.

	* tools/m4/convert_base.m4 (_INITIALIZE): Changed the macro so that $1
	substitutes the C++ type without the final ampersand (&) for
	convenience.

2011-06-12  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Use '.' instead of '-' in parameter reordering.

	* tools/pm/Function.pm (parse_param): Use a '.' instead of a '-' to
	signify that the C++ parameter name should be used as the C parameter
	name to map the current C++ parameter to.

2011-06-09  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::Connection::emit_signal(): Say why convert empty strings.

	* gio/src/dbusconnection.ccg (emit_signal): Explain why empty strings
	are converted to NULL when passed to the C API.

2011-06-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::Connection::emit_signal(): Replace empty strings with NULL.

	* gio/src/dbusconnection.ccg (emit_signal): Pass NULL to the C
	function call where strings are empty allowing emitting signals to all
	listeners.

	Bug #645072 (Yannick Guesnet).

2011-06-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	M4 Macros: Rename the _INITIALIZER macro to _INITIALIZATION.

	* tools/m4/convert_base.m4 (_INITIALIZER): Rename the macro to
	_INITIALIZATION to be more consistent with the _CONVERSION macro.

2011-06-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _WRAP_METHOD: Add the possibility of an output parameter.

	* tools/pm/Output.pm (output_wrap_meth): Modified to test if there is
	a parameter mapping in the current C++ function from the hypothetical
	C name 'RET' to a C++ parameter index.  If so, that parameter is
	treated as an output parameter.  This allows wrap statements such as:

	_WRAP_METHOD(static void get_finish(Glib::RefPtr<Connection>&
	  conn{RET}, const Glib::RefPtr<AsyncResult>& res), g_bus_get_finish,
	  errthrow
	)

	Where the 'conn' parameter is an output parameter.  The output
	parameter name and type are passed to the _STATIC_METHOD and _METHOD
	macros (along with the wrap line number).

	(convert_args_cpp_to_c): Modified to process the C++ parameters
	dealing with the possibility of an output parameter.

	* tools/pm/Function.pm: Typo.

	* tools/m4/method.m4 (_METHOD):
	(_STATIC_METHOD): Both modified to accept an optional output parameter
	name, type and wrap line number and if they exist to ensure that the
	output parameter is correctly set to the return of the C function.  To
	do that it uses the new _INITIALIZE macro.

	* tools/m4/convert_base.m4 (_INITIALIZER):
	(_INITIALIZE):  Add macros (similar to the _CONVERSION/_CONVERT
	macros) used to record how to initialize a C++ type from a C type and
	later to initialize an output parameter of the C++ type.  The
	_INITIALIZER macro has much the same syntax as the _CONVERSION macro.
	For example:

	  _INITIALIZER(`Glib::RefPtr<Connection>&',`GDBusConnection*',
	    `$3 = Glib::wrap($4)')

	Describes how to initialize a C++ reference to a Glib::RefPtr that
	contains a Gio::DBus::Connection from its corresponding C type.  $3
	represents the output parameter name and $4 represents the C return.

	The _INITIALIZE macro can then be appropriately used by the _METHOD
	and _STATIC_METHOD macros to initialize the output parameters passed
	to them by gmmproc.

2011-06-06  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _WRAP_[CREATE|CTOR|METHOD]: Support parameter reordering.

	* tools/pm/Function.pm (param_mappings): Add a new hash member mapping
	C parameter names to C++ parameter indices.  The map is specified by
	appending a {name[?]} to the desired C++ parameter name in the C++
	method declaration.  A '-' in place of a C parameter name means to use
	the C++ parameter name.
	(parse_param): Modified to detect parameter mappings and set the
	appropriate mapping in the above new member.  No mappings occur if
	none are specified.
	* tools/pm/Output.pm (convert_args_cpp_to_c):
	(get_ctor_properties): Modified to use the new C param names to C++
	param indices mappings member above to allow reordering of parameters
	in the C++ method declaration.

2011-06-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Do not use NULL for optional parameters or properties.

	* tools/pm/Output.pm (convert_args_cpp_to_c):
	(get_ctor_properties): Substitute 0 instead of NULL for optional
	parameters or properties.

2011-06-04  Murray Cumming  <murrayc@murrayc.com>

	Fix the build with --enable-warnings=fatal.

	* tests/glibmm_nodetree/main.cc: Comment out a set-but-not-used
	variable.

2011-06-01  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Use NULL for optional properties.

	* tools/pm/Output.pm(get_ctor_properties): Use NULL instead of
	static_cast<char*>(0) for properties that are optional as is done in
	convert_args_cpp_to_c().

2011-06-01  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _WRAP_[CREATE|CTOR]: Add optional parameter functionality.

	* tools/pm/Function.pm (new_ctor): Modified to initialize the new
	param_optional and possible_args_list members.
	* tools/pm/FunctionBase.pm (args_names_only): Typo.
	(get_declaration): Make sure that spacing is correct if the
	declaration is a constructor's declaration.
	* tools/pm/Output.pm (output_wrap_meth): Store the number of possible
	declarations instead of computing it each time in the for loop.
	(output_wrap_ctor):
	(output_wrap_create): Modified as output_wrap_meth() to loop through
	the list of the possible combination of arguments to output
	convenience overloads for the constructors and create() methods.
	(get_ctor_properties): Modified as convert_args_cpp_to_c() to accept
	an optional index specifying which argument list out of the possible
	ones to use and to insert a static_cast<char*>(0) for optional
	parameters not in the specified argument list.
	* tools/m4/class_gobject.m4: Added a blank line after the create()
	methods definitions.

2011-05-31  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _WRAP_METHOD: Add optional parameter functionality.

	* tools/pm/Function.pm (param_optional): Add new member bool array to
	represent which parameters are optional.
	(possible_args_list): Add new member string array containing a list of
	the possible argument combination based on existing optional
	parameters.
	(possible_args_list): Added recursive function to generate the list of
	possible parameter combinations.  The first in the list (the zeroth
	element) always includes all the paramters.
	(new): Modified to initialize the new members above.
	(parse_param): Modified to see if parameters are optional by checking
	if the name ends with '{?}'.
	* tools/pm/FunctionBase.pm (args_names_only):
	(args_types_and_names):
	(args_types_and_names_with_default_values): Modified to accept an
	optional index representing the desired argument list to use out of
	the possible combinations.
	(get_declaration): New subroutine returning any of the possible
	declarations based on optional arguments.
	(get_num_possible_args_list): New subroutine returning the number of
	possible combination of arguments.
	* tools/pm/Output.pm (output_wrap_meth): Modified to loop through the
	possible arguments list and generate a _METHOD or _STATIC_METHOD for
	all the possible combination of arguments.
	(convert_args_cpp_to_c): Modified as above to accept an optional index
	parameter representing the argument list for which to generate
	_CONVERT macros.  For optional arguments a NULL is placed in the C
	function call.

2011-05-27  Kjell Ahlstedt  <kjellahl@src.gnome.org>

	gmmproc: Protect documentation with m4 quotes.

	* tools/pm/DocsParser.pm:
	* tools/pm/Output.pm: Method documentation read from xxx_docs.xml, and
	property documentation read from xxx_signals.defs are better protected with
	m4 quotes and __BT__ and __FT__ macros in the input to the m4 macro
	processor. Bug #603930

2.28.1:

2011-05-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	Extra Defs Tool: Only generate properties that the GType owns.

	* tools/extra_defs_gen/generate_extra_defs.cc: Modify the extra defs
	generation tool to generate properties that the given GType owns.
	g_object_interface_list_properties() includes all properties, even the
	properties of possible base classes, but those properties should be
	generated for the base classes and not for a derived GType.

2011-05-03  Kalev Lember  <kalev@smartlink.ee>

	gmmproc: Put guards around generated includes in wrap_init.cc

	* tools/generate_wrap_init.pl.in: Store include filenames in a hashmap
	(key: filename, value: cppname) so it is possible to print
	_DISABLE_DEPRECATED and G_OS_WIN32 guards around them. Bug #649182

2011-05-03  Fan, Chun-wei  <fanc999@ahoo.com.tw>

	Update the VS 2008 project files.

	* MSVC_Net2008/giomm/giomm.vcproj:
	* MSVC_Net2008/glibmm/glibmm.vcproj: Mention new source files.

2011-05-03  Fan, Chun-wei  <fanc999@ahoo.com.tw>

	Update the VS 2010 project files.

	* MSVC_Net2010/giomm/giomm.vcxproj:
	* MSVC_Net2010/giomm/giomm.vcxproj.filters:
	* MSVC_Net2010/glibmm/glibmm.vcxproj:
	* MSVC_Net2010/glibmm/glibmm.vcxproj.filters: Mention new source files.

2011-05-03  Fan, Chun-wei  <fanc999@ahoo.com.tw>

	 Update the VS 2005 project files.

	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2005/glibmm/glibmm.vcproj: Mention new source files.

2011-05-02  Kalev Lember  <kalev@smartlink.ee>

	gmmproc: Factored some copy-pasted code out to a common function

	* tools/generate_wrap_init.pl.in: Added print_with_guards() subroutine
	and replaced all _DISABLE_DEPRECATED and G_OS_WIN32 guard printing with
	calls to print_with_guards().

2011-05-03  Volker Grabsch  <bugzilla.gnome.org@v.notjusthosting.com>

	Examples build: Use the GLIB_COMPILE_SCHEMAS variable.

	* examples/Makefile.am: Instead of hard-coding glib-compile-schemas.
	This was an issue in cross-toolchain environments.
  Bug #648485.

2011-05-02  Kalev Lember  <kalev@smartlink.ee>

	Gio::DBus::Message: Fixed includes for WIN32

	* gio/src/dbusmessage.hg: Added G_OS_UNIX guards around unixfdlist.h
	include. Bug #649168

2011-04-26  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: GtkDefs::split_tokens() uses split() instead of substr().

	* tools/pm/GtkDefs.pm: GtkDefs::split_tokens() splits the string with
	split() instead of substr(). substr() can be very inefficient when splitting
	a utf8 string. Bug #644037

2011-04-06  Murray Cumming  <murrayc@murrayc.com>

	Minor documentation improvements.

	* gio/src/proxy.hg:
	* gio/src/proxyaddress.hg:
	* gio/src/proxyresolver.hg:
	* gio/src/socketcontrolmessage.hg:
	* gio/src/unixcredentialsmessage.hg:
	* gio/src/unixfdlist.hg:
	* gio/src/unixfdmessage.hg: Added these to NetworkIO doxygen group.
	* glib/glibmm.h: Mention Gio::Settings.

2011-04-06  Murray Cumming  <murrayc@murrayc.com>

	DBus docs: Add a descripton for the doxygen group.

	* gio/src/dbusconnection.hg: Expand the defgroup doxygen comment block.

2.28.0:

2011-04-05  Murray Cumming  <murrayc@murrayc.com>

	DBusServer: Add overview documentation.

	* gio/src/dbusserver.hg: Based on my documentation patch for GDBusServer
	in bug #646425.

2011-04-04  Murray Cumming  <murrayc@murrayc.com>

	ThemedIcon: Remove a property as suggested by a TODO.

	* gio/src/themedicon.hg: The name property is write-only and construct-only
	so we should not have any API for it.
	Noticed by Kjell Ahlstedt.

2011-04-04  Murray Cumming  <murrayc@murrayc.com>

	Gio::Settings: Really add list_schemas().

	* gio/src/gio_others.defs: Add g_settings_list_schemas(), though we do not
	actually use this defnition yet. See below. This must be hand-written
	because h2defs.py gets confused by the return type.
	* gio/src/settings.[hg|ccg]: list_schemas(): Make this static and hand-code
	it because gmmproc is confused by the declaration when it is static.
	Noticed by Kjell Ahlstedt.

2011-04-02  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus examples: Renamed one and removed one.

	* examples/dbus/server.cc: Rename this to server_without_bus.cc to make its
	purpose clearer. This is not the common case. It is for private peer-to-peer
	connections not involving the usual session or system buses, or any bus
	for that matter. Meaning, for instance, that it does not assign names or
	provide introspection, I think.
	* examples/dbus/peer.cc: Removed this because it seems like just a
	complicated version of the server_without_bus example, and this is not in sync
	with the C versoin. Well, we should probably add a client for the server
	example.
	* examples/Makefile.am: Adapted.

2011-04-02  Murray Cumming  <murrayc@murrayc.com>

	Slight cleanup to D-Bus example code.

	* examples/dbus/server.cc:
	* examples/dbus/session_bus_service.cc: Remove code to handle the now
	non-existant GetStdOut D-Bus method. That code was left over from an earlier
	version of an example.

2011-04-02  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus::NodeInfo::lookup_interface(): Add a method overload with no name.

	* gio/src/dbusintrospection.[hg|ccg]: Add a lookup_interface() method overload
	that just returns the first interface, avoiding the need to specify the name
	when there is only one interface. The C API will not do this itself:
	See bug #646417.
	* examples/dbus/peer.cc:
	* examples/dbus/server.cc:
	* examples/dbus/session_bus_service.cc: Use the new method to simplify the
	code slightly.

2011-04-02  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus::Connection: Added a register_method() overload with no vtable.

	* gio/src/dbusconnection.[hg|ccg]: This makes sense now that the C API's
	documentation was improved in bug #646419.

2011-04-01  Murray Cumming  <murrayc@murrayc.com>

	Added a simple example of a D-Bus session bus service.

	* examples/dbus/session_bus_service.cc: This uses Gio::DBus::own_name().
	* examples/Makefile.am: Mention the new test.
	* examples/dbus/server.cc: Mention the return (out) value for the GetTime
	method here too, and catch an exception.

2011-04-01  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus: Minor API changes.

  * gio/src/dbusconnection.[hg|ccg]: register_object(), register_subtree():
  Take the VTable by reference, not pointer. register_object() can take a NULL
  but that needs documentation (see the bug mentioned) and a future method
  overload.
  * gio/src/dbusmethodinvocation.ccg: get_parameters(): Return a
  VariantContainerBase instead of taking a VariantBase output parameter,
  because this is always a tuple. Well, I think so: See the bug mentioned.
  * gio/src/dbusmethodinvocation.hg: return_value(): Take a VariantContainerBase
  instead of a VariantBase, because this is always a tuple.
  return_gerror(), return_error_literal(): Rename them both to return_error().
  * glib/src/variant.hg: VariantContainerBase::create_tuple(): Add a method
  overload that takes a single VariantBase, for convenience, so that applications
  don't need to create a single-item vector.
	* examples/dbus/busserver.cc: Adapted.
	* examples/dbus/busserver.cc: Rename to server.cc and actually implement it,
	though I am currently confused about whether this server's object should be
	available on an existing bus. Maybe we should use Gio::DBus::own_name()
	instead of Gio::DBus::Server.

2011-04-01  Murray Cumming  <murrayc@murrayc.com>

	Rename a D-Bus client example.

	* examples/dbus/userbus.cc: Rename to client_bus_listnames.cc to make it
	more obvious what it does.

2011-03-31  Murray Cumming  <murrayc@murrayc.com>

	DBusProxy: Rename type_map_changed_properties to MapChangeProperties.

	* gio/src/dbusproxy.[hg|ccg]: Use our normal convention for container
	typedefs.

2011-03-30  Murray Cumming  <murrayc@murrayc.com>

	Use the latest mm-common.

	* configure.ac: Require the latest version.
	* doc/Makefile.am: Don't specify the mm-common .pl files to distribute
	because mm-common now does this automatically.

2.27.99.2:

2011-03-29  Murray Cumming  <murrayc@murrayc.com>

	Variant: Rename get(index) to get_child(index).

	* glib/src/variant.[hg|ccg]: Rename all get() methods that return children
	to get_child() to make the API clearer and to avoid ambiguity with get()
	methods that return the underlying type instead.
	* examples/dbus/peer.cc:
	* examples/dbus/userbus.cc:
	* tests/glibmm_variant/main.cc: Adapted.
  https://bugzilla.gnome.org/show_bug.cgi?id=644207#c7
  (Yannick Guesnet)

2011-03-29  Murray Cumming  <murrayc@murrayc-desktop>

	FileUtils: Correct my previous commit.

	* glib/src/fileutils.ccg:
	* glib/src/iochannel.ccg: Do not create a ustring instead of a std::string.

2011-03-29  Murray Cumming  <murrayc@murrayc.com>

	Use the utility functions for creating strings.

	* gio/src/dbuserrorutils.ccg:
	* gio/src/dbusownname.ccg:
	* gio/src/dbusutils.ccg:
	* gio/src/dbuswatchname.ccg:
	* glib/src/fileutils.ccg:
	* glib/src/iochannel.ccg:
	* glib/src/markup.ccg:
	* glib/src/variant.ccg: Use convert_const_gchar_ptr_to_ustring() and
	convert_const_gchar_ptr_to_stdstring(), simplifying code and sometimes
	avoiding crashes with NULL const char*.

2011-03-29  Murray Cumming  <murrayc@murrayc.com>

	Variant<std::string>::get(): Correct my custom implementation.

	* glib/src/variant.ccg: Really call g_variant_get_bytestring().

2011-03-29  Murray Cumming  <murrayc@murrayc.com>

	Variant: Move constructor definitions into the .cc file.

	* glib/src/variant.[hg|ccg]: The implementations of constructors for
	template specializations do not need to be inline. This lets us fix them
	later without requiring recompilation of applications.

2011-03-29  Murray Cumming  <murrayc@murrayc.com>

	Variant: Really declare the cast_dyamic() specialization for ustring.

	* glib/src/variant.[hg|ccg]: Mention the specialization in the .h file instead
	of just in the .cc file.
	Also write a custom Variant<std::string>::get() implementation because this
	can be used for types other than just bytestring.
	* tests/glibmm_variant/main.cc: Add tests for the new casts.

2011-03-28  Krzesimir Nowak  <qdlacz@gmail.com>

	ArrayHandle: Make it compilable with MSVC 2005, 2008, 2010.

	* glib/glibmm/arrayhandle.h: Put operator std::container methods
	definitions inside class template definition. Also added decrementation
	operators for ArrayHandleIterator for MSVC 2005.
	Bug #645851 (Fan, Chun-wei)

2011-03-28  Murray Cumming  <murrayc@murrayc.com>

	Variant: Use the VARIANT_TYPE_* constants.

	* glib/src/variant.ccg: Use the constants instead of creating static members.

2011-03-28  Murray Cumming  <murrayc@murrayc.com>

	VariantType: Capitalize the standard types.

	* glib/src/varianttype.[hg|ccg]: Use, for instance VARIANT_TYPE_STRING instead
	of VariantTypeString. This seems more appropriate for a constant and is the
	style used by gtkmm's STOCK_* items, which this is based on.
	* glib/src/variant.ccg: Adapt.

2011-03-28  Murray Cumming  <murrayc@murrayc.com>

	Variant: Add cast_dynamic<> specializations for strings.

	* glib/src/variant.[hg|ccg]: Add cast_dynamic() specializations for
	Vector<std::string> and Vector<Glib::ustring>, because this type seems
	appropriate for multiple types. For instance, see
	http://library.gnome.org/devel/glib/unstable/glib-GVariant.html#g-variant-get-string
	Thanks to Povietkin Konstantin.

2.27.99.1:

2011-03-27  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus*: More use of VariantContainerBase.

	* gio/src/dbusconnection.hg:
	* gio/src/dbusinterfacevtable.hg: Correct the documentation.
	* gio/src/dbusproxy.[hg|cgg]: call(): Take a VariantContainerBase instead of
	a VariantBase.
	signal: Provide a VariantContainerBase instead of a VariantBase, though this
	is not documented as necessarily being a tuple, though it is multiple
	values.

2011-03-27  Murray Cumming  <murrayc@murrayc.com>

	Balanced Tree: Clean up the documentation.

	* glib/src/balancedtree.hg: Use doxygen syntax.

2011-03-25  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus: Use VariantContainerBase for tuple Variants.

	* gio/src/dbusconnection.[hg|ccg]:
	* gio/src/dbusproxy.ccg.[hg|ccg]: call_sync(), call(), call_finish():
	Use VariantContainerBase, instead of VariantBase, for GVariants that are
	documented as being tuples. Because the type is known we can also use
	it as a simple return type instead of an output parameter.
	* tools/m4/convert_gio.m4: Added a necessary conversion.
	* examples/dbus/peer.cc:
	* examples/dbus/userbus.cc: Adapted. These already correctly assumed that
	the type should be VariantContainerBase.

2.27.99:

2011-03-24  Murray Cumming  <murrayc@murrayc.com>

	Remove Gio::Application and friends for now because they are not finished.

	* gio/src/actiongroup.[hg|ccg]:
	* gio/src/application.[hg|ccg]:
	* gio/src/applicationcommandline.[hg|ccg]: Removed these temporarily
	because we removed Gtk::Application temporarily from gtkmm.
	See http://mail.gnome.org/archives/gtkmm-list/2011-March/msg00062.html

2011-03-24  Murray Cumming  <murrayc@murrayc.com>

  Regenerate the XML for the C API documentation.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Regenerated with docextract_to_xml.py.

2011-03-24  Murray Cumming  <murrayc@murrayc.com>

	Gio: Remove SettingsBackend.

	* gio/src/settingsbackend.[hg|ccg]: Remove these because we do not know yet
	if implementing GSettings backends is useful or encouraged, and our wrapper
	is unimplemented, requiring an ABI break to fix it when adding the virtual
	methods.
	* gio/src/filelist.am: Remove mention of the files.
	* gio/src/settings.hg: Remove use of SettingsBackend here too. Unfortunately
	this might have been slightly useful but we cannot provide this API without
	freezing a SettingsBackend API.

2011-03-24  Murray Cumming  <murrayc@murrayc.com>

	More minor documentation corrections.

	* gio/src/dbusauthobserver.hg:
	* gio/src/dbusconnection.hg:
	* gio/src/dbusmessage.hg:
	* gio/src/dbusmethodinvocation.hg:
	* gio/src/dbusproxy.hg:
	* gio/src/dbusserver.hg:
	* gio/src/dbussubtreevtable.hg:
	* glib/src/varianttype.hg: More fixes since the change from DBus* to DBus::.

2011-03-24  Murray Cumming  <murrayc@murrayc.com>

	Documentation: Change DBus to D-Bus.

	* glib/src/varianttype.hg: Use the correct name for D-Bus.
	I made the same change in the C documentation.

2011-03-24  Murray Cumming  <murrayc@murrayc.com>

	Variant: Improved the documentation, based on the C documentation.

	* glib/src/variant.hg: Also changed two methods to take std::string by
	const &.

2011-03-24  Murray Cumming  <murrayc@murrayc.com>

	Avoid a tarball dependency on mm-common.

	* configure.ac: Add a call to MM_CONFIG_DOCTOOL_DIR() telling it to
	copy the files locally and use them from there.
	* docs/Makefile.am: Dist the copied files, so that the build does not
	try to use the versions installed by mm-common.

2.27.98:

2011-03-23  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus::InterfaceVTable: Make the tuple clearer.

	* gio/src/dbusinterfacevtable.[hg|ccg]: SlotInterfaceMethodCall: Change
	the VariantBase type to a VariantContainerBase, because this is a tuple,
	so people should get the children. This makes it more obvious.
	DBusInterfaceVTable_MethodCall_giomm_callback(): Adapt.
	Suggested by Michael Edwards.

2011-03-23  Murray Cumming  <murrayc@murrayc.com>

	Gio::DBus: Move InterfaceVTable and SubtreeVTable to their own files.

	* gio/src/dbusinterfacevtable.[hg|ccg]:
	* gio/src/dbussubtreevtable.[hg|ccg]: Moved code here from
	* gio/src/dbusconnection.[hg|ccg].
	* gio/src/filelist.am: Mention the new files.

2011-03-21  Murray Cumming  <murrayc@murrayc.com>

	Correct some range checks to use >= instead of just >.

	* glib/glibmm/stringutils.cc: Glib::Ascii::strtod():
	* glib/src/variant.[hg|ccg]: get(): Correct the range check. This would
	previously not have caught all wrong ranges.
	Thanks to Michael Edwards.

2011-03-20  Krzesimir Nowak  <qdlacz@gmail.com>

	Vectorutils, ArrayHandle: Check for NULL pointers.

	* glib/glibmm/vectorutils.[h|cc]: Don't crash in compute_array_size2, when
	NULL is passed - in that case just return 0. Also, array_to_vector method
	return empty vector in such case.
	* glib/glibmm/arrayhandle.[h|cc]: Set array_size to zero if passed array
	is NULL.
	* tests/glibmm_null_vectorutils/main.cc: New test for NULL arrays and lists
	for vectorutils.
	* tests/glibmm_null_containerhandle/main.cc: New test for NULL arrays and lists
	for containerhandles.
	* tests/Makefile.am: Added new tests to build.

2011-03-21  Murray Cumming  <murrayc@murrayc.com>

	Date: Document that some methods return *this, and why.

	* glib/src/date.hg: Thanks to Kjell Ahlstedt:
	http://mail.gnome.org/archives/gtkmm-list/2011-March/msg00049.html

2.27.97:

2011-03-16  Murray Cumming  <murrayc@murrayc.com>

	Variant: Remove unncessary Glib:: namespace qualification.

	* glib/src/variant.[hg|ccg]
	* glib/src/variantiter.hg:
	* glib/src/varianttype.hg: Remove the unnecessary Glib:: namespace
	qualification in the API and documentation.

2011-03-16  Murray Cumming  <murrayc@murrayc.com>

	Gio::Variant: Add some get() method overloads.

	* glib/src/variant.[hg|ccg]: Variant<VariantBase>: Add a get(VariantBase&)
	along with the existing VariantBase get().
	VariantContainerBase: Added a VariantBase get() to match the existing
	get(VariantBase&). Both seem useful, particularly now that we can
	cast_dynamic them.

	VariantContainerBase::get() should maybe be renamed to get_child() too.

2011-03-16  Murray Cumming  <murrayc@murrayc.com>

	Dbus::Proxy: properties_changed signal: Avoid namespace qualifiers in header.

	* gio/src/dbusproxy.[h|ccg]: Add a typedef to the .ccg file to help the
	compiler so we do not need the namespace qualifiers in the API.

2011-03-16  Yannick Guesnet  <Yannick.Guesnet@univ-rouen.fr>

	DBus::Proxy: Added signal properties_changed

	* gio/src/dbusproxy.hg: Add signal properties_changed.
	* gio/src/gio_signals.defs: Change the type of a parameter of
	signal g-properties-changed from "GStrv" to
	"const gchar * const *" to match the signal declaration.

	Bug #644886

2011-03-16  Murray Cumming  <murrayc@murrayc.com>

	Gio::Variant: Use _WRAP_METHOD() instead of hand-coding.

	* glib/src/variant.[hg|ccg]: Use _WRAP_METHOD() for two hand-coded methods.

2011-03-16  Yannick Guesnet  <Yannick.Guesnet@univ-rouen.fr>

	Variant: Added Variant<VariantBase>::get().

	* glib/src/variant.[ccg|hg]: Added Variant<VariantBase>::get().
	* tests/glibmm_variant/main.cc: Add some tests.

	This is useful because Variant<VariantBase> can be manipulate as other
	variants of type Variant<T>. This allow, for example, to define variants
	of type Variant<std::map<ustring, VariantBase> >.

	Bug #644207.

2011-03-14  Yannick Guesnet  <Yannick.Guesnet@univ-rouen.fr>

  Variant: Add a cast method.

	* gio/src/glib/src/variant.[ccg|hg]: Add a VariantBase::cast_dynamic()
	static method.
	* tests/glibmm_variant/main.cc: Add some tests.

	This is useful because VariantBase can and will be passed by value sometimes
	and DBus may have actual Variant types whose underlying type will not be
	known at compile time (this note was by Murray).

	Bug #644146

2011-03-16  Murray Cumming  <murrayc@murrayc.com>

	Fix missing doc-install.pl problem with the tarball build.

	* configure.ac: Remove the call to MM_CONFIG_DOCTOOL_DIR() so we do not copy
	the mm-common doc utils into glibmm and do not try to use local copies of
	them. This is what gtkmm and other modules do so it makes sense to do it now
	for glibmm now that glibmm is not the one that supplies these for pkg-config.
	This fixes bug #644829 (David Ronis) with the tarball build and
	Ubuntu launchpad bug
	https://bugs.launchpad.net/ubuntu/+source/glibmm2.4/+bug/735856
	(Krzysztof Klimonda)

	However, I can see the point of distributing copies in the tarball, which
	could make the tarball build not need mm-common at all. But if we want that
	then we should decide to do it for gtkmm and other modules too.

2.27.96:

2011-03-15  Murray Cumming  <murrayc@murrayc.com>

	Do not install the doctool/*.pl scripts, such as doc-install.pl.

	* docs/Makefile.am: These were already installed by mm-common too, and are
	now discovered via pkg-config from mm-common-util, by the existing
	macro. No changes should be necessary to other modules, though autogen.sh
	might need to be run again.

2011-03-11  Murray Cumming  <murrayc@murrayc.com>

	FileInfo: Added more TODOs about using ustring instead of std::string.

	* gio/src/fileinfo.hg:
	See https://bugzilla.gnome.org/show_bug.cgi?id=615950#c7
	(Kjell Ahlstedt)

2011-03-11  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	Tell gmmproc that it reads and writes UTF-8 files.

	* tools/pm/GtkDefs.pm:
	* tools/pm/Output.pm:
	* tools/pm/WrapParser.pm: Add 'use open IO => ":utf8";'. Bug #644037

2011-03-09  Murray Cumming  <murrayc@murrayc.com>

	FileInfo: Add TODOs about using ustring instead of std::string.

	* gio/src/fileinfo.hg: The C documentation says that some of these are
	UTF-8.
	See https://bugzilla.gnome.org/show_bug.cgi?id=615950#c4
	(Kjell Ahlstedt)

2011-03-09  Murray Cumming  <murrayc@murrayc.com>

	DBus::InterfaceVTable: Use g_error_copy() where appropriate.

	* gio/src/dbusconnection.ccg: DBusInterfaceVTable_SetProperty_giomm_callback(),
	DBusInterfaceVTable_GetProperty_giomm_callback(): Copy the GError instead of
	just copying the pointer, because it will be freed along with the parent
	Glib::Error.
	Bug #644008 (Yannick.Guesnet)

2011-03-04  Murray Cumming  <murrayc@murrayc.com>

	Gio::Application::open(file): Fix this.

	* gio/src/application.ccg: There should be one item, not two.

2011-03-04  Murray Cumming  <murrayc@murrayc.com>

	Gio::Application: open(): Added a single-file method overload.

	* gio/src/application.[hg|ccg]: Added an open() overload that takes a single
	Gio::File instead of a vector of Gio::Files.

2011-03-04  Murray Cumming  <murrayc@murrayc.com>

	Gio::Application: Fix a signal definition.

	* gio/src/application.hg: The command-line signal returns an int, not a bool.

2011-03-04  Murray Cumming  <murrayc@murrayc.com>

	Gio::Application: Added get_environ().

	* gio/src/gio_others.defs: Add a hand-written definition for this, because
	h2defs.py ignores functions with this return type.
	* gio/src/applicationcommandline.hg: Wrap the function.

2011-03-04  Murray Cumming  <murrayc@murrayc.com>

	ApplicationCommandLine: Use std::string instead of ustring in some API.

	* gio/src/applicationcommandline.hg: The C documentation says that some
	return strings could be non-UTF-8.

2011-02-28  Murray Cumming  <murrayc@murrayc.com>

	Application: Wrap the local_command_line vfunc, though it is not finished.

	* gio/src/application.hg:
	* gio/src/gio_vfuncs.defs: Wrap the local_command_line vfunc, though see
	the bug report in the comment.

2.27.95:

2011-02-24  Murray Cumming  <murrayc@murrayc.com>

	tests: Remove remaining use of std::cout.

	* tests/giomm_ioerror/main.cc:
	* tests/giomm_simple/main.cc: Hid some use of std::cout that I missed in my
	previous commit.

2011-02-24  Murray Cumming  <murrayc@murrayc.com>

	tests: Use EXIT_* for clarity.

	* tests/*.cc: Use EXIT_SUCCESS rather than 0 because I think that is clearer.

2011-02-24  Murray Cumming  <murrayc@murrayc.com>

	Actually run all tests, and check some failures.

	* tests/Makefile.am: Add all tests to TESTS so they are really run during
	make check, instead of just built.
	* tests/giomm_asyncresult_sourceobject/main.cc:
	* tests/giomm_ioerror/main.cc:
	* tests/giomm_simple/main.cc:
	* tests/glibmm_bool_arrayhandle/main.cc:
	* tests/glibmm_bool_vector/main.cc:
	* tests/glibmm_buildfilename/main.cc:
	* tests/glibmm_date/main.cc:
	* tests/glibmm_ustring_compose/main.cc:
	* tests/glibmm_valuearray/main.cc:
	* tests/glibmm_variant/main.cc:
	* tests/glibmm_vector/main.cc: Remove all use of std::cout by default,
	allowing it to be renabled by changing a line.
	Return (or) exit with EXIT_FAILURE after any use of std::cerr, so that
	make check can report it.

2011-02-24  Murray Cumming  <murrayc@murrayc.com>

	Restore the Gio::DBus::Error registration.

	* tools/generate_wrap_init.pl.in: Use a qualified C++ name for the key in
	the associated-array of exceptions. This seems to work, though it feels very
	hacky.

2011-02-24  Murray Cumming  <murrayc@murrayc.com>

	Rename Gio::DBus::DBusError to Gio::DBus::Error.

	* gio/src/dbuserror.hg: Rename the class to Error.
	* examples/dbus/busserver.cc: Adapated.
	* tests/giomm_ioerror_and_iodbuserror/main.cc: Added a test to check that
	both Gio::Error and Gio::DBus::Error are working.
	* tests/Makefile.am: Set TESTS, so that the test is actually run.
	We should add others to this too.

	This current fails, so I need to fix the problem in a subsequent commit.

2011-02-24  Murray Cumming  <murrayc@murrayc.com>

	Move Gio::DBusError to Gio::Dbus::DBusError.

	* tools/m4/base.m4: Added a SECTION_H_GERROR_PRIVATE section.
	* tools/m4/gerror.m4: Import the SECTION_H_GERROR_PRIVATE section.
	* gio/src/dbuserror.hg: Put this back into the DBus namespace.
	Push a custom friend declaration into the SECTION_H_GERROR_PRIVATE section,
	because the standard generated friend declaration would not specify the
	correct one.
	This still does not rename DBusError to DBus::Error, but this is a step on
	the way.
	* examples/dbus/busserver.cc: Adapated.

2011-02-23  Murray Cumming  <murrayc@murrayc.com>

	Bring back Gio::Error registration.

  * gio/src/error.[hg|ccg]: Move Gio::DBus::Error to
	* gio/src/dbuserror.[hg|ccg]: and temporarily rename it to Gio::DBusError
	because generate_wrap_init.pl.in is wrapping only on of Gio::Error and
	Gio::DBus::Error. Unfortunately, we need to fix the generation to handle
	this properly even when it is called Gio::DBus::DBusError.

2011-02-21  Murray Cumming  <murrayc@murrayc.com>

	Mark some new API.

	* glib/glibmm/miscutils.h: Add @newin{2,28} to the new build_filename()
	overloads.

2011-02-21  Fabricio Godoy  <skarllot@gmail.com>

	Extended build_filename() to accept up to nine parameters.

	* glib/glibmm/miscutils.[h|cc]: Added build_filename() method overloads that
	take more parameters, for convenience.
	* tests/Makefile.am
	* tests/glibmm_buildfilename/main.cc: Added a new testcase.

2.27.94:

2011-02-21  Murray Cumming  <murrayc@murrayc.com>

	Fix the build with --enable-warnigns=fatal.

	* glib/glibmm/arrayhandle.h: Remove some typename keywords to avoid this
	compiler warning:
	"error: using ‘typename’ outside of template"

2011-02-02  Krzesimir Nowak  <qdlacz@gmail.com>

	Added bool specialization for Glib::ArrayHandle.

	* glib/glibmm/arrayhandle.h: Added specialization for bool ArrayHandle.
	This is needed because std::vector<bool> is a specialization for which
	iterators does not return a reference to actual value it holds.
	* glib/glibmm/arrayhandle.cc: New file implementing destructor of
	bool ArrayHandle - the only method that is not inlined.
	* glib/glibmm/filelist.am: Added new source file to build.
	* tests/glibmm_bool_arrayhandle/main.cc: New file implementing test
	checking if bool ArrayHandle actually works.
	* tests/Makefile.am: Added new test to build.

2011-02-17  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	OptionGroup: Fix build error, remove memory leak.

	* glib/src/optiongroup.ccg: Fix build error with --enable-warnings=fatal.
	Remove memory leak when the same OptionEntry is added twice.
	Bug #589197 (Hubert Figuiere)

2011-02-16  Murray Cumming  <murrayc@murrayc.com>

	Move the DBus classes into a Gio::DBus namespace.

	* gio/giomm.h:
	* gio/src/dbus*.[hg|ccg]
	* gio/src/error.hg: Rename all DBus* classes to remove the prefix, putting
	them in a Gio::DBus namespace.
	This required the use of the new _GMMPROC_EXTRA_NAMESPACE macro, to avoid
	generating a confused wrap_init.cc.
	Along the way, I removed unnecessary class predeclarations, instead including
	the relevant header, because that is more convenient for users of the API.
	* gio/src/dbuserror.[hg|ccg]: Renamed to dbuserrorutils.[hg|ccg] and
	renamed the Error namespace to ErrorUtils, to avoid a clash with the
	Gio::DBus::Error exception.
	* gio/src/filelist.am:
	* tools/m4/convert_gio.m4: Changed some conversions.
	* examples/dbus/busserver.cc:
	* examples/dbus/peer.cc:
	* examples/dbus/userbus.cc: Adapted.

	This is generally more organized. A prefix, instead of a namespace, looked
	generally wrong to C++ coders.

2011-02-16  Murray Cumming  <murrayc@murrayc.com>

	gmmproc: Allow some classes to be in a sub-namespace.

	* tools/m4/class_shared.m4:
	* tools/generate_wrap_init.pl.in: Add a _GMMPROC_EXTRA_NAMESPACE(thenamespace)
	macro, so that wrap_init.cc will have the correct pre-declarations of the
	wrap_new() and get_type() functions.
	I am suprised that we have no other way to do this already, but I cannot
	find one, and this hack works.

2011-02-15  Murray Cumming  <murrayc@murrayc.com>

	OptionGroup: Minor code style changes.

	* glib/src/optiongroup.[hg|ccg]: Use the explicit keyword and use a _
	suffix for member variables.

2011-02-14  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

  OptionGroup: Add add_entry() that takes a slot with callback function.

	* glib/src/optiongroup.[hg|ccg]: Add add_entry() and add_entry_filename()
	that take a slot. Add protected option_arg_callback().
	An exception thrown by on_pre_parse() or on_post_parse() is propagated
	to the error argument of g_callback_pre_parse() or post_parse_callback().
	* glib/src/optionentry.hg: Add description of set_flags().
	* examples/options/main.cc: Add more OptionEntries and callback functions
	for parsing command option values.
	Bug #589197 (Hubert Figuiere)

2011-02-15  Murray Cumming  <murrayc@murrayc.com>

	Dealt with several TODOs.

	* gio/src/*.[hg|ccg]: Mostly just adding hand-coded documentation,
	and changing some new methods to use std::vector.

2011-02-15  Murray Cumming  <murrayc@murrayc.com>

	Update the .defs for signals and properties.

	* tools/extra_defs_gen/generate_defs_gio.cc: Mention more GDbus types.
	* tools/extra_defs_gen/generate_defs_glib.cc: Mention some types, though
	none have properties or signals.
	* gio/src/gio_signals.defs: Regenerated, though there are no new properties or
	signals.

2011-02-15  Murray Cumming  <murrayc@murrayc.com>

	Regenerate the XML of the C documentation.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Regenerated with docextract_to_xml.py.

2011-02-15  Murray Cumming  <murrayc@murrayc.com>

	Require glib 2.28.0.

	* configure.ac: Update the version check.

2011-02-08  Murray Cumming  <murrayc@murrayc.com>

	Fix the make check build with --enable-warnings=fatal.

	* examples/options/main.cc: Comment-out unused method parameters.

2011-02-06  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	OptionGroup: An on_post_parse() override need not call the base class.

	* glib/src/optiongroup.[hg|ccg]: The C post_parse callback is a static
	protected member function, which performs all necessary post-parsing.
	OptionGroup::on_post_parse is a dummy function.
	* examples/options/main.cc: The on_pre_parse, on_post_parse, and on_error
	overrides don't call the base class functions.
	Bug 588988 (Hubert Figuiere)

2011-02-01  Kjell Ahlstedt  <kjell.ahlstedt@bredband.net>

	gmmproc: Add optional arguments custom_vfunc[_callback] to _WRAP_VFUNC.

	* tools/pm/Output.pm:
	* tools/pm/WrapParser.pm: Add handling of optional arguments
	custom_vfunc[_callback] in _WRAP_VFUNC. Bug 641165.

2.27.93:

2011-01-21  Krzesimir Nowak  <qdlacz@gmail.com>

	Vector utils: Corrected documentation and extended it bit.

	* glib/glibmm/vectorutils.h: Documented important parts of *Keeper classes
	and corrected examples in *Handler classes. The documentation mostly tries
	to explain memory management.

2011-01-30  Murray Cumming  <murrayc@murrayc.com>

	Vector utils: Added simple documentation.

	* glib/glibmm/vectorutils.h: Some simple documentation about the *Handler
	utility classes, though I need to correct the example code and explain the
	memory mangement when that is clear to me.

2011-01-28  Murray Cumming  <murrayc@murrayc.com>

	ArrayHandle, ListHandle, SListHandle: Document these as almost-deprecated.

	* glib/glibmm/arrayhandle.h:
	* glib/glibmm/listhandle.h:
	* glib/glibmm/slisthandle.h: Mention that we try not to use these now,
	though we cannot actually deprecate them yet without forcing other libraries
	such as pangomm to deprecate the methods that use them, which they cannot
	really do because they cannot just add a method overload without introducing
	ambiguity.

2011-01-27  Chris Kühl  <chrisk@openismus.com>

	Changed glib include to build cleanly with GLIB_DISABLE_SINGLE_INCLUDES.

	* glib/src/balancedtree.hg: Changed <glib/gtree.h> to <glib.h>.

2011-01-24  Krzesimir Nowak  <qdlacz@gmail.com>

	Added vectorutils.h.

	* glib/glibmm/vectorutils.[h|cc]: New files implementing an array, list,
	slist <-> std::vector convertions. It implements also a specialization
	for bool types.
	* glib/glibmm.h: Include vectorutils.h.
	* glib/glibmm/filelist.am: Added vectorutils to build.
	* tests/glibmm_vector/main.cc: New test for general vectorutils check.
	* tests/glibmm_bool_vector/main.cc: New test checking bool specializations.
	* tests/Makefile.am: Added above tests to build system.

2011-01-20  Murray Cumming  <murrayc@murrayc.com>

	Resolver: lookup_service(), lookup_by_address(): Fix the reference counting.

	* gio/src/resolver.[hg|ccg]: Use the correct OWNERSHIP_*, based on the
	documentation for the C functions. We must release both the list and the
	items.
	Bug #639575 (Michael Edwards)

2011-01-20  Murray Cumming  <murrayc@murrayc.com>

	Application: Fix the build.

	* gio/src/application.ccg: Include giomm/init.h.

2011-01-19  Murray Cumming  <murrayc@murrayc.com>

	Application: Constructor: Initialize glibmm and giomm.

	* gio/src/application.[hg|ccg]: Use a custom klass init function to
	make sure that glibmm and giomm are initialized when Gio::Application is
	instantiated, so it is then unnecssary to call them explicitly.

2.27.91.1:

2011-01-17  Murray Cumming  <murrayc@murrayc.com>

	Fix the make check build.

	* examples/dbus/busserver.cc: Comment out unused methods, to fix the
	build. I guess this example is still in progress. Otherwise, the commented
	code should really be removed.

2010-12-22 Murray Cumming <murrayc@murrayc.com>

  gmmproc: _CLASS_GOBJECT: reverted removal of __REAL_* arguments.

  This is still needed for the gtkmm-2-24 branch.

2011-01-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Add initial implementation of a bus server/client example.

	* examples/Makefile.am:
	* examples/dbus/busserver.cc: Add a partial implementation of the
	server part of a server/client example that communicate through the
	user's bus.
	* examples/dbus/peer.cc: Typos.

2011-01-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add a send_message() without an "out_serial" param.

	* gio/src/dbusconnection.{ccg,hg} (send_message): Add new method
	without the "out_serial" param.
	* gio/src/unixfdlist.hg (append): Add exception docs to method.

2011-01-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::[watch|own]_name(): Add default values for parameters.

	* gio/src/dbusownname.{ccg,hg} (own_name):
	* gio/src/dbuswatchname.{ccg,hg} (watch_name): Add default values for
	the slot parameters instead of writing up overloads since there would
	be many.  Also reorder the parameters so that the flags have default
	values.

2011-01-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	InetAddress: Wrap properties.

	* gio/src/inetaddress.hg: Wrap the properties.
	* gio/src/dbusconnection.hg: Typo.

2011-01-15  Chris Kühl  <chrisk@openismus.com>

	Added conversion from bool& to gboolean*.

	* tools/m4/convert_glib.m4: Added conversion from bool& to gboolean*.

2011-01-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusServer: Comment out constructors because of bug #639478.

	* gio/src/dbusserver.{ccg,hg}: Comment out the constructors because
	the C new function does more than calling g_initable_new().

2011-01-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant: Use variant_type() functions in implementation where possible.

	* glib/src/variant.ccg: Use the existing variant_type() functions
	where possible.
	* gio/src/dbusserver.ccg: File bug #639478 about GDBusServer's new
	function doing more than using g_initable_new().

2011-01-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant: Have the variant_type() functions return actual types.

	* glib/src/variant.hg: Correct the variant_type() functions of the
	container derived classes to create and return actual variant types
	and not abstract ones.  Also use the functions in the implementation
	of the existing methods.

2011-01-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Avoid errors/exceptions in callbacks due to NULL C strings.

	* gio/src/dbusconnection.ccg: Modify the callbacks so that if a C
	string parameter might be NULL, it is passed to the slots as an empty
	string ("").  This avoids possible exceptions from constructing a
	Glib::ustring from NULL.
	* gio/src/dbusconnection.hg: Typos.

	* examples/dbus/peer.cc: Add the usage examples from the C API's
	example.

2011-01-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusServer: Add docs to the signal_new_connection() signal.

	* gio/src/dbusserver.hg: Add the docs from the C API to make sure it
	clear to users that when handling the "new-connection" signal that a
	reference to the new connection must be kept or the connection will
	not be accepted.

	* examples/dbus/peer.cc: Make an exception message more general to
	cover both a possible exception from the call_sync() call and the
	close_sync() call.

2011-01-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection, DBusMessage: Wrap properties and signals.

	* tools/extra_defs_gen/generate_defs_gio.cc:
	* gio/src/gio_signals.defs: Add the GDBusConnection and the
	GDBusMessage types to the signal and properties generation tool and
	regenerate the defs file.

	* gio/src/dbusconnection.hg: Wrap the properties and signals.
	* gio/src/dbusmessage.hg: Wrap the properties (no signals).
	* gio/src/dbusproxy.hg: Comment out a write-only/construct-only
	property.

2011-01-12  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus Peer Example: Correct some code to complete the example.

	* examples/dbus/peer.cc (keep_connection): renamed to curr_connection.
	(on_method_call): Place the return value of the method in a tuple
	which is then returned.
	(curr_connection): Use this variable to manage incoming connections.
	The C API docs says that when handling ther DBusServer's
	signal_new_connection() a reference to the connection should be kept
	and the handler should return true if the connection should be kept.
	This variable keeps a reference to the current connection.  When the
	caller finishes, it closes the connection thus allowing the server to
	accept another connection.
	(try/catches): Add return statements in the catches that fail so that
	execution does not continue.

	The example runs successfully with the previous commit and the patch
	in bug #639391 filed in the glib bugzilla product page.  Hopefully the
	request will be accepted.

2011-01-12  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Check for NULL bus name in the MethodCall callback.

	* gio/src/dbusconnection.ccg
	(DBusConnection_Message_Filter_giomm_callback): Since the sender can
	be NULL, check for that so that creating a Glib::ustring from a NULL
	does not cause exceptions.

2.27.91:

2011-01-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: call*() methods: Re-order bus_name parameter.

	* gio/src/dbusconnection.{ccg,hg} (call*): Place the bus_name
	parameter before the timeout_msec parameter to make it easier to
	specifiy a bus name without having to set a timeout value.

	* gio/src/dbusaddress.hg (get_for_bus_sync): Correct declarations to
	return std::string instead of Glib::ustring in accordance with the
	last commit.

2011-01-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Use std::string for addresses since they could be a file path.

	* gio/src/dbusaddress.{ccg,hg}:
	* gio/src/dbusconnection.{ccg,hg}:
	* gio/src/dbusserver.{ccg,hg}: Use std::string instead of
	Glib::ustring for address parameters just to avoid possible errors
	since DBus address could be a filename path as the "Addresses"
	section of the DBus introduction seems to imply:
	http://www.freedesktop.org/wiki/IntroductionToDBus.

2011-01-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Use std::string for guid's.

	* gio/src/dbusaddress.{ccg,hg}:
	* gio/src/dbusconnection.{ccg,hg}:
	* gio/src/dbusserver.{ccg,hg}:
	* gio/src/dbusutils.{ccg,hg}: Use std::string instead of Glib::ustring
	for guid's since std::string's API is probably adequate enough for
	their use.

2011-01-10  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Add a peer example to test the DBusServer class.

	* gio/src/dbusconnection.{ccg,hg}:  Reorder the VariantBase
	'parameters' parameter in the call*() methods to come after the
	method_name parameter.
	* gio/src/dbusintrospection.hg: Use refreturn for methods where the C
	API does not automatically reference the return.
	* gio/src/dbusserver.{ccg,hg}: Add non-observable constructors and
	create() methods.
	* glib/src/variant.{ccg,hg} (create_tuple): Renamed from create().
	Write this method to be more specific for tuples (it's probably the
	only case where this method might be used).  Dealing with tuples still
	feels awkward with the method.  Maybe there's a better way.

	* examples/Makefile.am:
	* examples/dbus/peer.cc:
	* examples/dbus/userbus.cc:
	* examples/dbus/well-known-address-client.cc: Add the new
	server/client peer example (named peer).  The example crashes because
	the C API seems to not deal with empty strings "" well, but at least
	there is now an example.  Making sure it runs well is necessary.  Also
	rename the previous example to userbus.cc.

2011-01-08  Krzesimir Nowak  <qdlacz@gmail.com>

	Tools: Added a defs fixer tool.

	tools/defs_fixer.pl: Helper tool to fix the generated defs. I hope
	that for most cases it will be just better than using diff and patch.

2011-01-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Callbacks: Check for NULL GError** parameters.

	* gio/src/dbusconnection.ccg: Make sure that the callbacks that set a
	GError* do not try to access a NULL pointer if NULL has been passed
	as the GError** parameter.

	Bug #637587 (Yannick Guesnet)

2011-01-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBusConnection: Callbacks: Return all Glib::Errors to caller.

	* gio/src/dbusconnection.ccg: Have to previously modified callbacks
	that deal with getting/setting properties return all Glib::Errors
	and not just Gio::DBusError types.

	Bug #637587 (Yannick Guesnet)

2011-01-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Callbacks:  Return DBusError exceptions to caller.

	* gio/src/dbusconnection.ccg: Modify the callbacks that deal with
	getting/setting properties for a DBus interface to set the GError*
	parameter if it is a DBus related GError.  This should allow receiving
	DBus exceptions if the slot throws one with respect to not being able
	to successfully get/set a property.

2011-01-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Use gobj() instead of reinterpret_cast<> for *VTable.

	* gio/src/dbusconnection.ccg: Use the gobj() of the
	DBusInterfaceVTable instead of casting it to a GDBusInterfaceVTable in
	the callbacks and in the register_object() method.

2011-01-07  Murray Cumming  <murrayc@murrayc.com>

	DBusConnection: Use const guint instead of guint const.

	* gio/src/dbusconnection.ccg: This is more consistent with other code.

2011-01-07  Murray Cumming  <murrayc@murrayc.com>

	DBusConnectionInvocation: Use refreturn on get methods.

	* gio/src/dbusmethodinvocation.hg: This seems to be necessary, though it does
	not fix bug #637587.

2011-01-07  Murray Cumming  <murrayc@murrayc.com>

	DBusConnection: Use _ suffixes on member variables.

	* gio/src/dbusconnection.[hg|ccg]: Use a _ suffix on member variables to
	avoid confusion with method parameters of the same name, though this does not
	seem to be what is causing bug #637587.

2011-01-06  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add [register|unregister]_subtree() methods.

	* gio/src/dbusconnection.{ccg,hg}: Add the new methods along with a
	corresponding class (like the one for register_object()).  Added
	method docs.  Modified the registration methods so that the vtable is
	passed and not a struct containing the slots.  Please note that this
	API feels like it could be made better before glibmm goes stable.  In
	particular, it might be nice and (maybe even possible) to not require
	that the *VTable instances be global.

2011-01-06  Murray Cumming  <murrayc@murrayc.com>

	SocketService, ThreadedSocketService: Correct ref-counting for signals.

	* tools/m4/convert_gio.m4: Remove conversions that are only for signals.
	These should not generally be in the general m4 files, to avoid them being
	used implicitly in the wrong place. This is important because they use
	different reference-taking.
	* gio/src/socketservice.hg:
	* gio/src/threadedsocketservice.hg: Add corrected conversions here.

2010-01-06  Krzesimir Nowak  <qdlacz@gmail.com>

	Gmmproc: Try harder to limit false unwrapped properties.

	* tools/pm/GtkDefs.pm: When taking list of properties that are
	unwrapped, try to filter out the properties defined in base class.

2011-01-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusServer: Correct the "active" property.

	* gio/src/dbusserver.hg: Correct the type of the "active" property.

2011-01-05  Murray Cumming  <murrayc@murrayc.com>

	BufferedInputStream, BufferedOutputStream: Correct property name.

	* gio/src/bufferedinputstream.[hg|ccg]
	* gio/src/bufferedoutputstream.[hg|ccg]: When using create_sized(), it
	tried to set the wrong property. Renaming the parameter from size to
	buffer_size fixes this.

	Bug #638616 (Michael Edwards)

2011-01-05  Krzesimir Nowak  <qdlacz@gmail.com>

	Gmmproc: Warn about unwrapped properties.

	* tools/gmmproc.in: When displaying a list of unwrapped properties,
	ignore the ones that are nonreadable and construct only.
	* tools/pm/Property.pm: Added entity_type member initialized with
	'property' value to Property class, which allows us to sort out
	which unwrapped entities are actually properties.

2.27.5.1:

2010-12-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	VariantContainerBase::create: Don't use pointers to pass the children.

	* glib/src/variant.{ccg,hg} (VariantContainerBase::create): Don't use
	pointers to the variant children to pass the array of variants, but
	instead use copies which might be more intuitive for new programmers.
	It is not clear whether this method should remain or not.  We'll have
	to wait for the example to be written.

2010-12-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	VariantContainerBase: Add a create() method from an array of variants.

	* glib/src/variant.{ccg,hg}: (VariantContainerBase::create): Add this
	method that accepts a VariantType (describing what kind of container
	should be created), and a vector of VariantBase.  Theoretically, this
	method should make creation of tuples possible.  There is no tuple
	class in standard C++ so something like this would be necessary in
	cases where tuples need to be created (to be returned, for example,
	from some method call).  The future server/client D-Bus example should
	put this method to the test.
	(VariantStringBase::create_*_path): Sink the variant after creation in
	these methods which was forgotten.
	* gio/src/dbusconnection.hg: Typos.

2010-12-28  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant test: Use the dictionary variant classes in the test.

	* glib/src/variant.{ccg,hg} (get_iter): Make all the get_iter()
	methods in the variant container classes const.
	(Variant< std::pair<K, V> >::get):
	(Variant< std::map<K, V> >::lookup):
	(std::map<K, V> Variant< std::map<K, V> >::get): Correct the getting
	of a std::pair<> from the Variant<> and the getting of children from
	the parent VariantContainerBase class.
	(Variant< std::map<K, V> >::create): Create the dictionary entries as
	Variants and then use g_variant_builder_add_value() to add them
	instead of g_variant_add() which is easier.

	* tests/glibmm_variant/main.cc: Use the updated dictionary classes in
	the test.

2010-12-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant: Add dictionary entry and dictionary specializations.

	* glib/src/varianttype.hg:
	* glib/src/variant_basictypes.h.m4: Renamed the glibmmVariant doxygen
	group to 'Variant'.
	* glib/src/variant.{ccg,hg}: Throw a std::out_of_range exception
	instead of a std::runtime_error one from methods that throw them
	because of indexes being out of bounds.
	(Variant< std::pair<K, V> >): Added this specialization to deal with a
	dictionary entry variant type.
	(Variant< std::map<K, V> >): Added this specialization to deal with
	variant dictionary types.
	(VariantContainerBase::get): Have this method throw a
	std::out_of_range exception if the index is out of range.
	(Variant< std::vector<Glib::ustring> >::get)
	(Variant< std::vector<std::string> >::get): Free the shallow copy of
	the returned string arrays in the get methods of the string variant
	arrays as the docs of the C API say.

	* gio/src/dbusconnection.hg: Added missing _IGNORE()'s.
	* gio/src/dbusproxy.hg: Updated a TODO.
	* examples/dbus/well-known-address-client.cc: Typo.

2010-12-23  Krzesimir Nowak  <qdlacz@gmail.com>

	Add a valuearray test to build.

	* tests/Makefile.am: Added a valuearray test to build instead of
	value test thrice.

2010-12-23  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add register/unregister_object() methods.

	* gio/src/dbusconnection.{ccg,hg}: Add register_object() and
	unregister_object() methods.  Use a C++ wrapper class for the
	GDBusInterfaceVTable structure so that it is possible to use slots for
	the registration.

	Fixes Bug #637587 (Yannick Guesnet)

2010-12-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: _CLASS_GOBJECT: Remove __REAL_* additional arguments.

	* tools/m4/class_gobject.m4:
	* tools/m4/class_shared.m4: Remove the use of the
	__REAL_[CNAME|CPARENT]__ variables needed to wrap some classes in
	gtkmm that were typedef to their base type (such as GdkWindow and
	GdkPixmap).  These classes have been fixed in gtk+-3 thus eliminating
	the need for the special arguments in _CLASS_GOBJECT.

2010-08-10  David Kozub  <zub@linux.fjfi.cvut.cz>

	RefPtr: Make it work with sorted containers (e.g. std::set<RefPtr<T> >).

	* glib/glibmm/refptr.h: Add operators <, <=, >, >=
	that compare RefPtrs by their underlying pointer.
	This makes RefPtr work with sorted containers (e.g. std::set<RefPtr<T> >)

	Bug #626858

2010-12-22  Yannick Guesnet  <Yannick.Guesnet@univ-rouen.fr>

	giomm: Application: Add the open signal.

	* gio/src/application.[hg|ccg]: Add signal_open(), by hand-coding instead of
	using _WRAP_SIGNAL(), because we need to change the number of parameters.

2.27.5:

2010-12-22  Murray Cumming  <murrayc@murrayc.com>

	Variant: Fix compiler warnings.

	* glib/src/variant.ccg: Remove some uses of the typename keyword to avoid
	warnings about using them outside of templates (they were in template
	specializations, which I guess is different).

2010-12-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant< std::vector<std::string> >: Correct the getting of the array.

	* glib/src/variant.{ccg,hg} (get): Use
	g_variant_get_bytestring_array() in the get() methods instead of
	g_variant_get_strv().
	* examples/dbus/well-known-address-client.cc: Use a
	VariantContainerBase to get the result of the proxy's call method
	instead of a Variant<VariantBase>.  Also corrected the comment about
	why it is done that way.

2010-12-21  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Well known service example: Complete the example.

	* examples/dbus/well-known-address-client.cc: Complete the well known
	service example by calling the 'ListNames' method of the user's
	session bus.

2010-12-21  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add Variant< std::vector<[Glib::ustring|std::string]> specializations.

	* glib/src/variant.{ccg,hg}: Add two Variant specializations to deal
	specifically with arrays of UTF8 and non-UTF8 strings both reflecting
	the API of the specialization that deals with regular arrays.
	(docs, typos): Minor corrections.
	(Variant<std::vector<T>>::get): Have the method that gets the vector
	return the vector instead of setting an output parameter because
	returning the vector on the call stack should not be costly and it's
	probably more intuitive for the programmer.
	* tests/glibmm_variant/main.cc: Adapt test according to the above
	change.  Correct minor typos.

2010-12-20  José Alburquerque  <jaalburqu@svn.gnome.org>

	Allow giomm to build under mingw32.

	* gio/src/unixcredentialsmessage.hg:
	* gio/src/unixfdlist.hg:
	* gio/src/unixfdmessage.hg:
	* gio/src/unixsocketaddress.hg: Add the _GTKMM_WIN_NO_WRAP macro to
	newly added giomm classes so that giomm builds under mingw32.

	Fixes Bug #636754

2010-12-20  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant: Add a VariantStringBase and a VariantContainerBase class.

	* glib/src/variant.{ccg,hg} (VariantStringBase): Implement a new class
	from which the Glib::Variant<> string class (like
	Glib::Variant<Glib::ustring>) now derive.  The new class has methods
	for determining/creating object paths and signatures.  The new
	instances are created by setting output parameters.
	(VaraintContainerBase): Implement this new class from which variant
	containers should derive.
	(VariantContainerBase::get_n_children, get, get_maybe): Moved from
	Variant<VariantBase>
	(castitem constructors): Corrected all GVariant* castitem constructors
	to accept a 'take_a_reference' bool parameter.
	(Variant< std::vector<T> >::create, get, get_iter): Re-wrote these
	methods to use the Glib::VariantType class to get variant types
	instead of using strings.  Also Re-wrote to work specifically with
	fixed arrays (see g_variant_get_fixed_array).  This means that this
	class will not work with vectors of strings because
	g_variant_get_strv() and g_variant_get_bytestring_array() need to be
	used in those cases.
	(std::vector<T> get): Re-wrote to use an output parameter.

	* glib/src/variant_basictypes.h.m4: Corrected the castitem
	constructors as above.

	* tests/Makefile.am:
	* tests/glibmm_variant/main.cc: Added a small test for the
	Variant< std::vector<T> > methods.

	* gio/src/dbuserror.hg:
	* gio/src/error.hg: Wrap the GDBusError enum as a GError, moving its
	declaration to error.hg.

2010-12-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	Added a new Glib::Variant<> specialization to deal with arrays.

	* glib/src/variant.{ccg,hg} (VariantBase::get_maybe): Move the method
	that gets a maybe of a container to Variant<VariantBase> because it a
	container specific method.
	(Variant<VariantBase>::get): Correct this method so that it uses an
	output parameter instead of returning a VariantBase.
	(Variant< std::vector<T> >): Added a new specialization designed to
	deal with variant arrays. Similar types dealing with array of strings
	should also be added.
	(typedefs): Added some typedefs that might possibly be useful later.
	(docs): Added docs to methods without them.
	* glib/src/variant_basictypes.{cc,h}.m4:
	(variant_type): Made all the static variant_type() methods return a
	Glib::VariantType so the C++ wrapper is used.
	* glib/src/variantiter.{ccg,hg}: Corrected the includes so
	variantiter.h can be included in variant.h.

2010-12-15  José Alburquerque  <jaalburqu@svn.gnome.org>

	glibmm: Add a Variant<std::string> specialization.

	* glib/src/variant.ccg:
	* glib/src/variant.hg: Add a Variant<std::string> specialization based
	on the already existing Variant<Glib::ustring> one.  A way has to be
	found to create object paths and signatures (see
	g_variant_new_object_path() and g_variant_new_signature()) which are
	also strings and have their own GVariantType.

2010-12-15  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant[Iter,Type]: Add class docs.

	* glib/src/variantiter.hg:
	* glib/src/varianttype.hg: Add class docs.
	* glib/src/keyfile.hg:
	* glib/src/optiongroup.hg: Correct @newin{}s from 2,26 to 2,28.
	* glib/src/variant.hg (VariantBase): Move the get_n_children() method
	to Variant<VariantBase> since all containers essentially are created
	in the C API as a GVariant containing one (or more) GVariant(s).  The
	C++ container types (such as arrays, etc.) can derive from
	Glib::Variant<VariantBase> to inherit the get_n_children() method.

	* gio/src/gio_extra_objects.defs: Add GDBusProxy.

2010-12-15  Murray Cumming  <murrayc@murrayc.com>

	Tell the documentation generator about MatchInfo.

	* glib/src/glib_extra_objects.defs: Added GMatchInfo here.

2.27.4.1:

2010-12-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus Client Example: create a DBusProxy in preparation for method call.

	* examples/dbus/well-known-address-client.cc: Asynchronously create a
	DBusProxy which can then be used to call a method on the user's
	session bus.  This tests asynchronous creation of objects that derive
	from the AsyncInitable interface.  The reference counting of the newly
	created object should be checked because in the SlotAsyncReady slot,
	the proxy has a reference count of two when it should possibly be
	one (the g_dbus_proxy_new_finish() docs say that in the callback,
	unreferencing the proxy destroys it).

2010-12-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus[Connection|Proxy]: Don't take extra reference on async creation.

	* gio/src/dbusconnection.ccg:
	* gio/src/dbusproxy.ccg: There's no need to put the newly constructed
	DBusConnection|DBusProxy in a Glib::RefPtr<> and then take an extra
	reference.  Simply constructing the object is enough to guarantee that
	the object continues existing until the SlotAsyncReady slot is called.

2010-12-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusProxy: Reorder the parameters so that "name" is second in methods.

	* gio/src/dbusproxy.{ccg,hg}: Reorder the parameters so that the
	"name" parameter comes before the "object_path" parameter as in the C
	API which is probably more natural.  Add _IMPLEMENTS_INTERFACE() for
	the Initable and AsyncInitable interfaces that it implements.
	(class docs): Removed some sentences in the class docs that only
	apply to the C API.  Made it clear that the docs is adapted from the C
	API in case the paragraph about sub-classing does not apply.
	(constructor properties): Corrected the "name" property to the correct
	name "g_name" in constructors.

	* gio/giomm.h: Added all the missing dbus includes.

2010-12-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add a DBus Doxygen group.

	* gio/src/dbusconnection.hg: Add a DBus Doxygen group in which to
	include all the D-Bus docs.
	* gio/src/dbusaddress.hg:
	* gio/src/dbusauthobserver.hg:
	* gio/src/dbuserror.hg:
	* gio/src/dbusintrospection.hg:
	* gio/src/dbusmessage.hg:
	* gio/src/dbusmethodinvocation.hg:
	* gio/src/dbusownname.hg:
	* gio/src/dbusproxy.hg:
	* gio/src/dbusserver.hg:
	* gio/src/dbusutils.hg:
	* gio/src/dbuswatchname.hg: Include all the D-Bus classes, functions
	and slots in the new group.
	* glib/glibmm.h: Mention the new group in the list of giomm features.

	* gio/src/dbusproxy.ccg: Typos.

2010-12-12  José Alburquerque  <jaalburqu@svn.gnome.org>

	glibmm: Add a MatchInfo class for use with the existing Regex class.

	* glib/src/regex.{ccg,hg}: Add a new (generic) class wrapping the
	GMatchInfo functions.  Wrap the (commented out) methods with a
	Glib::MatchInfo in Regex so that the new class is used.

	Fixes Bug #636911 (Alexander Shaduri)

2010-12-09  Murray Cumming  <murrayc@murrayc-desktop>

	Added generic gmmproc conversions previously in convert_gtkmm.m4.

	* tools/m4/convert_base.m4: Added generic macros back.

2010-12-09  Murray Cumming  <murrayc@murrayc.com>

	Remove non-glibmm .m4 files.

	* tools/m4/class_gtkobject.m4:
	* tools/m4/convert_atk.m4:
	* tools/m4/convert_gdk.m4:
	* tools/m4/convert_gtk.m4:
	* tools/m4/convert_gtkmm.m4:
	* tools/m4/convert_pango.m4: Remove conversions and macros for non-glibmm
	types. These will be moved to atkmm, pangomm and gtkmm instead.

2010-12-09  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusProxy: Add a non-cancellable call_sync() method.

	* gio/src/dbusproxy.{ccg,hg}: Add a non-cancellable call_sync()
	method.  Reorder the paramters so that the "timeout_msec" parameter in
	methods that have it can have a default of '-1' which means a default
	timeout.

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Client Example: Choose a better name for the source file.

	* examples/dbus/client.cc: Renamed to:
	* examples/dbus/well-known-address-client.cc:

	* examples/Makefile.am: Corrected according to renaming above.

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add non-observable create method overloads.

	* gio/src/dbusconnection.{ccg,hg}: Add constructors and create methods
	that don't require a DBusAuthObservable paramter.

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Also correct the static status of the get() methods.

	* gio/src/dbusconnection.{ccg,hg}: As with the create*() methods, the
	get() async methods should be static.
	* gio/src/dbusintrospection.hg (DBusPropertyInfo): Add class docs.

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Correct docs of newly added methods that throw a Glib::Error.

	* gio/src/dbusconnection.hg:
	* gio/src/dbusproxy.hg:
	* gio/src/dbusintrospection.hg: Use _WRAP_METHOD_DOCS_ONLY together
	with a Doxygen @throw directive in methods that throw a Glib::Error to
	get the C docs and then make it clear that the methods throw a
	Glib::Error.
	(new_for_xml): Rename to create_for_xml().

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Use static keyword for create methods.

	* gio/src/dbusconnection.{ccg,hg}: Add the forgotten 'static' keyword
	to all the create methods (that's what happens when coding too quickly
	without thinking about what's being done).  Fortunately it seems to
	have happened only here.

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Client Example: Correct typo.

	* examples/dbus/client.cc: Correct a typo in a comment.
	* tools/m4/convert_gio.m4: Correct alphabetizing of last enum
	conversion.

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus: Add an initial client example accessing a user's bus.

	* examples/dbus/client.cc: Initial example opening a connection to the
	user's bus and then printing its unique name.

2010-12-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add Gio::DBusConnection::get_sync() methods.

	* gio/src/dbusconnection.hg: Wrap get_sync() methods (cancellable and
	non-cancellable versions).
	* tools/m4/convert_gio.m4: Add enum conversion.

2010-12-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add missing _IGNORE().

	* gio/src/dbusconnection.{ccg,hg}: Add a missing _IGNORE() for
	the emit_signal() method and correct its misspelled name at the same
	time.

2010-12-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add send_message_with_reply_sync() methods.

	* gio/src/dbusconnection.{ccg,hg}: Add cancellable and non-cancellable
	versions of the send_message_with_reply_sync() methods (following the
	same logic as the existing send_message_with_reply() methods).  Some
	minor corrections.

2010-12-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add signal_subscribe() and add_filter().

	* gio/src/dbusconnection.{ccg,hg}: Add signal_subscribe(),
	signal_unsubscribe(), add_filter() and remove_filter() methods.
	Wrapped GDBusSignalFlags (reordered enums in alphabetical order).
	([get|set]_exit_on_close):
	(get_capabilities): Reordered declarations (by moving the _WRAP_METHOD
	macros) according to where they are declared in the C API.

2.27.4:

2010-11-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus[MethodInvocation|Server]: Code corrections.

	* gio/src/dbusmethodinvocation.hg: Remove the default constructor
	because it probably will not be used (there is no create() method to
	go along with it).
	* gio/src/dbusserver.{ccg,hg} (create_sync): Use
	g_dbus_server_new_sync() instead of the constructors because the C
	function does more than call g_initable_new().

2010-11-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Some conversion fixes.

	* tools/pm/DocsParser.pm (convert_docs_to_cpp): Convert occurances of
	'`' to the variable '__BT__' defined in base.m4 which safely produces
	the same character without causing M4 processing errors.
	(convert_tags_to_doxygen): Add a substition for the
	<constant></constant> gtk-doc tag to the equivalent Doxygen <tt></tt>
	tag.  Also use '<' instead of '&lt;' and '>' instead of '&gt;' in the
	substitutions because otherwise the tags are not recognized.

2010-11-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBusConnection: Add emit_signal().

	* gio/src/dbusconnection.{ccg,hg}: Add emit_signal() wrapping
	g_dbus_connection_emit_signal().
	* gio/src/dbusaddress.ccg: Typo.

2010-11-19  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBus::Address: Wrap the gio dbus address API in this namespace.

	* gio/giomm.h:
	* gio/src/dbusaddress.{ccg,hg}:
	* gio/src/filelist.am: Add new sources and make sure they are built.

	* gio/src/dbusconnection.hg:
	* gio/src/dbuserror.hg: Typos.

2010-11-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add call(), call_finish() and call_sync() methods.

	* gio/src/dbusconnection.{ccg,hg}: Add cancellable and non-cancellable
	versions of call() and call_sync().  Also added call_finish().

2.27.3.1:

2010-11-16  Murray Cumming  <murrayc@murrayc.com>

	ApplicationCommandLine: Fix print() and print_err().

	* gio/src/applicationcommandline.[hg|ccg]: These functions take a printf
	format and arguments, as shown by compiler warnings. So I just used "%s".

2010-11-15  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBus[Connection|Proxy]: Use Gio::AsyncInitable::init_async correctly.

	* gio/src/dbusconnection.ccg:
	* gio/src/dbusproxy.ccg: Use the non-cancellable version of
	Gio::AsyncInitable::init_async() where appropriate.

2010-11-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	Initable: Add a non-cancellable overload of the init() method.

	* gio/src/initable.{ccg,hg} (init): Add a non-cancellable overload.
	* gio/src/dbusconnection.ccg:
	* gio/src/dbusproxy.ccg:
	* gio/src/dbusserver.ccg: Adapt API to use non-cancellable version of
	Gio::Initable::init().

2010-11-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Provide non-cancellable overloads for newly added API.

	* gio/src/application.hg: Completed a TODO.
	* gio/src/asyncinitable.hg (init_async): Refer to existing method docs
	in the non-cancellable version instead of duplicating docs.
	* gio/src/dbusconnection.{ccg,hg}: Add non-cancellable overloads of
	the constructors and create methods instead of having a default null
	Cancellable parameter.  Renamed the synchronized create*() methods to
	create*_sync().
	(get): Added a non-cancellable overload as above.
	* gio/src/dbusproxy.{ccg,hg}: Added non-cancellable overloads of the
	constructors and create methods.  Renamed the create*() synchronized
	methods to create*_sync() as above.
	(call): Added a non-cancellable overload as above.
	* gio/src/dbusserver.{ccg,hg}: Add non-cancellable overloads of the
	constructor and create method.  Renamed the create() synchronized
	method to create_sync() as above.

2010-11-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	Correct @newin{}'s and add class docs of newly added API.

	* gio/src/application.hg:
	* gio/src/asyncinitable.hg:
	* gio/src/credentials.hg:
	* gio/src/dbusauthobserver.hg:
	* gio/src/dbusconnection.hg:
	* gio/src/dbuserror.hg:
	* gio/src/dbusintrospection.hg:
	* gio/src/dbusmessage.hg:
	* gio/src/dbusmethodinvocation.hg:
	* gio/src/dbusownname.hg:
	* gio/src/dbusproxy.hg:
	* gio/src/dbusserver.hg:
	* gio/src/dbusutils.hg:
	* gio/src/dbuswatchname.hg:
	* gio/src/unixcredentialsmessage.hg:
	* gio/src/unixfdlist.hg:
	* gio/src/unixfdmessage.hg: Correct @newin{}'s from 2.26 to 2.28.

	* gio/src/proxy.hg:
	* gio/src/proxyaddress.hg:
	* gio/src/proxyresolver.hg: Add class docs.
	* gio/src/unixsocketaddress.hg: Add to Doxygen group NetorkIO.

	* gio/src/socketcontrolmessage.hg: Rephrase a TODO.

2010-11-13  Jonathon Jongsma  <jjongsma@gnome.org>

	Add Gio::ApplicationCommandLine

	* gio/giomm.h:
	* gio/src/application.hg:
	* gio/src/applicationcommandline.ccg:
	* gio/src/applicationcommandline.hg:
	* gio/src/filelist.am:
	* tools/m4/convert_gio.m4:

2010-11-12  Jonathon Jongsma  <jjongsma@gnome.org>

	Miscellaneous Gio::Application fixes

	* gio/src/application.hg:
	* gio/src/application.ccg:
		- Add non-cancellable overload of register_application()
		- return int value from run() correctly
		- Fix protected constructor signature
		- use _WRAP_CTOR and _WRAP_CREATE()

2.27.3:

2010-11-10  Murray Cumming  <murrayc@murrayc.com>

	Gio: Added some methods.

	* gio/src/gio_methods.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs: Regenerated with h2defs.py.

	* gio/src/application.hg: Added open(). Notice that I have used std::vector
	instead of ArrayHandle, because that is what we should use for all new API,
	after we decided that the intermediate types are too awkward for people to
	understand.
	* gio/src/actiongroup.[hg|ccg]: Added list_actions, though we need to
	use a std::vector here instead.
	* gio/src/datainputstream.[hg|ccg]: Added read_upto(), read_upto_async()
	and read_upto_finish(). Updated the read_until*() documentation to
	discourage their use (apparently they will be properly deprecated eventually).
	* gio/src/settings.hg: Added range_check().
	* gio/src/socketclient.[hg|ccg]: Added connect_to_uri(), connect_to_uri_async()
	and connect_to_uri_finish().

2010-11-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Make sure the AsyncInitable inheritance is correct.

	* gio/src/dbusconnection.hg: Add a missing _IMPLEMENTS_INTERFACE() for
	the AsyncInitiable interface that DBusconnection implements.

2010-11-08  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm.h: Add includes of newly wrapped API.

	* gio/giomm.h: Add forgotten includes of actiongroup.h and
	unixsocketaddress.h to the main giomm.h include file.

2010-11-08  Krzesimir Nowak  <qdlacz@gmail.com>

	ObjectBase: Fixed refcount debugging message.

	* glib/glibmm/objectbase.cc: A parameter passed to g_warning() in
	destroy_notify_callback() describing a name of GObject should be indeed
	a name, not a pointer to GObject.

2010-11-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	UnixSocketAddress: Correct the wrapping of create() methods.

	* gio/src/unixsocketaddress.hg: Remove the multi-parameter constructor
	and create() method, handwriting the create() method instead to wrap
	g_unix_socket_address_new_with_type() because the C function does more
	than call g_object_new().

	* gio/src/filelist.am: Typo.

2010-11-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add UnixSocketAddress.

	* tools/extra_defs_gen/generate_defs_gio.cc:
	* gio/src/gio_signals.defs: Add the GUnixSockeAddress GType to the
	list of types for which signals and properties should be generated and
	regenerate the signals and properties defs file.

	* gio/src/filelist.am:
	* gio/src/unixsocketaddress.{ccg,hg}: Add the UnixSocketAddress
	sources and mention them so they are built.
	* tools/m4/convert_gio.m4: Add a necessary enum conversion.

	* gio/src/enums.hg: Wrap the Gio::ErrorEnum enum.

2010-11-04  José Alburquerque  <jaalburqu@svn.gnome.org>

	UnixCredentialMessage, UnixFDMessage: Wrap properties correctly.

	* gio/src/unixcredentialsmessage.hg:
	* gio/src/unixfdmessage.hg: Correct the wrapping of properties (the
	arguments were interchanged).

	* gio/src/application.hg: Typos.
	* gio/src/socketconnectable.hg: Refine a TODO.

2010-11-03  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Wrap several unwrapped functions.

	* gio/src/memoryoutputstream.hg: Added steal_data(), and a get_data()
	constant version.
	* gio/src/networkservice.hg: Added get_scheme(), set_scheme().
	Wrapped the "scheme" property.
	* gio/src/socket.{ccg,hg}: Added get_timeout(), set_timeout(),
	receive_with_blocking() and send_with_blocking().
	* gio/src/socketclient.hg: Add get_enable_proxy(), set_enable_proxy(),
	get_timeout(), set_timeout() and add_application_proxy().
	* gio/src/socketconnectable.hg: Added proxy_enumerate() and an
	enumerate() constant version.

	* gio/src/socketaddressenumerator.hg: Added TODO's.

	* gio/src/actiongroup.hg: Small class docs correction.

2010-11-03  José Alburquerque  <jaalburqu@svn.gnome.org>

	Application, ActionGroup: Add Doxygen class documentation.

	* gio/src/application.hg: Add class docs.
	(is_valid): Renamed to id_is_valid().
	* gio/src/actiongroup.hg: Added class docs.
	* gio/src/dbuserror.hg: Typos.

2010-11-03  Murray Cumming  <murrayc@murrayc.com>

	Fix the build with glib from git master.

	* glib/glibmm/main.[h|cc]: get_time(): Now returns a gint64 instead of
	a GTimeSpec output parameter.

2.27.2:

2010-11-01  Murray Cumming  <murrayc@murrayc.com>

	Fix the build with --enable-warnings=fatal

	* glib/glibmm/main.[h|cc]: get_current_time(): undef G_DISABLE_DEPRECATED
	so this can build. Deprecate it to match the C API. Add get_time() which
	replaces it. However, we should replace our use of it, which seems difficult.

2010-11-01  José Alburquerque  <jaalburqu@svn.gnome.org>

	Application: Re-wrap according to the latest API.

	* gio/src/application.{ccg,hg}: Re-wrapped the API according to the
	recent changes in the C API.  Old methods were removed and new ones
	wrapped.  Also wrapped its properties.
	* tools/m4/convert_gio.m4: Added necessary conversion.

2010-11-01  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add ActionGroup interface.

	* tools/extra_defs_gen/generate_defs_gio.cc:
	* gio/src/gio_signals.defs: Add the GActionGroup type to the extra
	defs generation tool and regenerate the signal defs file to get the
	signals of GActionGroup.
	* gio/src/actiongroup.{ccg,hg}:
	* gio/src/filelist.am: Add new ActionGroup interface sources and
	mention them so they are build.

2010-10-28  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Reorder parameters to allow default values for flags.

	* gio/src/dbusconnection.{ccg,hg}: Reorder the parameters in the
	constructors and create methods so that the DBusConnection flag
	parameter has a default value.
	* gio/src/dbusproxy.hg (get_cached_property): Docs re-formatting.

2010-10-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusConnection: Add docs to some methods.

	* gio/src/dbusconnection.hg: Add Doxygen docs to wrapped methods
	without them.
	* gio/src/dbusproxy.hg: Typo.

2010-10-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusProxy: Add get_cached_property().

	* gio/src/dbusproxy.{ccg,hg}: Add get_cached_property(), wrapping
	g_dbus_proxy_get_cached_property().  Also add missing _IGNORE().

2.27.1:

2010-10-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusProxy: Wrap call(), call_finish() and call_sync() methods.

	* gio/src/dbusconnection.hg: Wrap the DBusCallFlags enum.
	* gio/src/dbusproxy.{ccg,hg}: Wrap the call(), call_finish() and
	call_sync() methods.

2010-10-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	Variant: Remove floating reference on creation.

	* glib/src/variant.ccg:
	* glib/src/variant_basictypes.cc.m4: Modify all create methods of the
	variant classes so that they remove the floating reference of the
	newly created GVariants.  The C API sometimes 'consumes' GVariants
	with floating references (see g_dbus_proxy_call()) so this allows C++
	to worry about deleting GVariants when their references are all lost.

2010-10-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	DBusProxy: Wrap properties and signals.

	* tools/extra_defs_gen/generate_defs_gio.cc: Add a new section for
	DBus types and add the GDBusProxy type to the gio extra defs
	generation tool.
	* gio/src/gio_signals.defs: Regenerate with the extra defs tool to get
	the properties and signals of GDBusProxy.  Some types (like GVariant
	and GStrv) have to be manually edited.
	* gio/src/dbusproxy.hg: Wrap properties and (one of two) signals.
	* tools/m4/convert_glib.m4: Add a const-gchar* to `const
	Glib::ustring&' conversion (it may be more appropriate to include it
	in dbusproxy.hg for the "g-signal" signal).

2010-10-25  José Alburquerque  <jaalburqu@svn.gnome.org>

	AsyncInitable: Add create_finish() wrapping an unwrapped function.

	* gio/src/asyncinitable.hg: Add create_finish() wrapping
	g_async_initable_new_finish().  Its not clear how useful the method
	will be, but at least gmmproc does not say that it is still unwrapped.
	* gio/src/dbusproxy.hg: Typo.

2010-10-21  Murray Cumming  <murrayc@murrayc-desktop>

	Added get_system_data_dirs() and get_system_config_dirs().

	* glib/glibmm/miscutils.[h|cc]: Wrappping g_get_system_data_dirs() and
	g_get_system_config_dirs(), which were actually added in glib 2.6 but
	not noticed by us until now.
	Notice that these return std::vector<> instead of ArrayHandle, because we
	have decided to do that for new APIs.

2010-10-19  Murray Cumming  <murrayc@murrayc.com>

	Fix the build with the latest glib API.

	* gio/src/gio_enums.defs: Regenerated with enums.pl.
	* gio/src/gio_methods.defs: Regenerated with h2defs.py.
	* gio/src/gio_signals.defs: Regenerated with extra_defs.
	* gio/src/application.[hg|ccg]: Adapt to the changed API in glibmm,
	though several functions, properties and signals are not yet wrapped.
	* gio/src/dbusserver.hg: new_connection signal: Now returns a bool.
	* tools/m4/convert_gio.m4: Mention the new enum.

2010-10-18  José Alburquerque  <jaalburqu@svn.gnome.org>

	glibmm: ustring: Restore last block removed by #ifdef removal script.

	* glib/glibmm/ustring.cc: Restore the last block that was accidentally
	removed by the optional API #ifdef removal script.  There were three.
	Two were restored (GNOME bug #622030), but one (final one) was not.
	This commit does that, restoring the file to its original condition
	without the optional API #ifdefs.

2.27.0:

2010-09-28  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/examples/compose/compose.vcproj:
	* MSVC_Net2005/examples/dispatcher/dispatcher.vcproj:
	* MSVC_Net2005/examples/dispatcher2/dispatcher2.vcproj:
	* MSVC_Net2005/examples/keyfile/keyfile.vcproj:
	* MSVC_Net2005/examples/markup/markup.vcproj:
	* MSVC_Net2005/examples/options/options.vcproj:
	* MSVC_Net2005/examples/properties/properties.vcproj:
	* MSVC_Net2005/examples/regex/regex.vcproj:
	* MSVC_Net2005/examples/resolver/resolver.vcproj:
	* MSVC_Net2005/examples/socket-client/socket-client.vcproj:
	* MSVC_Net2005/examples/socket-server/socket-server.vcproj:
	* MSVC_Net2005/examples/thread/thread.vcproj:
	* MSVC_Net2005/examples/thread_pool/thread_pool.vcproj:
	* MSVC_Net2005/filelist.am:
	* MSVC_Net2005/gendef/gendef.vcproj:
	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2005/glibmm.sln:
	* MSVC_Net2005/glibmm/glibmm.vcproj:
	* MSVC_Net2005/tests/giomm_simple/giomm_simple.vcproj:
	* MSVC_Net2005/tests/glibmm_value/glibmm_value.vcproj:
	* MSVC_Net2008/examples/compose/compose.vcproj:
	* MSVC_Net2008/examples/dispatcher/dispatcher.vcproj:
	* MSVC_Net2008/examples/dispatcher2/dispatcher2.vcproj:
	* MSVC_Net2008/examples/keyfile/keyfile.vcproj:
	* MSVC_Net2008/examples/markup/markup.vcproj:
	* MSVC_Net2008/examples/options/options.vcproj:
	* MSVC_Net2008/examples/properties/properties.vcproj:
	* MSVC_Net2008/examples/regex/regex.vcproj:
	* MSVC_Net2008/examples/resolver/resolver.vcproj:
	* MSVC_Net2008/examples/socket-client/socket-client.vcproj:
	* MSVC_Net2008/examples/socket-server/socket-server.vcproj:
	* MSVC_Net2008/examples/thread/thread.vcproj:
	* MSVC_Net2008/examples/thread_pool/thread_pool.vcproj:
	* MSVC_Net2008/filelist.am:
	* MSVC_Net2008/gendef/gendef.vcproj:
	* MSVC_Net2008/giomm/giomm.vcproj:
	* MSVC_Net2008/glibmm.sln:
	* MSVC_Net2008/glibmm/glibmm.vcproj:
	* MSVC_Net2008/tests/giomm_simple/giomm_simple.vcproj:
	* MSVC_Net2008/tests/glibmm_value/glibmm_value.vcproj:
	* MSVC_Net2010/examples/compose/compose.vcxproj:
	* MSVC_Net2010/examples/compose/compose.vcxproj.filters:
	* MSVC_Net2010/examples/dispatcher/dispatcher.vcxproj:
	* MSVC_Net2010/examples/dispatcher/dispatcher.vcxproj.filters:
	* MSVC_Net2010/examples/dispatcher2/dispatcher2.vcxproj:
	* MSVC_Net2010/dispatcher2/dispatcher2.vcxproj.filters:
	* MSVC_Net2010/examples/keyfile/keyfile.vcxproj:
	* MSVC_Net2010/examples/keyfile/keyfile.vcxproj.filters:
	* MSVC_Net2010/examples/markup/markup.vcxproj:
	* MSVC_Net2010/examples/markup/markup.vcxproj.filters:
	* MSVC_Net2010/examples/options/options.vcxproj:
	* MSVC_Net2010/examples/options/options.vcxproj.filters:
	* MSVC_Net2010/examples/properties/properties.vcxproj:
	* MSVC_Net2010/examples/properties/properties.vcxproj.filters:
	* MSVC_Net2010/examples/regex/regex.vcxproj:
	* MSVC_Net2010/examples/regex/regex.vcxproj.filters:
	* MSVC_Net2010/examples/resolver/resolver.vcxproj:
	* MSVC_Net2010/examples/resolver/resolver.vcxproj.filters:
	* MSVC_Net2010/examples/socket-client/socket-client.vcxproj:
	* MSVC_Net2010/socket-client/socket-client.vcxproj.filters:
	* MSVC_Net2010/examples/socket-server/socket-server.vcxproj:
	* MSVC_Net2010/socket-server/socket-server.vcxproj.filters:
	* MSVC_Net2010/examples/thread/thread.vcxproj:
	* MSVC_Net2010/examples/thread/thread.vcxproj.filters:
	* MSVC_Net2010/examples/thread_pool/thread_pool.vcxproj:
	* MSVC_Net2010/thread_pool/thread_pool.vcxproj.filters:
	* MSVC_Net2010/filelist.am:
	* MSVC_Net2010/gendef/gendef.vcxproj:
	* MSVC_Net2010/gendef/gendef.vcxproj.filters:
	* MSVC_Net2010/giomm/giomm.rc.in:
	* MSVC_Net2010/giomm/giomm.vcxproj:
	* MSVC_Net2010/giomm/giomm.vcxproj.filters:
	* MSVC_Net2010/glibmm.sln:
	* MSVC_Net2010/glibmm/glibmm.rc.in:
	* MSVC_Net2010/glibmm/glibmm.vcxproj:
	* MSVC_Net2010/glibmm/glibmm.vcxproj.filters:
	* MSVC_Net2010/tests/giomm_simple/giomm_simple.vcxproj:
	* MSVC_Net2010/giomm_simple/giomm_simple.vcxproj.filters:
	* MSVC_Net2010/tests/glibmm_value/glibmm_value.vcxproj:
	* MSVC_Net2010/glibmm_value/glibmm_value.vcxproj.filters:
	* Makefile.am:
	* configure.ac: Add MSVC2010 project files and 64 bit support.

2010-09-20  Murray Cumming  <murrayc@murrayc.com>

  Depend on glib 2.27.0, because we need GApplication.

  * configure.ac: Increase the glib dependency.

This is the master branch.
See the glibmm-2-26 branch too.

2010-09-14  Murray Cumming  <murrayc@murrayc.com>

	Settings: Comment out get_destroyed() to avoid a linker error.

	* gio/src/settings.[hg|ccg]: Comment out the use of g_setting_get_destroyed().
  See glib bug https://bugzilla.gnome.org/show_bug.cgi?id=629621 .

2010-09-14  Murray Cumming  <murrayc@murrayc.com>

	DBusConnection: Fix some (useful) compilation warnings.

	* gio/src/dbusconnection.[hg|ccg]: IOStream constructors and create*()
  methods: Actually use the slot parameter.

2010-09-14  Murray Cumming  <murrayc@murrayc.com>

	giomm: Added some DBusMessage and NetworkAddress methods.

	* gio/src/dbusmessage.hg: Added get_locked(), lock(), and copy().
	* gio/src/networkaddress.hg: Added get_scheme() and property.

2010-09-14  Murray Cumming  <murrayc@murrayc.com>

	glibmm: Added VariantIter source files that I forget to git add before.

	* glib/src/variantiter.[hg|ccg]: Added missing files to git.

2010-09-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBusConnection: Wrap async constructors and create methods.

	* gio/src/dbusconnection.{ccg,hg}: Wrapped create(), create_finish().
	Renamed the create() method accepting an address instead of an
	IOStream to create_for_address().  Wrapped
	create_for_address_finish().  Wrapped pertinent constructors.  Wrapped
	get() and get_finish().
	* gio/src/dbusproxy.{ccg,hg}: Renamed create() accepting a BusType
	parameter to create_for_bus().  Wrapped create_for_bus_finish().

2010-09-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBusServer: Corrected parameter order of constructor.

	* gio/src/dbusserver.{ccg,hg}: Reordered the parameters of the
	constructor and create() method so that the flag is the last optional
	parameter.

2010-09-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add various unwrapped methods.

	* gio/src/gio_methods.defs: Regenerated.
	* gio/src/gio_signals.defs: Corrected GVariant parameters of the
	GApplication signal defs (from GVariant to GVariant*).
	* gio/src/application.hg: Wrapped "action-with-data",
	"prepare-activation", and "quit-with-data" signals.
	* gio/src/settings.hg: Wrapped reset(), list_children(), list_keys()
	get_destroyed(), and the "writable_change_event" signal.

	* gio/src/asyncinitable.hg:
	* gio/src/settingsbackend.hg: Typos.

2010-09-13  Murray Cumming  <murrayc@murrayc.com>

	DBusMessage: Added methods.

	* gio/src/dbusconnection.hg: Move DBusCapabilityFlags to dbusmessage.h.
	* gio/src/dbusmessage.[hg|ccg]: Added create_from_blob(),
  set/get_byte_order(), get_header_fields(), bytes_needed(), to_blob(), and
  to_exception().
	* gio/src/gio_enums.defs: Regenerated with enums.pl.

2010-09-13  Murray Cumming  <murrayc@murrayc.com>

	Add VariantIter include to glibmm.h.

	* glib/glibmm.h:
	* glib/src/variant.hg: Add an _IGNORE() too.

2010-09-13  Murray Cumming  <murrayc@murrayc.com>

	Added VariantIter.

	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs: Regenerated with h2defs.py.
	* glib/src/filelist.am:
  * glib/src/variantiter.[hg|ccg]: Added the VariantIter class. Unfortunately
  it can't be much like a std::iterator until we fix the C API - see the
  comments.
	* glib/src/varianttype.hg: Added an m4 line to fix the build.

2010-09-13  Murray Cumming  <murrayc@murrayc.com>

	VariantBase: Added a byte/guchar specialization.

	* glib/src/variant_basictypes.cc.m4:
	* glib/src/variant_basictypes.h.m4: Add an extra argument to the macro,
  so we can handle g_variant_get_byte(), whose function/macro type name is not
  the same as its C type name. Each macro only uses 2 arguments, but it is
  clearer if both are the same, I think.
	* glib/src/variant.hg: Mark g_variant_get_byte() as handled.

2010-09-13  Murray Cumming  <murrayc@murrayc.com>

	Variant: Added some methods.

	* glib/src/variant.[hg|ccg]: Added get_maybe(), get_size(), get_data(),
  store(), and get_n_children().

2010-09-09  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBus: Wrap D-Bus Utilities and GDBusError C functions.

	* gio/src/dbuserror.{ccg,hg}:
	* gio/src/dbusutils.{ccg,hg}:
	* gio/src/filelist.am: Add new sources wrapping C functions from the
	D-Bus Utilities and GDBusError gio DBus C API.  The GBDusError
	functions are wrapped in a new Gio::DBus::Error namespace.
	* gio/src/dbusownname.hg:
	* gio/src/dbuswatchname.hg: Typos.

2010-09-09  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBus Introspection Data Classes: Add const methods.

	* gio/src/dbusintrospection.hg: Add const methods returning
	DBusMethodInfo, DBusSignalInfo, DBusPropertyInfo and DBusInterfaceInfo
	classes to the DBusInterfaceInfo and DBusNodeInfo classes.
	* gio/src/dbusmethodinvocation.hg (get_method_info): Remove the
	non-const verrsion of this method because the C API only has a version
	returning a const GDBusMethodInfo.
	* tools/m4/convert_gio.m4: Move the conversion
	DBusMethodInvocation::get_method_info() over to the local .hg file
	because it is specific to that method.

2010-09-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBusProxy: Correct the use of the DBusInterfaceInfo class.

	* gio/src/dbusproxy.{ccg,hg}: Use the DBusInterfaceInfo class wrapper
	instead of the C API one.  The wrapper is reference counted.
	(set/get_interface_info): Add these new methods, wrapping
	g_dbus_proxy_set_interface_info() and
	g_dbus_proxy_get_interface_info().
	* gio/src/dbusmethodinvocation.{ccg,hg} (get_method_info): Add this
	method, wrapping g_dbus_method_invocation_get_method_info().
	* tools/m4/convert_gio.m4: Add necessary conversions.

2010-09-07  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add D-Bus Introspection Data classes.

	* gio/src/dbusintrospection.{ccg,hg}:
	* gio/src/filelist.am: Add new sources containing the various
	introspection data classes (with their methods) representing
	annotations, methods, signals, properties and interfaces for the DBus
	API.
	* tools/m4/convert_gio.m4: Add the necessary conversions.

2010-09-06  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBusProxy: Add constructors and create methods.

	* gio/src/dbusproxy.{ccg,hg}: Add the constructors and create methods
	making sure that the order of the parameters allows for the
	Cancellable to be optional.  Also made sure that the GDBusInterface
	parameter is constant.

	* gio/src/dbusconnection.ccg (DBusConnection): Rename the "observer"
	property in the _CONSTRUCT macro to the correct
	"authentication-observer" name used in the new function.

	* gio/src/socketcontrolmessage.hg:
	* gio/src/unixfdlist.hg:
	* gio/src/unixfdmessage.hg: Correct typos in newin{}'s.

2010-09-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add initial DBusProxy implementation.

	* gio/src/dbusproxy.{ccg,hg}:
	* gio/src/filelist.am: Add new DBusProxy source.
	* tools/m4/convert_gio.m4: Add conversions for DBusProxy.

2010-09-03  Murray Cumming  <murrayc@murrayc.com>

	gmmproc: Fix the annoying warnings about documentation.

	* tools/pm/GtkDefs.pm: lookup_object(): Do not print a warning when the
	object is found, because this is used when guessing an object name while
	breaking apart a function name in DocsParser.pm.
	* gio/src/filelist.am:
	* gio/src/gio.defs:
	* gio/src/gio_extra_objects.defs:
	* glib/src/filelist.am:
	* glib/src/glib.defs:
	* glib/src/glib_extra_objects.defs: Added the *extra_objects.defs files,
	with hand-coded define-object sections, for objects that hide their *Class
	or *Iface struct declarations, which stops h2defs.py from generating
	define-object sections.
	These allows DocsParser.pm to know how to split mentions of C functions into
	the object and the method, so it can guess the C++ method name to mention
	instead.

2010-09-03  Murray Cumming  <murrayc@murrayc.com>

	giomm: Added remaining Proxy and ProxyResolver methods.

	* gio/src/proxy.[hg|ccg]: Added connect_async().
	* gio/src/proxyresolver.[hg|ccg]: Added lookup_async().

2010-09-02  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBus: watch_name(): Add DBusConnection implementation.

	* gio/src/dbuswatchname.ccg (watch_name): Add this forgotten
	function implementation accepting a DBusConnection instead of a
	BusType.

2010-09-02  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBus: Add watch/unwatch_name().

	* gio/src/dbuswatchname.{ccg,hg}:
	* gio/src/filelist.am: Add watch/unwatch_name() functions to the
	Gio::DBus namespace wrapping the Gio Bus Name Watching API.

2010-09-02  Murray Cumming  <murrayc@murrayc.com>

	giomm: Added Proxy, ProxyAddress and ProxyResolver.

	* gio/src/proxy.[hg|ccg]:
	* gio/src/proxyaddress.[hg|ccg]:
	* gio/src/proxyresolver.[hg|ccg]: New files, not complete.

2.25.4:

2010-08-31  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: AsyncInitiable: Correct errors.

	* gio/src/asyncinitable.ccg (init_async_vfunc_callback): Take an extra
	reference of the cancellable when calling the member virtual method so
	the cancellable is not destroyed.
	(init_async_vfunc): Don't create a copy of the SlotAsyncReady because
	it would have already been copied in init_async() method invocation.

2010-08-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: AsyncInitable: Wrap virtual functions.

	* gio/src/gio_vfuncs.defs: Add the GAsyncInitable virutal functions.
	* gio/src/asyncinitable.{ccg,hg} (init_async_vfunc): Handwrite virtual
	function because of the slot parameter.
	(init_finish_vfunc): Likewise, because of the GError parameter.

2010-08-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	AsyncInitable: Remove duplicate license blocks.

	* gio/src/asyncinitable.hg:

2010-08-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	Include header files of newly added API in main include files.

	* gio/giomm.h:
	* glib/glibmm.h: Include the headers of newly added API in the main
	header files so the API is included automatically with the general
	includes.

2010-08-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add AsyncInitable interface.

	* gio/src/asyncinitable.ccg:
	* gio/src/asyncinitable.hg: Add source files for AsyncInitable
	interface.
	* gio/src/filelist.am: Mention the asyncinitable.hg file so the
	sources are built.
	* gio/src/dbusconnection.hg: Have DBusConnection derive from the
	AsyncInitable interface also.

2010-08-27  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: DBusConnection: Wrap synchronous new functions.

	* gio/src/dbusconnection.ccg:
	* gio/src/dbusconnection.hg: Wrap g_dbus_connection_new_sync() and
	g_dbus_connection_new_for_address_sync() functions (using constructors
	and create methods).

2010-08-24  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add UnixCredentialsMessage to the build.

	* tools/extra_defs_gen/generate_defs_gio.cc: Uncomment the code in the
	extra defs generation tool so that properties and signals for
	GUnixCredentialsMessage are generated.
	* gio/src/gio_signals.defs: Regenerate the signal and properties def
	file to get the properties of GUnixCredentialsMessage.
	* gio/src/filelist.am: Mention the unixcredentialsmessage.hg so that
	it is built.

2010-08-17  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add UnixFDMessage to the build.

	* gio/src/unixfdmessage.ccg: Include <gio/gunixfdmessage.h> instead
	of <gio/gio.h> so that the C API function definitions are correctly
	included.
	* gio/src/unixcredentialsmessage.ccg: Correct the include here also,
	but bug #627013 must be resolved before including
	UnixCredentialsMessage in the build.
	* gio/src/filelist.am: Mention the unixfdmessage.hg file so
	UnixFDMessage is built.  Left a TODO for UnixCredentialsMessage.
	* tools/extra_defs_gen/generate_defs_gio.cc: Updated so that the tool
	can be used to generate the signals and properties of GUnixFDMessage.
	* gio/src/gio_signals.defs: Regenerated to get the properties of
	GUnixFDMessage.

2010-08-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	Regenerate the docs.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Regenerate the docs so that documentation is
	generated for methods that wrap newly added API.

2010-08-10  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Use ifdef in _WRAP_METHOD()s surrounded by #ifdefs.

	* gio/src/credentials.hg:
	* gio/src/dbusmessage.ccg:
	* gio/src/dbusmessage.hg: Use the ifdef option in the _WRAP_METHOD()s
	that wrap C functions that are built based on #ifdef conditions.  This
	allows the #ifdefs to be generated in the .cc files also.

	* gio/src/unixconnection.hg (receive_credentials): Use constversion
	in the _WRAP_METHOD() of the constant version so that the code of the
	non-constant version is used instead of generated new code.

	* gio/src/unixfdlist.hg: _IGNORE() C functions that are handwritten.
	(UnixFDList): Use explicit for single parameter constructor.

2010-08-06  José Alburquerque  <jaalburqu@svn.gnome.org>

	glibmm: VariantBase: Correct typo in docs.

	* glib/src/variant.hg: Correct typos in class docs.
	* glib/src/variant.ccg (get_normal):
	(byteswap): Receive the GVariants from the C functions as const since
	the variants should not be modified.

2010-08-06  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: UnixConnection: Add receive/send_credentials() methods.

	* gio/src/unixconnection.hg: Add receive/send_credentials() which
	the UnixCredentialsMessage docs refers to.

2010-08-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	giomm: Add SocketControlMessage, Unix[Credentials|FD]Message classes.

	* gio/src/socketcontrolmessage.{ccg,hg}:
	* gio/src/filelist.am: Add SocketControlMessage sources and mention
	the .hg file so the sources are built.
	* gio/src/gio_vfuncs.defs: Add virtual functions for
	GSocketControlMessage.

	* gio/src/unixcredentialsmessage.{ccg,hg}:
	* gio/src/unixfdmessage.{ccg,hg}: Add UnixCredentialsMessage and
	UnixFDmessage sources but don't mention them because the gio include
	paradignm seems to be causing the C functions not to be declared upon
	compilation.
	* tools/extra_defs_gen/generate_defs_gio.cc: Add the
	GUnixCredentialsMessage and the GUnixFDMessage types but commented out
	because the types also appear not to be defined because of the gio
	include paradigm.

	* tools/m4/convert_gio.m4: Add necessary conversions.

2.25.3:

2010-07-30  Murray Cumming  <murrayc@murrayc.com>

	generate_defs_gio.cc: Added some new types.

	* tools/extra_defs_gen/generate_defs_gio.cc: Added GApplication,
	GSettings and GSettingsBackend.

2010-07-30  Murray Cumming  <murrayc@murrayc.com>

	Application: Add create_*() overloads.

	* gio/src/application.[hg|ccg]: Add create_*() methods without argc and
	argv parameters, because these can be NULL.

2010-07-30  Murray Cumming  <murrayc@murrayc.com>

	Added Gio::Application, wrapping GApplication.

	* gio/src/filelist.am:
	* gio/src/application.[hg|ccg]: New files. We maybe want to move some of
	Glib::Main to this and deprecated Glib::Main, though it would then be
	annoying to use Glib::RefPtr there.

2010-07-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add Gio::DBus::[own|unown]_name().

	* gio/src/dbusconnection.hg: Wrap the BusType enum and add class docs.
	* gio/src/dbusownname.{ccg,hg}: Add new source files that implement
	the own_name() and unown_name() functions.  The functions are defined
	in a Gio::DBus namesapce.
	* gio/src/filelist.am: Mention the hg source file so that the sources
	are built.

2010-07-30  José Alburquerque  <jaalburqu@svn.gnome.org>

	VaraintBase: Use output parameters instead of returning values.

	* glib/src/variant.{ccg,hg}: get_normal_form(), byteswap(): Handwrote
	these methods so that output parameters can be used instead of
	returning the result.

2010-07-29  Murray Cumming  <murrayc@murrayc.com>

	Variant: Added some methods.

	* glib/src/variant.hg: Added some methods.

2010-07-29  Murray Cumming  <murrayc@murrayc.com>

	VariantType: Added create_*() methods.

	* glib/src/glib_functions.defs: Regenerated, manually changing some
	define-method lines to define-function lines.
	* glib/src/varianttype.[hg|ccg]: Added create_*() methods and a
	(std::string) constructor.
	* tools/m4/convert_glib.m4: Added a conversion.

2010-07-29  Murray Cumming  <murrayc@murrayc.com>

	VariantType: Add more appropriate constructor and add Gtk::Stock-like types.

	* glib/src/varianttype.[hg|ccg]: Add a cobject constructor that always copies,
	and an operator= to match.
	Add VariantType* objects to match the G_VARIANT_TYPE_* defines in C.

2010-07-29  Murray Cumming  <murrayc@murrayc.com>

	Added VariantType

	* glib/src/filelist.am:
	* glib/src/varianttype.[hg|ccg]: Added VariantType, though
	we still need to wrap the _new_*() functions as create_*().
	* tools/m4/convert_glib.m4: Added necessary conversions.

2010-07-28   Martin Braure de Calignon  <braurede@free.fr>

	giomm: DBusConnection: Added send_message_with_reply().

	* gio/src/dbusconnection.[hg|ccg]: Added send_message_with_reply()
	and send_message_with_reply_finish().

2010-07-27  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add Gio::DBusMethodInvocation.

	* gio/src/dbusmethodinvocation.{ccg,hg}:
	* gio/src/filelist.am: Add source files for Gio::DBusMethodInvocation.
	* tools/m4/convert_gio.m4: Add necessary conversions.
	* gio/src/unixfdlist.hg: Add missing @newin{}'s.
	* gio/src/dbusauthobserver.hg: Typo.

2010-07-27  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::Message: Wrap several methods.

	* gio/src/dbusmessage.ccg:
	* gio/src/dbusmessage.hg: Wrap create_method_error_literal(),
	get_body(), set_body(), [get|set|unset]_unix_fd_list().  Reordered
	method declarations according to the C declarations.  Added class and
	method docs.
	* tools/m4/convert_gio.m4: Added conversions for new methods above.

2010-07-27  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::UnixFDList: peek_fds(): Made return const for emphasis.

	* gio/src/unixfdlist.ccg:
	* gio/src/unixfdlist.hg: Remove redundant paragraph in class docs.
	(peek_fds): Made return const to emphasize that the file descriptors
	should not be modified.
	(steal_fds): Remove unnecessary const_cast<>.

2010-07-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::UnixFDList: Add params and returns in create() method docs.

	* gio/src/unixfdlist.hg (create): Add @param and @return to the method
	docs for clarity.

2010-07-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add Gio::UnixFDList.

	* gio/src/unixfdlist.ccg:
	* gio/src/unixfdlist.hg:
	* gio/src/filelist.am: Add the UnixFDList source files.

	* gio/src/dbusserver.hg (DBusServer): Add a description line to the
	class header.

2010-07-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBusServer: Use the _CONSTRUCT macro in the constructor.

	* gio/src/dbusserver.ccg (DBusServer): Use the _CONSTRUCT macro in the
	constructor so that its instances are constructed properly.

2010-07-25  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add Gio::DBusServer.

	* gio/src/dbusserver.ccg:
	* gio/src/dbusserver.hg:
	* gio/src/filelist.am: Add the new sources for Gio::DBusServer.

	* tools/extra_defs_gen/generate_defs_gio.cc:
	* gio/src/gio_signals.defs: Add the GDBusServer type to the extra defs
	generation utility and regenerate the signal defs file to get the
	signals and properties of GDBusServer.

	* tools/m4/convert_gio.m4: Add conversions for GDBusServer.
	Alphabetize the enum conversions.

	* gio/src/dbusauthobserver.hg: Typos.

2010-07-25  Murray Cumming  <murrayc@murrayc.com>

	DBusAuthObserver: Fix the build with latest glib.

	* gio/src/dbusauthobserver.hg: authorize_authenticated_peer signal:
	Use no_default_handler, so we don't try to access the (totally private)
	GDBusAuthObserverClass struct.

2010-07-23  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::DBusAuthObserver: Make parameters constant.

	* gio/src/dbusauthobserver.[hg|ccg]:
	* gio/src/filelist.am: Add the source files, this time making sure the
	parameters in the methods and signals are constant because this class
	is only meant to observe authentications of remote peers and tell if
	the connection is valid based on the parameters.  It doesn't look like
	the parameters should be changed in the signal handlers.

	* gio/src/gio_signals.defs:
	* tools/extra_defs_gen/generate_defs_gio.cc: Add changes not included
	in the addition of the Gio::DBusAuthObserver API.

	* tools/m4/convert_gio.m4: Fix the conversions so that they convert
	from const parameters to non-const for the C API.

2010-07-23  Murray Cumming  <murrayc@murrayc.com>

	Fix warnings.

	* gio/src/settings.hg:
	* glib/src/variant.hg: Remove extra ;s.

2010-07-23  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add Gio::DBusAuthObserver.

	* gio/src/dbusauthobserver.[hg|ccg]:
	* gio/src/filelist.am: Add the source files of Gio::DBusAuthObserver
	and add them to the compile list.

	* tools/extra_defs_gen/generate_defs_gio.cc:
	* gio/src/gio_signals.defs: Add the G_TYPE_DBUS_AUTH_OBSERVER to the
	extra defs gio utility and regenerate the signals defs file with the
	utility to get the signals and properties of GDBusAuthObserver.

2010-07-22  Murray Cumming  <murrayc@murrayc.com>

	DBusMessage: Add get_header() and set_header().

	* gio/src/dbusmessage.[hg|ccg]: Add get_header(), using a VariantBase output
	parameter, and set_header().
	* gio/src/settings.[hg|ccg]: get_value(): Make this const too.
	* tools/m4/convert_gio.m4: Added conversions.

2010-07-22  Murray Cumming  <murrayc@murrayc.com>

	Variant<>: Make this usable as an ouput parameter.

	* glib/src/variant.[hg|ccg]: VariantBase: Added init(), like Value::init().
	This just changes the gobject_, with appropriate unref and ref.
	* gio/src/settings.[hg|ccg]: get_value(): Use an output parameter for the
	VariantBase, instead of a return value, as we do for Value, allowing the
	caller to use a derived (templated) type.
	* examples/settings/settings.cc: Show how Variant<> can be used.

2010-07-22  Murray Cumming  <murrayc@murrayc.com>

	Settings example: Minor change.

	* examples/settings/settings.cc: Remove the unnecessary use of
	Glib::ustring::raw().

2010-07-22  Murray Cumming  <murrayc@murrayc.com>

	Variant: Added some methods.

	* glib/src/variant.[hg|ccg]: ValueBase: Wrap some simple functions
	with _WRAP_METHOD().
	* glib/src/variant_basictypes.h.m4: Syntax changes, and make the castitem
	constructor explicit.
	* tools/m4/convert_gio.m4: Added necessary conversion.

	We need to decide how to use this in get*() methods and add some tests.

2010-07-22  Murray Cumming  <murrayc@murrayc.com>

	giomm: DBusMessage: Added several  methods.

	* gio/src/dbusmessage.hg: Wrapped the simple functions.
	* tools/m4/convert_gio.m4: Added necessary conversions.

2010-07-22  Murray Cumming  <murrayc@murrayc.com>

	giomm: DBusMessage: Added create_*() methods.

	* gio/src/dbusmessage.hg: Added create_signal(), create_method_call() and
  create_method_reply().
	* tools/m4/convert_gio.m4: Added necessary conversion.

2010-07-21  Murray Cumming  <murrayc@murrayc.com>

	Added DBusMessage and DBusConnection::send_message().

	* gio/src/gio_methods.defs: Regenerated.
	* gio/src/filelist.am:
	* gio/src/dbusmessage.[hg|ccg]: New wrapper for GMessage, with no methods
	yet.
	* gio/src/dbusconnection.hg: Added send_message().
	* tools/m4/convert_gio.m4: Added necessary conversions.
	* gio/src/credentials.hg: Uncommented out some methods now that the .defs
	are correct.
	* gio/src/socket.hg: Added get_credentials().

2010-07-21  Murray Cumming  <murrayc@murrayc.com>

	giomm: Added Credentials and DBusConnection::get_peer_credentials().

	* gio/src/gio_enums.defs: Regenerated.
	* gio/src/filelist.am:
	* gio/src/credentials.[hg|ccg]: New wrapper for GCredentials.
	* gio/src/dbusconnection.hg: Added get_peer_credentials().

2010-07-15  Murray Cumming  <murrayc@murrayc.com>

	Fix the build for a GDBusConnection API change.

	* gio/src/gio_methods.defs:
	* gio/src/gio_unix_functions.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gobject_functions.defs: Regenerate.
	* glib/src/gdbusconnection.[hg|ccg]: Made close() async, adding close_finish()
	and close_sync().
	Added flush(), flush_finish() and flush_sync().

2010-06-29  Murray Cumming  <murrayc@murrayc.com>

	Added DBusConnection

	* gio/src/gio_enums.defs: Regenerated with tools/enums.pl.
	* gio/src/filelist.am:
	* gio/src/dbusconnection.[hg|ccg]: Added DBusConnection with just the
	simplest methods.
	I might put this in a GDBus namespace, and maybe even in a separate library.

2010-06-24  Murray Cumming  <murrayc@murrayc.com>

	Simplify VariantBase .hg code and use it in Settings.

	* glib/src/variant.[hg|ccg]: Use CLASS_OPAQUE_COPYABLE() instead of
    _CLASS_GENERIC() to avoid writing some stuff manually. This seems to be OK.
    Do not include the C header in our .h file.
	* tools/m4/convert_gio.m4: Added GVariantBase conversions.
	* gio/src/settings.hg: Added get_value() and set_value().

2010-06-22  Murray Cumming  <murrayc@murrayc.com>

    Clean up glib_functions.defs.

	* glib/src/glib_functions.defs: Remove bad definitions of function-pointers
    that cause annoying warnings during the build.

2010-06-19  José Alburquerque  <jaalburqu@svn.gnome.org>

	Glib::Variant<>: Use gmmproc files so wrapping is not done manually.

	* glib/src/glib_functions.defs: Regenerate to get the GVariant
	functions.
	* glib/src/variant.ccg:
	* glib/src/variant.hg:
	* glib/src/filelist.am: Add the new .hg and .ccg files and mention
	them.  Wrapping is now done using gmmproc instead of handwriting the
	methods.
	* glib/glibmm/variant.cc:
	* glib/glibmm/variant.h:
	* glib/glibmm/filelist.am: Remove these files and their mentions
	because now they are written as .hg and .ccg files.
	* glib/src/variant_basictypes.h.m4: Add docs.

2010-06-19  Koop Mast  <kwm@freebsd.org>

	Restore lost #else block to fix build without __STDC_ISO_10646__

	* glib/glibmm/ustring.cc: Add back an #else block that was probably lost
	while automatically removing the no-exceptions #if/#else code.

2010-06-18  José Alburquerque  <jaalburqu@svn.gnome.org>

	Preliminary implementation of Glib::Variant<> classes.

	* glib/glibmm/variant.cc:
	* glib/glibmm/variant.h:
	* glib/src/variant_basictypes.cc.m4:
	* glib/src/variant_basictypes.h.m4: Add an initial implementation of
	of the Glib::Variant<> classes which wrap glib's GVariant API.

2.25.2:

2010-06-18  Murray Cumming  <murrayc@murrayc.com>

	Settings: Fix the build with the latest glib.

	* gio/src/settingsbackend.[hg|ccg]: Add this interface. Notice the
    comment about the semi-private get_type() function.
    * gio/src/filelist.am: Mention the new files.
    * gio/src/settings.hg: Adapt to the changed glib API, using
    a SettingsBackend backend instead of a string context.

2010-06-08  Murray Cumming  <murrayc@murrayc.com>

	Use GLIBMM_DISABLE_DEPRECATED on StreamIoChannel.

	* glib/glibmm/streamiochannel.[h|cc]: Put #ifndef GLIBMM_DISABLE_DEPRECATED
    around this long-since-deprecated class.

2010-06-08  Murray Cumming  <murrayc@murrayc.com>

	Remove a junk line from VolumeMonitor.hg.

	* gio/src/volumemonitor.hg: Remove this line because it must have been
    an accidental paste or some other confusion:
    gboolean (*is_supported)          (void);
    It is API but not anything anybody ever would have used.

2.25.1:

2010-06-07  Daniel Elstner  <danielk@openismus.com>

	Do not install the schema of the gsettings example

	* examples/Makefile.am: Do not install the schema file of the settings
	example to the user's system.  Instead, compile the binary shema cache
	in a local directory and have the example use that.  As a side effect,
	this also resolves the "make distcheck" failure when trying to install
	the schema.
	* examples/settings/settings.cc (main): Do not try to determine the
	schema directory from the executable name, as it depends too much on
	the libtool setup with the hidden .libs directory being part of the
	path name.  Requiring the user to change to the example directory is
	good enough.  Also, initialize the C++ locale on program startup, and
	call Gio::init() instead of Glib::init().
	(on_key_changed): Call ustring::raw() to suppress the locale-aware
	comparison ustring performs by default.

2010-06-06  Murray Cumming  <murrayc@murrayc.com>

	Documentation: Mention module names in Enums and Flags doxygen groups.

	* tools/m4/enum.m4: Add the module name (such as gdkmm or gtkmm) to the
	doxygen Enums and Flags groups, to avoid duplicate names appearing in the
	Modules list.

2010-06-06  Murray Cumming  <murrayc@murrayc.com>

	Settings: Fix the build with the latest glib from git master.

	* gio/src/gio_methods.defs: Remove extra length parameters, removed from the
	C API. This is a generated file, but this change is simple.
	* gio/src/settings.[hg|ccg]: get_string_array(), set_string_array():
	Remove the length parameter, and just use _WRAP_METHOD() now that it is simple
	enough for that.
	* tools/m4/convert_gio.m4: Add a necessary conversion.
	* glib/src/glib_functions.defs: Remove some bad unused definitions that
	were causing annoying warnings.

2010-06-06  Murray Cumming  <murrayc@murrayc.com>

	Remove default conversion to StringArrayHandle

	* tools/m4/convert_gio.m4: Remove a default conversion from char** to
	StringArrayHandle, because there can be no good default, because each use
	can have different ownership, so it risks hiding an error.
	* gio/src/drive.hg:
	* gio/src/fileinfo.hg:
	* gio/src/filenamecompleter.hg:
	* gio/src/volume.hg: Add a local #m4 conversion instead.
	One day we will have the new introspection information (with the ownership)
	available to gmmproc so we don't need to do this.

2010-06-04  Chris Kühl  <blixtra@gmail.com>

	Removal of length parameter for g_settings_[gs]et_strv

	* gio/src/settings.ccg: Removed length parameter from
	  get_string_array and set_string_array.

2010-06-04  Murray Cumming  <murrayc@murrayc.com>

    Avoid compiler warning.

	* examples/settings/settings.cc: Comment out an unused paramter to
    fix a compiler warning, to partly fix the distcheck.

2010-06-02  José Alburquerque  <jaalburqu@svn.gnome.org>

	Gio::Settings: [get|set]_strv(): Rename to [get|set]_string_array().

	* gio/src/settings.ccg:
	* gio/src/settings.hg ([get|set]_strv): Rename to *_string_array()
	which is more readable.

2010-06-01  Jonathon Jongsma  <jonathon@quotidian.org>

	* configure.ac: use GLIB_GSETTINGS
	* examples/Makefile.am: fix the settings example to use the new m4
	  macros shipped with glib.  The previous method was breaking 'make
	  dist'

2010-06-01  Murray Cumming  <murrayc@murrayc.com>

	Add missing GLIBMM_VFUNCS_ENABLED to avoid breaking existing code.

	* glib/glibmmconfig.h.in: Added missing GLIBMM_VFUNCS_ENABLED.

2010-06-01  Murray Cumming  <murrayc@murrayc.com>

	Gio::Settings: Make get_has_unapplied() const.

	* gio/src/settings.hg: get_has_unapplied(): Make this const.

2010-05-31  José Alburquerque  <jaalburqu@svn.gnome.org>

	Wrapped new glib-2.26 methods.

	* configure.ac: Bump the glib requirement up to 2.25.7 because of the
	new methods that are wrapped.
	* glib/src/glib_docs.xml:
	* glib/src/glib_functions.defs: Regenerate to get new methods and the
	docs for them.
	* glib/src/keyfile.ccg:
	* glib/src/keyfile.hg (get_boolean): Added method overload (as other
	get_*() methods have).
	(get_int64, get_uint64, set_int64, set_uint64):
	* glib/src/regex.hg (get_compile_flags, get_match_flags): Wrapped new
	methods.
	* gio/src/settings.hg:
	* gio/src/socket.hg: Add some forgotten _IGNORE's and @newin{}'s.

2010-05-31  Murray Cumming  <murrayc@murrayc.com>

	Remove the reduced API options and code, as discussed on mailing list.

	* configure.ac: Removed the --enable-api-exceptions, --enable-api-properties,
	--enable-api-vfuncs and --enable-api-default-signal-handlers options.
	* build/reduced.m4: Removed.
	* tools/m4/*.m4:
	* tools/pm/Output.pm: Remove any use of ifdefs and auto_ptr for reduced API.
	* *.[hg|ccg|h|cc]: Remove the idefed code.

2010-05-30  Daniel Elstner  <danielk@openismus.com>

	Avoid compiler warning in TimeVal::as_double()

	* glib/glibmm/timeval.h (TimeVal::as_double): Cast long int operands
	to double explicitly, to avoid a conversion warning due to possible
	loss of precision.  Reported by Alexander Shaduri, GNOME bug #617463.

2010-05-28  José Alburquerque  <jaalburqu@svn.gnome.org>

	Settings: Add [get|set]_strv().

	* gio/src/settings.ccg:
	* gio/src/settings.hg: Added [get|set]_strv().  Also added a
	get_child() const version.  Reordered signal wrappings to reflect the
	order of the C API docs.

2010-05-27  José Alburquerque  <jaalburqu@svn.gnome.org>

	OptionGroup: set_translate_slot(): Rename to set_translate_func().

	* glib/src/optiongroup.ccg:
	* glib/src/optiongroup.hg set_translate_slot(): Rename to
	set_translate_func() which is more like the C API's name.

2010-05-27  José Alburquerque  <jaalburqu@svn.gnome.org>

	OptionGroup: Add set_translate_slot().

	* glib/src/optiongroup.ccg:
	* glib/src/optiongroup.hg: Wrap g_option_group_set_translate_func().

2010-05-25  José Alburquerque  <jaalburqu@svn.gnome.org>

	Add _IGNORE's for g_iconv().

	* glib/src/date.hg:
	* glib/src/fileutils.hg:
	* glib/src/markup.hg:
	* glib/src/optionentry.hg:
	* glib/src/shell.hg:
	* glib/src/spawn.hg:
	* glib/src/thread.hg:
	* glib/src/unicode.hg:
	* glib/src/uriutils.hg: For some reason, gmmproc thinks that g_iconv
	should be wrapped in these files so include _IGNORE's so that it is
	clear what has not been wrapped yet.

2010-05-25  José Alburquerque  <jaalburqu@svn.gnome.org>

	Wrap a couple of unwrapped methods.

	* gio/src/desktopappinfo.hg: Wrap get_filename().
	* glib/src/keyfile.hg: Wrap load_from_dirs().
	* glib/src/convert.hg:
	* glib/src/valuearray.hg: some _IGNORE()'s.

2010-05-05  José Alburquerque  <jaalburqu@svn.gnome.org>

	gmmproc: Quote the property docs to avoid losing text after commas.

	* tools/pm/Output.pm: Quote the property docs for the _PROPERTY_PROXY
	macros by first changing the quotes, quoting the docs and then
	changing the quotes back.  This avoids losing the contents after
	possible commas in property docs.  (Using the standard m4 quotes
	leaves trailing single quotes for some reason).

	Fixes Bug #603930 (Jonatan Olofsson).

2010-05-03  Murray Cumming  <murrayc@murrayc-x61>

	Documentation: Add more links to main page, and mention giomm.

	* glib/glibmm.h: Add more doxggen links to groups and classes, based on
	http://www.gtkmm.org/documentation.shtml and a look at the classes list.
	Mention giomm features and add giomm to the pkg-config calls and mention
	giomm.h

2010-04-29  José Alburquerque  <jaalburqu@svn.gnome.org>

	gio_docs.xml: Regenerate with the new doc extraction tool.

	* gio/src/gio_docs.xml: Regenerate docs with the latest
	docextract_to_xml.py in pygobject to get better docs in general.

2010-04-27  David King  <davidk@openismus.com>

	Further changes to main page documentation

	* glib/glibmm.h: Some minor changes to the main page documentation.

2010-04-23  David King  <davidk@openismus.com>

	Improvements to main page documentation

	* glib/glibmm.h: Add external links and compilation example.

2010-04-22  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* configure.ac: require glib 2.25.1 for GSettings

2010-04-17 Alex Vallée <alex@alexvallee.com>

	Wrap function g_listenv().

	* glib/glibmm/miscutils.[h|cc]: Add wrap function Glib::listenv(). Fixes
	bug #578355.

2010-04-21  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* .gitignore:
	* examples/Makefile.am:
	* examples/settings/org.gtkmm.demo.gschema.xml: Added.
	* examples/settings/settings.cc: Added.
	* gio/giomm.h: include settings header here
	Add a basic Gio::Settings example

2010-04-20  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* gio/src/filelist.am:
	* gio/src/gio_signals.defs:
	* gio/src/settings.ccg: Added.
	* gio/src/settings.hg: Added.
	* tools/extra_defs_gen/generate_defs_gio.cc:
	* tools/m4/convert_gio.m4: Initial implementation of Gio::Settings

2010-04-20  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/gio_docs.xml
	* gio/src/gio_enums.defs
	* gio/src/gio_methods.defs: re-generate defs to start wrapping
	  GSettings stuff

2010-04-16  David King  <davidk@openismus.com>

	Add main page to Doxygen documentation

	* docs/Makefile.am: Parse glib/glibmm.h for documentation.
	* glib/glibmm.h: Add main page to Doxygen documentation.

2.24.1:

2010-04-13  José Alburquerque  <jaalburqu@svn.gnome.org>

	One more regeneration of docs to avoid gmmproc parsing errors.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Regenerated with a fixed
	docextract_to_xml.py script to avoid parsing errors by &...;
	expressions that gmmproc does not understand.

2010-04-12  Armin Burgmeier  <armin@arbur.net>

	* examples/compose/main.cc: Don't use ustring::format with std::fixed
	with MSVC 2005 or below (see #599340).

	* MSVC_Net2005/examples/compose/compose.vcproj:
	* MSVC_Net2005/glibmm.sln:
	* MSVC_Net2008/examples/compose/compose.vcproj:
	* MSVC_Net2008/glibmm.sln: Added the compose example for both MSVC
	versions.

2010-04-12   Alex Vallee  <avallee@hotmail.com>

	UnixOutputStream: Fix the constructor to use the correct property name.

	* gio/src/unixoutputstream.hg: Correct the constructor parameter name
    used in the _WRAP_CTOR() call. We had already fixed the property name
    but had forgotten to fix this, which affects the generated implementation.
    Fixes bug #615482

2010-04-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	Regenerate docs with the new docextract_to_xml.py script.

	* gio/src/gio_docs.xml:
	* glib/src/glib_docs.xml: Regenerated with the new documentation
	extraction script to take advantage of the new generation method it
	uses.

2010-04-02  Armin Burgmeier  <armin@arbur.net>

	* examples/network/resolver.cc:
	* examples/network/socket-client.cc: Fix the build with MSVC.

	* glib/glibmmconfig.h.in: Enable GLIBMM_HAVE_WIDE_STREAM with MSVC.

	* tools/extra_defs_gen/generate_defs_gio.cc: Fix the Windows build by
	ifdefing-out G_TYPE_UNIX_CONNECTION.

	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2005/glibmm/glibmm.vcproj:
	* MSVC_Net2008/giomm/giomm.vcproj:
	* MSVC_Net2008/glibmm/glibmm.vcproj: Added new source and header files
	to the Visual Studio projects.

	* MSVC_Net2005/examples/resolver/resolver.vcproj:
	* MSVC_Net2005/examples/socket-client/socket-client.vcproj:
	* MSVC_Net2005/examples/socket-server/socket-server.vcproj:
	* MSVC_Net2005/glibmm.sln:
	* MSVC_Net2005/filelist.am:
	* MSVC_Net2008/examples/resolver/resolver.vcproj:
	* MSVC_Net2008/examples/socket-client/socket-client.vcproj:
	* MSVC_Net2008/examples/socket-server/socket-server.vcproj:
	* MSVC_Net2008/glibmm.sln:
	* MSVC_Net2008/filelist.am: Added the new examples to the projects.

2.24.0:

    Updated configure and NEWS for the stable release.

2.23.4:

2009-03-26  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

    Gio::File: Add TypeTraits to fix Gtk::FileChooser::get_files() in gtkmm.

	* gio/src/file.hg: add TypeTraits to allow concrete implementations
    of GFile to be wrapped properly.  For example, this fix allows
    Gtk::FileChooser::get_files() to work properly (Fixes #590940)

2010-03-26  Murray Cumming  <murrayc@murrayc.com>

    Add regression test for Bug #613250.

    * tests/Makefile.am
	* tests/glibmm_ustring_format/main.cc: Added a regression test for the
    previously-commited fix, based on code in bug #613250 from Debarshi Ray.

2010-03-20  Debarshi Ray  <debarshir@src.gnome.org>

	Bug #613250 - Overload Glib::ustring::FormatStream::stream for char *.

    * glib/glibmm/ustring.[h|cc]: Add a FormatStream::stream(char*) override
    because otherwise the templated stream() is called, which results in
    corrupted data.

2010-03-24  Murray Cumming  <murrayc@murrayc.com>

    ThemedIcon: Added get_names().

	* gio/src/themedicon.[hg|ccg]: Add get_names() manually because we have
    a strange error when trying to use _WRAP_METHOD() for it.
    Bug #612584 (Markus Schwab)

2010-03-23  Alexey Kosilin  <kosilin@gmail.com>

    MemoryInputStream: Correct data loss/corruption with binary data.

	* gio/src/memoryinputstream.ccg: add_data(): Use g_memdup() instead of
    g_strdup() on data that could have a null in the middle.
    Bug #609552 (Holger Seelig)

2010-03-15  José Alburquerque  <jaalburqu@svn.gnome.org>

	Revert accidentally pushed commits.

	* ChangeLog-ValueArrayTest:
	* ChangeLog.local:
	* tests/glibmm_valuearray/main.cc:
	* tools/docextract_to_xml.pl: Revert accidentally pushed commits which
	should be pushed with bugs that were filed.

2010-03-15  José Alburquerque  <jaalburqu@svn.gnome.org>

	Regenerate defs files.

	* gio/src/gio_enums.defs:
	* gio/src/gio_methods.defs:
	* glib/src/glib_enums.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gmodule_enums.defs:
	* glib/src/gmodule_functions.defs:
	* glib/src/gobject_enums.defs:
	* glib/src/gobject_functions.defs: Regenerate defs file, particularly
	the enum defs file with the new enum generation tool.

2010-03-10  David King  <davidk@openismus.com>

	Reorder assignment to LDADD and giomm_ldadd in tests/Makefile.am

	* tests/Makefile.am: Reorder values assigned to LDADD and
	giomm_ldadd to place built libraries before system libraries.
	Fixes GNOME bug #610854.

2.23.3:

2010-03-08 Krzesimir Nowak <qdlacz@gmail.com>

	Updated enum.pl script.

	* tools/enum.pl: Updated to work with `use strict' and
	`use warnings', prints original enums in comments above every enum
	defs, added --omit-deprecated (just omits everything deprecated)
	option, handles most of enums and flags (especially flags!)
	properly, generates proper nicks for enums with one value, prints
	warnings to stderr about several stuff, uses some primitive
	heuristics to detect whether an enum is enum or flags. It is
	a better hack, but still a hack.

2010-01-28  Murray Cumming  <murrayc@murrayc.com>

	AsyncResult: Add get_source_object_base(), deprecating get_source_object().

	* gio/asyncresult.[hg|ccg]: Deprecate get_source_object(), replacing it
	with get_source_object_base(), because in giomm, the C++ wrapper object
	might be a Glib::Interface, but not a Glib::Object (though the underlying
	C instance must be a GObject). This happens if giomm does not know about
	the GType of the underlying C Object, which is a legitimate situation.
	* tests/giomm_asyncresult_sourceobject/main.cc: Added this test case
	from Michael Hasselmann, from bug #608269.

2010-03-08  Murray Cumming  <murrayc@murrayc.com>

	Regenerated more .defs.

	* gio/src/gio_enums.defs:
	* glib/src/glib_enums.defs: Regenerated with enums.pl
	* gio/src/gio_methods.defs: Regenerated with h2defs.py

2010-03-08  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/glib_functions.defs: Regenerated with h2defs.py.

2010-03-08  Debarshi Ray  <debarshi.ray@gmail.com>

	Bug #611521 - Free Gio::SlotFileProgress (and friends) at completion

	* gio/src/file.ccg:
	The Gio::SlotFileProgress slots (and their friends) used in operations like
	Gio::File::copy, Gio::File::copy_async and Gio::File::move should not freed
	when their C callbacks are invoked for the first time. Instead they should be
	freed after the operation has completed.

2010-02-27  Daniel Elstner  <daniel.kitta@gmail.com>

	Avoid compiler warning in resolver example

	* examples/network/resolver.cc (interrupted): Check the return value
	of the write() call to avoid a warning from GCC.  Save and restore
	the value of errno to make the signal handler reentrant.  Get rid of
	the signal() call to re-establish the default handler, as there is
	not much of a point in doing so for this handler.
	(main): Create the pipe before installing the signal handler.

2010-02-22  Michael  <space3000@gmail.com>

	Gio::MemoryInputStream::add_data(): Minor documentation fix.

	* gio/src/memoryinputstream.hg: Move a deprecation warning to the
	correct method overload.

2010-02-06  Murray Cumming  <murrayc@murrayc.com>

    IOStream: get_input_stream(), get_output_stream(): Fix reference counting.

	* gio/src/iostream.hg: get_input_stream(), get_output_stream(): Use refreturn
	to avoid a crash as mentioned in bug #607554.

2010-02-06  Murray Cumming  <murrayc@murrayc.com>

    MemoryOutputStream: Add properties.

	* gio/src/gio_signals.defs: Regenerated.
	* gio/src/memoryoutputstream.hg: Add properties, as suggesed in bug #605710.

2010-02-06  Krzysztof Kosiński  <tweenk.pl@gmail.com>

    MemoryOutputStream: Fix the constructor.

	* gio/src/memoryoutputstream.hg: Constructor and create(): Rename the len
	parameter to size, to match the properties, so the constructor works.
	Bug #605710

2.23.2:

2010-02-05  Murray Cumming  <murrayc@murrayc.com>

  UnixInputStream: Fix the constructor.

	* gio/src/unixinputstream.hg: Constructor and create(): Rename the
	close_fd_at_close parameter to close_fd to match the properties (and the
	C function), so our constructor works.
	Bug #608665 (Matt Marsh)

2010-01-29  Murray Cumming  <murrayc@murrayc-desktop>

	Regenerated method .defs. Added a Resolver signal.

	* gio/src/gio_enums.defs: Removed GSocketMsgFlags because it contained
	an #error and the values are non-numeric anyway.
	* gio/src/gio_methods.defs: Regenerated with h2defs.py
	* glib/src/glib_functions.defs: Regenerated with h2defs.py, removing
	badly-generated ones that try to mention function pointers.
	* gio/src/resolver.hg: Added reload signal.

2010-01-29  Murray Cumming  <murrayc@murrayc.com>

	Use 0 instead of NULL.

	* gio/src/*.ccg
	* glib/src/*.ccg: Use 0 instead of NULL because this is C++ where
	NULL is generally not a good idea. I didn't see any places where it
	was a real problem though.

2010-01-29  Murray Cumming  <murrayc@murrayc.com>

	Use Glib::unwrap() instead of ->gobj(),

	* gio/src/*.ccg: Use Glib::unwrap() instead of ->gobj(), so we don't
	crash if people pass in null RefPtr<>s, which they might do by
	accident, or if we have not wrapped all the may-be-null cases as
	method overrides.

2010-01-29  Murray Cumming  <murrayc@murrayc.com>

	File: Added has_parent() and supports_thread_contexts().

	* gio/src/file.[hg|ccg]: Added has_parent(), supports_thread_contexts().

2010-01-28  Murray Cumming  <murrayc@murrayc.com>

	File: Added start_mountable(), stop_mountable(), poll_mountable().

	* gio/src/drive.[hg|ccg]:
	* gio/src/mount.hg:
	* gio/src/volume.hg: Change some includes to allow file.h to include
	more.
	* gio/src/file.[hg|ccg]: Added start_mountable(), stop_mountable(),
	poll_mountable() and the *_finish() methods. The awful documenation
	will be improved when I have improved it (tomorrow) for the C functions.

2010-01-28  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg: Correct/Add newin2p* doxygen comments.

2010-01-28  Murray Cumming  <murrayc@murrayc.com>

	File: Added create_file_readwrite() and creat_file_readwrite_async().

	* gio/src/file.[hg|ccg]: Added create_file_readwrite(),
	create_file_readwrite_async() and create_file_readwrite_finish().

2010-01-28  Murray Cumming  <murrayc@murrayc.com>

	File: unmount_mountable(), eject_mountable(): Add overrides with MountOperation.

	* gio/src/file.[hg|ccg]: unmount_mountable(), eject_mountable():
	Reimplement these with the new *_with_operation functions.
	Undeprecate them - that should not have happened without replacements.
	Added unmount_mountable() and eject_mountable() overrides with
	MountOperation parameters. Unfortunately there are now 6 of each.

2010-01-28  Murray Cumming  <murrayc@murrayc.com>

	File, Cancellable: Added some new methods.

	* gio/src/cancellable.hg: Added release_fd() and make_polldf().
	* gio/src/file.[hg|ccg]: Added open_readwrite(), open_readwrite_async()
	and finish_readwrite().
	Added replace_readwrite(), replace_readwrite_async() and
	finish_replace_readwrite().
	* tools/m4/convert_gio.m4:Added conversion for FileIOStream.
	* glib/src/glib_enums.defs: Fix an #error that enum.pl has put there
	for some reason.

Missing ChangeLog entry from Alexander Shaduri: (Committed by Jonathan Jongsma)
2010-01-06	Bug #594173 - NodeTree::get_root() violates const-correctness

Missing ChangeLog entry from Krzesimir Nowak: (Committed by Jonathan Jongsma)
2010-01-06	Bug #606100 - Fix wrapping properties.

Missing ChangeLog entries from Jonathan Jongsma:
2010-01-06	Bug #606146 - Relax the glib requirement
2010-01-06	Rename btree.* to balancedtree.*
2010-01-06	Fix up some formatting issues for BalancedTree

Missing ChangeLog entries from Szilárd Pfeiffer: (Committed by Jonathan Jongsma)
2010-01-06	Implement GTree wrapper
2010-01-06	Implemented reference counting for BalancedTree.
2010-01-06	Fixed several bugs of balanced binary tree wrapper.

2.23.1:

2010-01-05  Daniel Elstner  <daniel.kitta@gmail.com>

	Fine-tune Doxygen configuration to improve output

	* docs/reference/Doxyfile.in (SHOW_INCLUDE_FILES): Enable option, as
	it looks better than SHOW_USED_FILES and can be adjusted by means of
	the @headerfile command.
	(SHOW_USED_FILES): Disable.
	(ALPHABETICAL_INDEX): Enable alphabetical class index.
	(PREDEFINED): Predefine G_GNUC_INTERNAL in anticipation of explicit
	symbol visibility attributes.
	(CLASS_DIAGRAMS): Enable to get class inheritance graphs without any
	of the other graph options.
	(DOT_FONTNAME): Change to Sans to avoid the bad hinting for FreeSans
	at least on my system, which resulted in blurry graph labels.
	(COLLABORATION_GRAPH), (GROUP_GRAPHS), (TEMPLATE_RELATIONS): Disable
	additional graphs to reduce the noise.

Missing ChangeLog entries from Jonathan Jongsma:
2010-01-04	A bunch of minor doxygen cleanups around the tree
2010-01-04	wrap g_socket_connection_factory_create_connection()
2010-01-04	Add non-cancellable versions of a bunch of SocketClient functions

2.23.0:

2009-12-16  Armin Burgmeier  <armin@arbur.net>

	* gio/giomm.h: Don't include files on Windows that are not available
	on that platform.

2009-12-03  José Alburquerque  <jaalburqu@svn.gnome.org>

	Make build successful when exceptions, vfuncs, etc. are disabled.

	* gio/src/iostream.hg (close): Include a definition for when
	exceptions are disabled.
	* glib/src/keyfile.ccg: Correct some typos related to exceptions
	disabled.
	* gio/src/socket.ccg:
	* gio/src/socket.hg: Included definitions and code for when
	exceptions are disabled.
	* gio/src/resolver.ccg (hostname_to_ascii):
	(hostname_to_unicode): Included returns to avoid warnings.

2009-10-23  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	Re-enable Network IO stuff (Socket, Resolver, etc)

	* .gitignore:
	* examples/Makefile.am:
	* examples/network/resolver.cc: Ported example from glib
	* examples/network_io/resolve.cc: Removed.
	* gio/giomm.h: Add network headers
	* gio/src/error.hg: Add ResolverError
	* gio/src/inetaddress.ccg:
	* gio/src/inetaddress.hg: Fix broken constructor
	* gio/src/resolver.ccg:
	* gio/src/resolver.hg: Added a few missing free functions

2009-11-23  Murray Cumming  <murrayc@murrayc.com>

	Regex: Slight documentation improvement.

	* tools/m4/class_opaque_refcounted.m4: refererence()/unreference():
	Use the same doxygen comments as on ObjectBase::reference/unreference()
	so this shows up, for instance, on Glib::Regex.

2009-10-22  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2005/glibmm/glibmm.vcproj:
	* MSVC_Net2008/giomm/giomm.vcproj:
	* MSVC_Net2008/glibmm/glibmm.vcproj: Added new files in 2.22 to the
	projects.

	* MSVC_Net2005/examples/keyfile/keyfile.vcproj:
	* MSVC_Net2005/examples/properties/properties.vcproj:
	* MSVC_Net2005/examples/regex/regex.vcproj:
	* MSVC_Net2008/examples/keyfile/keyfile.vcproj:
	* MSVC_Net2008/examples/properties/properties.vcproj:
	* MSVC_Net2008/examples/regex/regex.vcproj: Added projects for these
	examples.

	* MSVC_Net2005/glibmm.sln:
	* MSVC_Net2008/glibmm.sln:
	* MSVC_Net2005/filelist.am:
	* MSVC_Net2008/filelist.am: Added the new projects.

2009-09-21  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* NEWS:
	* configure.ac: update for 2.22.1 release

2009-09-21  Daniel Elstner  <danielk@openismus.com>

	Fix KeyFile build with exceptions disabled

	* glib/src/keyfile.hg (Glib::KeyFile): Correct repeated syntax
	error in the code that is built when GLIBMM_EXCEPTIONS_ENABLED
	is not defined.  Also remove the bogus default argument values
	appearing in the middle of the argument list.

2009-09-21  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* NEWS:
	* configure.ac: update for 2.22.0 release

2009-09-19  Daniel Elstner  <daniel.kitta@gmail.com>

	Support Automake silent rules

	* configure.ac: Call the AM_SILENT_RULES macro if it is defined.
	(AM_INIT_AUTOMAKE): Add check-news option.
	* glib/src/Makefile.am: Prefix the M4 command line with $(AM_V_GEN)
	in order to support the silent rules feature of Automake.

2009-09-17  Daniel Elstner  <danielk@openismus.com>

	Do not complain about missing docs_override.xml

	* tools/pm/DocsParser.pm (read_defs): Print error messages to
	standard error.  Do not complain if the docs_override.xml file
	is missing, since it is no longer necessary.

2009-09-13  Daniel Elstner  <daniel.kitta@gmail.com>

	Enable verbose output of autoreconf

	* autogen.sh: Pass --verbose option to autoreconf.

2009-09-11  Daniel Elstner  <danielk@openismus.com>

	Correctly quote the extracted comment for M4

	* tools/pm/WrapParser.pm (extract_preceding_documentation): Add M4
	quotes around the extracted comment, since it may contain sequences
	of end-quote + macro + start-quote.

2009-09-11  Daniel Elstner  <danielk@openismus.com>

	Slightly clean up gross Perl code in gmmproc.in

	* tools/gmmproc.in: Try not to abuse Perl too much, and get rid of
	the 'no warnings' hammer.

2009-09-10  Daniel Elstner  <danielk@openismus.com>

	Allow the C documentation to be overridden

	* tools/pm/WrapParser.pm (extract_preceding_documentation): Factor
	the code from on_wrap_enum() to extract a preceding comment block
	into a separate subroutine.
	(on_wrap_method): Invoke extract_preceding_documentation() to
	extract a preceding Doxygen comment, and if one was found allow
	it to override the inherited C documentation.

2009-09-10  Daniel Elstner  <danielk@openismus.com>

	Fix broken test for empty _WRAP_METHOD argument

	* tools/pm/DocsParser.pm: Escape variable values substituted into
	regular expressions.
	* tools/pm/Output.pm (output_wrap_property): Transliterate using
	tr/// instead of s///g.
	* tools/pm/WrapParser.pm: Correct a number of worst offenders among
	all the bad Perl code.
	(on_wrap_{ctor,method,corba_method}): Instead of testing whether
	the prototype argument does not consist solely of non-whitespace
	characters, actually do what the accompanying comment claimed and
	test whether the argument is empty or consists only of whitespace.
	The only reason this age-old bug was never triggered is that there
	is always at least one whitespace character in a prototype, namely
	between the return type and the function name.  The only exception
	would be the default constructor, which however just so happens to
	have its own special _CTOR_DEFAULT macro.
	In a nutshell, the bug itself was broken and failed to properly
	break things.

2009-09-10  Daniel Elstner  <danielk@openismus.com>

	Re-enable input file line markers in gmmproc

	* tools/pm/WrapParser.pm: Replace hairy uses of scalar(@array)
	to get the number of array elements by $#array, which returns
	the index of the last element.
	(read_file): Re-enable the commented
	code which used to insert input file and line information into
	the token list.
	(parse_and_build_output): Use a simple regular expression to
	match the start of a string instead of messing with substr().

2009-09-08  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* examples/Makefile.am:
	* gio/giomm.h:
	* gio/src/filelist.am: disable more network io stuff that was
	causing distcheck to fail

2009-09-08  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* NEWS: update for release
	* configure.ac: increment version to 2.21.5

2009-09-08  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* gio/src/filelist.am: disable network IO stuff for now since it's
	too close to the stable release and we don't want to have unfinished
	API that isn't well-tested.

2009-09-08  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* gio/src/inetaddress.hg:
	* gio/src/networkaddress.hg:
	* gio/src/networkservice.hg:
	* gio/src/resolver.hg:
	* gio/src/socket.hg:
	* gio/src/socketaddress.hg:
	* gio/src/socketaddressenumerator.hg:
	* gio/src/socketconnectable.hg:
	* gio/src/srvtarget.hg: add all network io classes to a new doxygen
	NetworkIO module

2009-09-08  Daniel Elstner  <danielk@openismus.com>

	Implement Gio::Socket ctors using Gio::Initable

	* gio/src/gio_vfuncs.defs: Add GInitableClass::init() vfunc.
	* gio/src/initable.{ccg,hg} (Initable::init): Use _WRAP_METHOD().
	(Initable::init_vfunc): Wrap GInitableClass::init() vfunc.
	* gio/src/socket.{ccg,hg} (Socket::Socket): Wrap constructors
	manually.  Call Initable::init() from the constructor body.
	(Socket::create), (Socket::create_from_fd): Forward to constructors.
	* tools/m4/convert_gio.m4: Add conversion from GCancellable* to
	const Glib::RefPtr<Cancellable>&.

2009-09-07  Daniel Elstner  <danielk@openismus.com>

	Officially deprecate GLIBMM_CHECK_PERL macro

	* build/glibmm_check_perl.m4 (GLIBMM_CV_PERL_VERSION): Define with
	m4_define() so that the macro is only visible internally.
	(GLIBMM_CHECK_PERL): Define as deprecated macro using AU_DEFUN().

2009-09-03  Daniel Elstner  <danielk@openismus.com>

	Sanitize the Glib::Cond usage example

	* glib/src/thread.hg (Glib::Cond): Sanitize the usage example.

2009-09-02  Daniel Elstner  <danielk@openismus.com>

	Remove sigc from the Doxygen excluded symbols

	* docs/reference/Doxyfile.in (EXCLUDE_SYMBOLS): Stop excluding
	the sigc namespace from the documentation since it apparently
	also removes the links to external documentation.  Also, with
	the latest changes in libsigc++ it seems no longer necessary to
	suppress the symbol.

2009-09-01  Daniel Elstner  <daniel.kitta@gmail.com>

	Increment version to glibmm 2.21.4.2

	* configure.ac (AC_INIT): Increment version to 2.21.4.2.
	* NEWS: Write news entry for glibmm 2.21.4.2 release.

2009-09-01  Daniel Elstner  <daniel.kitta@gmail.com>

	Update Doxygen configuration for Doxygen 1.6.1

	* docs/reference/Doxyfile.in: Update configuration template using
	Doxygen 1.6.1.
	(SORT_MEMBERS_CTORS_1ST): Enable.

2009-09-01  Daniel Elstner  <daniel.kitta@gmail.com>

	Always build tools/ subdirectory (bgo #593518)

	* Makefile.am (SUBDIRS): Unconditionally recurse into the tools/
	subdirectory, rather than only in maintainer-mode.  Otherwise, the
	code generator support files located there would not be installed
	when building a tarball of glibmm.

2009-08-28  Daniel Elstner  <danielk@openismus.com>

	Increment version to glibmm 2.21.4.1

	* configure.ac (AC_INIT): Increment version to 2.21.4.1.
	* NEWS: Write news entry for glibmm 2.21.4.1 release.

2009-08-28  Daniel Elstner  <danielk@openismus.com>

	Use shared mm-common Doxygen style sheet

	* configure.ac (MM_PREREQ): Require mm-common 0.7.
	* docs/Makefile.am (dist_doctool_DATA): List doxygen.css.
	* docs/reference/Doxyfile.in (HTML_STYLESHEET): Assign path
	to the shared doxygen.css provided by mm-common.

2009-08-28  Daniel Elstner  <danielk@openismus.com>

	Remove header and footer HTML fragments

	* docs/reference/glibmm_{header,footer}.html_fragment: Delete
	files.  These custom fragments were an unnecessary maintenance
	hassle.  Also, the files were out of date with respect to the
	encoding and CSS classes used by Doxygen.
	* docs/reference/Doxyfile.in (HTML_HEADER), (HTML_FOOTER): Set
	to the empty string.
	(PROJECT_NUMBER): Substitute @PACKAGE_VERSION@.  It does look
	nicer in the generated HTML pages, and is probably also less
	confusing.
	(SORT_GROUP_NAMES): Enable for predictability.
	* docs/Makefile.am (dist_noinst_DATA): Remove deleted HTML
	fragment files.

2009-08-26  Daniel Elstner  <danielk@openismus.com>

	Reenable hierarchy graphs for each class

	* docs/reference/Doxyfile.in (COLLABORATION_GRAPH): Set option
	to YES to enable the per-class inheritance graphs.

2.21.4:

2009-08-25  Jonathon Jongsma  <jonathon@quotidian.org>

	* NEWS:
	* configure.ac: update for 2.21.4

2009-08-25  Daniel Elstner  <danielk@openismus.com>

	Change documentation host to library.gnome.org

	* docs/Makefile.am (htmlrefpub): Remove override and use the
	updated mm-common default value.
	* docs/reference/glibmm_header.html_fragment: Adjust links to
	the main page and the gtkmm book.
	* {glib,gio}/{glib,gio}mm{,-uninstalled}.pc.in (htmlrefpub):
	Adjust variable values.
	* configure.ac (MM_PREREQ): Require mm-common 0.6.1.

2009-08-24  Daniel Elstner  <danielk@openismus.com>

	Strip directory from filenames in enum.pl output

	* tools/enum.pl: Use File::Spec module.  Reduce the backslashitis
	in a number of regular expressions by replacing the slash used as
	the delimiter with a less troublesome character.
	(parse): Only print the basename component of the filename.
	(process): Put \Q...\E quoting escapes around a variable reference
	within a regular expression to protect meta-characters.

2009-08-21  Daniel Elstner  <danielk@openismus.com>

	Deprecate wrapper methods of deprecated functions

	* gio/src/file.{ccg,hg} (File::{eject,unmount}_mountable*),
	gio/src/volumemonitor.hg (VolumeMonitor::adopt_orphan_mount):
	Enclose within deprecation guards since the corresponding C API
	functions have been deprecated in API version 2.22 of GIO.
	Insert #undef G_DISABLE_DEPRECATED at the top of the source files
	so that giomm builds again at warning level fatal.

2009-08-21  Daniel Elstner  <danielk@openismus.com>

	Move #undef G_DISABLE_DEPRECATED out of header

	* glib/src/date.hg: Push the #undef G_DISABLE_DEPRECATED into the
	new SECTION_CC_PRE_INCLUDES rather than the public header file.

2009-08-21  Daniel Elstner  <danielk@openismus.com>

	Add SECTION_CC_PRE_INCLUDES section to gmmproc

	* tools/m4/base.m4: Define new SECTION_CC_PRE_INCLUDES and import
	it at the top of the generated source file.  This new section can
	be used to insert custom code at the beginning of the translation
	unit as seen by the compiler.

2009-08-21  Daniel Elstner  <danielk@openismus.com>

	Use mm-common macro for --disable-deprecated-api

	* configure.ac: Replace GLIBMM_ARG_ENABLE_API_DEPRECATED() with
	the new MM_ARG_DISABLE_DEPRECATED_API() macro from mm-common.
	(MM_PREREQ): Raise requirement to mm-common 0.6.
	* build/reduced.m4 (GLIBMM_ARG_ENABLE_API_DEPRECATED): Remove
	obsolete macro definition.
	* glib/glibmmconfig.h.in (GLIBMM_DISABLE_DEPRECATED): Copy #undef
	statement from config.h.in template.
	* gio/giommconfig.h.in (GIOMM_DISABLE_DEPRECATED): ditto.

2009-08-21  Daniel Elstner  <danielk@openismus.com>

	Insist on working Perl in maintainer mode

	* configure.ac: Call MM_CHECK_PERL in maintainer mode in order
	to verify early that the Perl interpreter is working.

2009-08-20  Daniel Elstner  <danielk@openismus.com>

	Rename @since back to @newin

	* docs/reference/Doxyfile.in (ALIASES): Rename the @since alias
	back to its old name @newin, but otherwise keep the parameters.
	Apparently there is a @since command predefined in Doxygen which
	I hadn't noticed.  It does seem to get overridden silently, but
	it is better not to rely on this.
	* tools/pm/DocsParser.pm (convert_tags_to_doxygen): Output @newin
	instead of @since.
	* {glib,gio}/src/*.hg, {glib,gio}/{glib,gio}mm/*.h: Replace all
	uses of @since with @newin.

2009-08-20  Daniel Elstner  <danielk@openismus.com>

	Predefine GIOMM_API for Doxygen

	* docs/reference/Doxyfile.in (PREDEFINED): Define GIOMM_API to the
	empty expansion, so that it won't show up in the documentation.

2009-08-20  Daniel Elstner  <danielk@openismus.com>

	Substitute API version in filenames dynamically

	* glib/glibmm.pc.in: Rename file from glib/glibmm-2.4.pc.in.
	* glib/glibmm-uninstalled.pc.in: Rename file from
	glib/glibmm-2.4-uninstalled.pc.in.
	* gio/giomm.pc.in: Rename file from gio/giomm-2.4.pc.in.
	* gio/giomm-uninstalled.pc.in: Rename file from
	gio/giomm-2.4-uninstalled.pc.in.
	* configure.ac (AC_CONFIG_FILES): Insert ${GLIBMM_MODULE_NAME}
	and ${GIOMM_MODULE_NAME} into output filenames and remove the
	hard-coded version from the input filenames.
	* glib/glibmm/Makefile.am (lib_LTLIBRARIES): Substitute
	@GLIBMM_API_VERSION@ into the libtool archive name as well as
	the variable names derived from it instead of hard-coding the
	API version.

2009-08-20  Daniel Elstner  <danielk@openismus.com>

	Do not hard-code API version in resource files

	* MSVC_Net200[58]/glibmm/glibmm.rc.in: Use newer @PACKAGE_VERSION@
	substitution in place of @VERSION@.  Substitute @GLIBMM_MODULE_NAME@
	instead of hardcoding the API version.
	* MSVC_Net200[58]/giomm/giomm.rc.in: Use newer @PACKAGE_VERSION@
	substitution in place of @VERSION@.  Substitute @GIOMM_MODULE_NAME@
	instead of hardcoding the API version.  Replace @GLIBMM_*_VERSION@
	substitutions with their @GIOMM_*_VERSION@ equivalents.

2009-08-19  Daniel Elstner  <danielk@openismus.com>

	Predefine GLIBMM_API for Doxygen

	* docs/reference/Doxyfile.in (PREDEFINED): Define GLIBMM_API to the
	empty expansion, so that it won't show up in the documentation.

2009-08-18  Daniel Elstner  <danielk@openismus.com>

	Prepend tools/pm/ to Perl include path

	* g{lib,io}/src/Makefile.am (gmmproc): Pass -I$(top_srcdir)/tools/pm
	to the Perl interpreter when invoking the local gmmproc, so that it
	will pick up the modules from the source tree instead of an existing
	glibmm installation.
	* tools/gmmproc.in (BEGIN): Substitute @GLIBMM_MODULE_NAME@ instead
	of hard-coding the location.

2009-08-18  Daniel Elstner  <danielk@openismus.com>

	Implement parametric Doxygen alias @since{m,n}

	* docs/reference/Doxyfile.in (ALIASES): Define a parametrized alias
	@since{major,minor} to replace the old @newin?p?* aliases which had
	to be defined manually for every version number used.
	(PREDEFINED): Predefine G_GNUC_NORETURN, G_GNUC_NULL_TERMINATED and
	G_GNUC_PURE to the empty expansion.  Remove GTKMM_* macros.
	* tools/pm/DocsParser.pm (convert_tags_to_doxygen): Change "Since:"
	substitution to output the new generic @since alias.
	* {glib,gio}/src/*.hg, {glib,gio}/{glib,gio}mm/*.h: Change all uses
	of @newin?p?* to @since{major,minor}.

2009-08-17  Daniel Elstner  <danielk@openismus.com>

	Append slash to overridden $(htmlrefpub)

	* docs/Makefile.am (htmlrefpub): Append trailing slash for
	consistency with the non-overridden value.

2009-08-17  Daniel Elstner  <danielk@openismus.com>

	Exclude GTimeVal and nil from the documentation

	* docs/reference/Doxyfile.in (EXCLUDE_SYMBOLS): Add GTimeVal and
	nil to the list of symbols to exclude from the documentation.

2009-08-17  Daniel Elstner  <daniel.kitta@gmail.com>

	Reenable JAVADOC_AUTOBRIEF mode of Doxygen

	* docs/reference/Doxyfile.in (JAVADOC_AUTOBRIEF): Change value
	back to 'YES'.  I accidentally turned off the setting during the
	build infrastructure transition.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Unbreak List_Iterator::operator->()

	* glib/glibmm/containers.h ({S,}List_Iterator::operator->):
	Use &**this, not &*this.  Oops.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Define GLIBMM_USING_STD() as dummy no-op

	* glib/glibmmconfig.h.in (GLIBMM_USING_STD): Resurrect macro
	for backwards compatibility, but unconditionally define it to
	the empty expansion.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Define GLIBMM_BUILD and GIOMM_BUILD

	* glib/glibmm/Makefile.am (local_cppflags): Add -DGLIBMM_BUILD=1.
	* gio/giomm/Makefile.am (local_cppflags): Add -DGIOMM_BUILD=1.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Slightly clean up List_Iterator helper classes

	* glib/glibmm/containers.h ({S,}List_Iterator): Smooth out
	a number of eye sores I had stumbled upon in the code.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Correct nesting mistakes in Autoconf macros

	* build/cxx.m4: Fix the incorrect nesting of parentheses with
	about every other AC_COMPILE_IFELSE/AC_LANG_PROGRAM construct.
	My fault, ooops.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Clean up g{lib,io}mmconfig.h.in templates

	* glib/glibmmconfig.h.in: Rewrite, copying large chunks from
	the autoheader-generated config.h.in template.
	* gio/giommconfig.h.in: Remove everything that belongs to glibmm
	and include glibmmconfig.h.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Set GTHREAD_LIBS to the full --libs value again

	* configure.ac (GTHREAD_LIBS): Go back to pkg-config --libs
	to retrieve the linker flags to use with threaded programs.
	For some reason --libs-only-other does not include -pthread.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Get rid of all uses of GLIBMM_USING_STD()

	* glib/src/*.{ccg,hg}: Remove all uses of GLIBMM_USING_STD().
	We definitely do not need this anymore, and probably never
	did.  We never covered all symbols from namespace std anyway
	and never got any complaint about it.  Also, be careful to
	always include the glibmmconfig.h header when it is needed.
	* glib/glibmm/*.{cc,h}: ditto.
	* glib/glibmmconfig.h.in: Clean up and re-indent.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Clean up C++ compiler test Autoconf macros

	* build/cxx.m4: Clean up M4 code and switch to non-deprecated
	Autoconf macros.
	(AC_CXX_NAMESPACES), (AC_CXX_BOOL), (AC_CXX_MUTABLE): Remove
	obsolete feature check macros.
	* configure.ac: Remove AC_CXX_NAMESPACES(), AC_CXX_BOOL(),
	AC_CXX_MUTABLE() and GLIBMM_CXX_HAS_NAMESPACE_STD checks.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Remove now optional macro arguments

	* configure.ac: Insert MM_PREREQ([0.4]) macro call.
	(MM_INIT_MODULE): Remove the now optional second macro argument.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Move M4 files from scripts/ over to build/

	* scripts/*.m4: Move files over to the build/ directory, in order
	to be more consistent with the directory layout of other binding
	modules that switched to the new build organization.
	* Makefile.am (ACLOCAL_AMFLAGS): Search build/ for M4 files.
	(dist_aclocal_macro_DATA): Adjust directory prefix to build/.
	* configure.ac (AC_CONFIG_MACRO_DIR): Place third-party Autoconf
	macros into the build/ directory.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Use hammer method to avoid admitting to be wrong

	* glib/README, gio/README: Oops, looks like I was wrong in my
	assumption that these files would be distributed automatically by
	Automake.  In order to save face, I thought I might just delete
	them then, as their content is not very useful anyway.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Stop distributing README files manually

	* Makefile.am (text_files): Remove glib/README and gio/README as
	files named README are distributed automatically by Automake.
	(msvc_files): Use the more readable and safer $(addprefix ...)
	function of GNU make instead of a $(foo:%=prefix/%) substitution.
	(DISTCLEANFILES): Use $(filter %mmconfig.h,$(msvc_files)) instead
	of listing the generated configuration header files manually.

2009-08-16  Daniel Elstner  <daniel.kitta@gmail.com>

	Provide g{lib,io}mm-2.4-uninstalled.pc files

	* glib/glibmm-2.4-uninstalled.pc.in: New file to provide a pkg-config
	configuration for building against an uninstalled glibmm library.
	* gio/giomm-2.4-uninstalled.pc.in: ditto for giomm.
	* glib/glibmm-2.4.pc.in (htmlrefpub): Append slash to URL.
	* gio/giomm-2.4.pc.in (htmlrefpub): ditto.
	* configure.ac (AC_CONFIG_FILES): List glib/glibmm-2.4-uninstalled.pc
	and gio/giomm-2.4-uninstalled.pc output files.

2009-08-11  Daniel Elstner  <danielk@openismus.com>

	Add missing datadir substitution to .pc file

	* glib/glibmm-2.4.pc.in (datadir): Substitute value, as it is
	used as a component of doctooldir later in the file.
	* gio/giomm-2.4.pc.in (datadir): Substitute value, just in case.
	* docs/Makefile.am: Remove overrides of the documentation
	utilities, since MM_CONFIG_DOCTOOL_DIR() already takes care
	of setting MMDOCTOOLDIR to the local directory.

2009-08-10  Daniel Elstner  <danielk@openismus.com>

	Get rid of some old Autoconf macro cruft

	* scripts/dk-warn.m4: Delete file, since the functionality is now
	provided by MM_ARG_ENABLE_WARNINGS() from the mm-common module.
	* scripts/docgen.m4: Delete obsolete file.
	* scripts/cxx_std.m4: Remove stray text snippet from the top of the
	file.  Probably a cut'n'paste accident.
	* scripts/cxx.m4 (GLIBMM_MEMBER_FUNCTIONS_MEMBER_TEMPLATES): Do not
	AC_DEFINE to 0 in the else branch, as that will do the wrong thing
	when #ifdef is used instead of #if.
	* scripts/README: Delete file consisting solely of whitespace.
	* configure.ac: Add note on pointless test for namespace std.

2009-08-10  Daniel Elstner  <danielk@openismus.com>

	Clean up configure check for Windows host

	* configure.ac (OS_WIN32): Rename conditional to HOST_WINDOWS_NATIVE
	because the OS vs platform terminology confused the hell out of me.
	Remove the check for a non-native Windows host such as Cygwin, since
	the corresponding conditional is not used anymore.

2009-08-10  Daniel Elstner  <danielk@openismus.com>

	Have mm-common-prepare install the doc utils

	* configure.ac: Call MM_CONFIG_DOCTOOL_DIR([docs]) to set
	up the destination directory for mm-common-prepare to copy
	the documentation utilities to.
	* docs/doc-install.pl: Delete file.
	* docs/doc-postprocess.pl: ditto,
	* docs/tagfile-to-devhelp2.xsl: ditto.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Distribute README.SUN and autogen.sh

	* Makefile.am (text_files): Add README.SUN.
	(dist_noinst_SCRIPTS): List autogen.sh.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Use versioned directory for documentation tools

	* docs/Makefile.am (doctooldir): Use the versioned module
	name instead of the package name as $(datadir) subdirectory.
	* glib/glibmm-2.4.pc.in (doctooldir): Change the variable
	value accordingly.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Provide documentation location via pkg-config

	* glib/glibmm-2.4.pc.in: Clean up and modernize the values,
	and make use of more configure variable substitutions.
	(datarootdir): Substitute @datarootdir@.
	(gmmprocdir): Remove the @GMMPROC_DIR@ substitution and expand
	${libdir} indirectly.
	(doctooldir): New variable pointing to the location of the
	installed utilities for building the reference documentation.
	(docdir), (doxytagfile), (htmlrefdir), (htmlrefpub): Provide
	meta information on the installed reference documentation in
	these new pkg-config variables.
	* gio/giomm-2.4.pc.in: Clean up and modernize the values,
	and make use of more configure variable substitutions.
	(datarootdir): Substitute @datarootdir@.
	(docdir), (doxytagfile), (htmlrefdir), (htmlrefpub): Provide
	meta information on the installed reference documentation in
	these new pkg-config variables.  The values are identical to
	the glibmm-2.4 ones because the documentation is bundled.
	* docs/Makefile.am (hmtlrefpub): Override the public web URL
	of the reference documentation, since the currently uploaded
	documentation still has the redundant docs/ component in the
	base path.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Get make distcheck to pass cleanly

	* Makefile.am (DISTCLEANFILES): List the configuration header
	copies made by the AC_CONFIG_COMMANDS() as files to delete.
	* configure.ac (AM_INIT_AUTOMAKE): Switch to POSIX archive
	format (pax) for tar, because just as with libsigc++ the
	filenames generated by Doxygen exceed the tar-ustar limit.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Work around Automake cleverness failure

	* gio/giomm/filelist.am (giomm_files_built_ph): Use the GNU
	make $(patsubst ...) function instead of $(var:%=foo%bar) if
	a simple $(var:.a=.b) is not sufficient.  Apparently Automake
	is able to expand some of these constructs statically, but in
	some cases it will actually produce the wrong result.  Using
	$(patsubst ...) helps to avoid the problem because Automake
	does not attempt to expand it.
	* glib/glibmm/filelist.am (glibmm_files_built_ph): Use the
	$(patsubst ...) function here, too.
	* gio/src/filelist.am (giomm_files_used_hg): Define another
	intermediate variable to avoid repetition.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Get rid of all Makefile.am in the MSVC dirs

	* MSVC_Net2005/**/Makefile.am: Delete recursive build files.
	* MSVC_Net2008/**/Makefile.am: ditto.
	* MSVC_Net2005/filelist.am: New file.  Recursively list all
	files that should go into the distribution.
	* MSVC_Net2008/filelist.am: ditto.
	* configure.ac (AC_CONFIG_FILES): Remove all Makefile outputs
	to the MSVC subdirectories.  Combine all the remaining output
	files into a single argument to just one AC_CONFIG_FILES call.
	Follow through with a number of TODO comments and remove some
	old cruft which is no longer used anywhere in the module.
	(AC_CONFIG_COMMANDS): Copy the configuration header files into
	the MSVC subdirectories by making config.status execute custom
	configuration commands.  This is easier than doing it at the
	Makefile level, where it was previously implemented.
	* Makefile.am: Include the filelist.am files from the MSVC
	subdirectories.
	(SUBDIRS): Remove MSVC_Net200[58] directories from the list.
	(dist_noinst_DATA): Distribute the MSVC project files.
	* tools/gmmproc.in: Substitute @PERL@ instead of @PERL_PATH@.
	* tools/generate_wrap_init.pl.in: ditto.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Bring back the giomm reference documentation

	* glib/{src,glibmm}/filelist.am: Add namespace prefix glibmm_
	to variable names, so that the file lists of glibmm and giomm
	can be included together without conflicts.
	* gio/{src,giomm}/filelist.am: Add namespace prefix giomm_ to
	variable names.
	* glib/{src,glibmm}/Makefile.am: Copy the namespace-prefixed
	make variables to non-prefixed variables, so that the Automake
	include files from mm-common will pick up the values.
	* gio/{src,giomm}/Makefile.am: ditto.
	* docs/Makefile.am: Include file lists of giomm.
	(doc_input): List the header files of both glibmm and giomm.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Begin move to new documentation infrastructure

	* configure.ac (AC_CONFIG_FILES): Remove the old build files
	docs/{images,internal,reference}/Makefile from the list.  Also
	remove the obsolete docs/reference/beautify_docs.pl.
	* docs/Makefile.am: Big overhaul.  Reimplement on top of the
	new documentation infrastructure provided with the mm-common
	module.  Build, distribute and install files which used to be
	handled by the subdirectories' Makefiles directly from here.
	Note that the generated reference documentation at the moment
	only covers glibmm without giomm.  Remedy follows.
	* docs/reference/Doxyfile.in: Replace configuration with the
	modernized version from librsvgmm, appropriately modified for
	glibmm.  Make use of the new substitutions provided by the
	mm-common Autoconf magic.
	* docs/doc-install.pl: Copy script from mm-common.  Install
	it into $(pkgdatadir)/doctool.
	* docs/doc-postprocess.pl: ditto,
	* docs/tagfile-to-devhelp2.xsl: ditto.
	* docs/images/Makefile.am: Delete subdirectory Makefile.
	* docs/internal/Makefile.am: ditto,
	* docs/reference/Makefile.am: ditto.
	* docs/reference/README: Delete file, as it documents exactly
	the things I just ripped.
	* docs/reference/beautify_docs.pl.in: Delete obsolete file.
	* docs/reference/doxygen_to_devhelp.xsl: ditto,
	* docs/reference/libstdc++.tag.xml: ditto.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Convert examples/ sub-tree to non-recursive build

	* examples/Makefile.am: Rewrite to a non-recursive build of
	all example programs with a single control file.  Hook the
	build of the example programs to the make check target.
	* examples/Makefile.am_fragment: Delete obsolete file.
	* examples/*/Makefile.am: Delete obsolete files.
	* examples/README: Delete file, as it was empty anyway apart
	from a single whitespace character.
	* configure.ac (AC_CONFIG_FILES): Remove examples/*/Makefile
	output files from the list.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Convert tests/ sub-tree to non-recursive build

	* tests/Makefile.am: Rewrite to a non-recursive build of all
	test programs with a single control file.  Hook the the build
	of the test programs to the make check target.
	* tests/Makefile.am_fragment: Delete obsolete file.
	* tests/*/Makefile.am: Delete obsolete files.
	* configure.ac (AC_CONFIG_FILES): Remove tests/*/Makefile
	output files from the list.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Delete now unused build_shared/ subdirectory

	* build_shared/*.am_fragment: Delete files, as they are no
	longer used anywhere.
	* tools/Makefile_list_of_sources.am_fragment: Delete file,
	* tools/m4/Makefile_list_of_sources.am_fragment: ditto,
	* tools/pm/Makefile_list_of_sources.am_fragment: ditto.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Convert gio/ sub-tree to new build system

	* gio/src/filelist.am: New file for defining the lists of
	gmmproc input files.
	* gio/src/Makefile.am: Clean up and modernize.  Integrate
	with the new generate-binding.am build file from mm-common.
	* gio/giomm/filelist.am: New file for the lists of source
	code files, both generated and static.  Also list files from
	the private/ subdirectory here.
	* gio/giomm/Makefile.am: Clean up and modernize.  Integrate
	with the new compile-binding.am build file from mm-common.
	* configure.ac (AC_CONFIG_FILES): Remove the output file
	gio/giomm/private/Makefile from the list.
	* gio/giomm/private/Makefile.am: Delete file.
	* gio/src/Makefile_list_of_hg.am_fragment: Delete file.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Convert glib/ sub-tree to new build system

	* glib/src/filelist.am: New file for defining the lists of
	gmmproc input files and M4 template files.
	* glib/src/Makefile.am: Clean up and modernize.  Integrate
	with the new generate-binding.am build file from mm-common.
	* glib/glibmm/filelist.am: New file for the lists of source
	code files, both generated and static.  Also list files from
	the private/ subdirectory here.
	* glib/glibmm/Makefile.am: Clean up and modernize.  Integrate
	with the new compile-binding.am build file from mm-common.
	* configure.ac (AC_CONFIG_FILES): Remove the output file
	glib/glibmm/private/Makefile from the list.
	* glib/glibmm/private/Makefile.am: Delete file.
	* glib/src/Makefile_list_of_hg.am_fragment: Delete file.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Do not recurse into scripts/ subdirectory

	* Makefile.am: Install scripts/glibmm_check_perl.m4 from here.
	* scripts/Makefile.am: Delete file.
	* configure.ac (AC_CONFIG_FILES): Remove scripts/Makefile.

2009-08-09  Daniel Elstner  <danielk@openismus.com>

	Convert tools/ directory to new build system

	* configure.ac (AC_CONFIG_FILES): Remove the output files
	tools/{extra_defs_gen,m4,pm}/Makefile from the list.
	* tools/Makefile.am: Clean up.  Build, distribute and install the
	contents of all three subdirectories.  Rename generate_extra_defs
	executable to generate_defs_glib.
	* tools/m4/filelist.am: New file to hold the list of M4 files.
	* tools/pm/filelist.am: New file to hold the list of Perl modules.
	* tools/{extra_defs_gen,m4,pm}/Makefile.am: Delete files.

2009-08-08  Daniel Elstner  <danielk@openismus.com>

	Remove glib/Makefile.am and gio/Makefile.am

	* Makefile.am: Move things from glib/Makefile.am and gio/Makefile.am
	to the toplevel.  Remove the improvised custom convenience rules for
	now.
	(SUBDIRS): Enter the glib/src, gio/src, glib/glibmm and gio/giomm
	subdirectories directly from the toplevel.  Use indirect variables
	to define the conditionally entered subdirectories.
	* configure.ac: Call macros from mm-common for preparing the build of
	the reference documentation.  Remove {glib,gio}/Makefile.am from the
	AC_CONFIG_FILES list.  Avoid repeating the version requirement for all
	the basic g* libraries when constructing the list of dependencies for
	pkg-config.
	* {glib,gio}/Makefile.am: Remove files.

2009-08-07  Daniel Elstner  <danielk@openismus.com>

	Begin transition to new build infrastructure

	* autogen.sh: Replace script with a minimalistic wrapper around
	mm-common-prepare, autoreconf and configure.
	* Makefile.am (ACLOCAL_AMFLAGS): Pick up ${ACLOCAL_FLAGS} from the
	environment, so that autoreconf can do its magic.
	* configure.ac: Modernize.  Cut loads of old cruft.  Make use of
	magic mm-common macros to simplify things.  Declare build/ as the
	destination for auxiliary build files.  Add TODO comments to flag
	the pieces that still need cutting.  Re-enable autoheader.
	* config.h.in: Remove file, and have autoheader generate it.

2009-07-27  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/memoryinputstream.ccg: Correct the if condition in
	Gio::MemoryInputStream::add_data() to coincide correctly with copying
	data that is null terminated (as docs say).

2.21.3:

2009-07-27  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* NEWS:
	* configure.ac: update for release

2009-07-26  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* glib/glibmm/objectbase.cc:
	* glib/glibmm/objectbase.h: add freeze_notify()/thaw_notify.  Fixes
	  Bug #575533

2009-07-26  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/memoryinputstream.ccg: fix a build error with explicit
	  casts.  I had made this change before, but apparently i forgot to
	  commit it.

2009-07-26  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/memoryinputstream.ccg:
	* gio/src/memoryinputstream.hg: fix MemoryInputStream::add_data() so
	  that it copies the memory internally.  This function was basically
	  unusable before except with statically allocated memory.
	  Otherwise the memory would have been leaked (if the caller did not
	  free it) or the memory could have been corrupted (if the caller
	  freed it before the MemoryInputStream was finished using it).  The
	  std::string version was susceptible to memory corruption as well,
	  so we take a copy of that string as well.  To avoid needing to
	  always copy the memory, I also introduced an overload which
	  accepts a GDestroyNotify function that will free the memory when
	  the object is finished with it. Fixes Bug #589683.

2009-07-26  Krzesimir Nowak  <krnowak@svn.gnome.org>

	* glib/glibmm/timeval.cc:
	* glib/glibmm/timeval.h: Wrapped g_time_val_from_iso8601()
	and g_time_val_to_iso8601().
	* glib/src/date.ccg:
	* glib/src/date.hg: Wrapped
	g_date_get_iso8601_week_of_year().

2009-07-17  David King  <davidk@openismus.com>

	* examples/properties/properties_example.cc: Only compile the
	properties example if properties are enabled.

2009-07-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* .gitignore:
	* configure.ac:
	* examples/Makefile.am:
	* examples/network_io/Makefile.am:
	* examples/network_io/resolve.cc: Added a simple example showing how
	  to resolve an internet address from a hostname

2009-07-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* gio/src/resolver.ccg:
	* gio/src/resolver.hg: add async versions of Resolver methods

2009-07-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* gio/src/resolver.ccg:
	* gio/src/resolver.hg: add overloads for resolver methods without a
	  cancellable object

2009-07-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* gio/src/drive.hg:
	* tools/m4/convert_gio.m4: add get_start_stop_type() and
	  Gio::DriveStartStopType enum

2009-07-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* gio/src/drive.hg: add _IGNORE() for a eject_with_operation() which
	  is hand-written

2009-07-14  Jonathon Jongsma  <jonathon@quotidian.org>

	* Fix Bug #587173 – Fails to install when bootstrapped with Automake 1.11
	* glib/glibmm/Makefile.am: remove .hg-generated headers from this
	  Makefile to fix built with automake-1.11
	* glib/src/Makefile_list_of_hg.am_fragment: re-format this list of
	  .hg files so it's easier to both read and maintain

2009-07-14  José Alburquerque  <jaalburqu@svn.gnome.org>

	* glib/src/glib_docs_override.xml:
	* glib/src/keyfile.ccg:
	* glib/src/keyfile.hg: Repair Glib::KeyFile docs with regard to
	exceptions.  Make sure that the methods that throw exceptions are
	implemented correctly if GLIBMM_EXCEPTIONS_ENABLED is not defined.
	Bug #587766 (Tomasz Jankowski).

2.21.2:

2009-07-13  Jonathon Jongsma  <jonathon@quotidian.org>

	* Makefile.am: fix release targets since we switched to git

2009-07-13  Jonathon Jongsma  <jonathon@quotidian.org>

	* NEWS: updated
	* configure.ac: bumped version for release

2009-07-11  Daniel Elstner  <daniel.kitta@gmail.com>

	* configure.ac (GTKMM_ARG_ENABLE_FULLDOCS): Remove macro
	call.  Its result is not used anywhere at all anymore.

2009-07-11  Daniel Elstner  <daniel.kitta@gmail.com>

	* gio/src/drive.hg (Drive::start_finish): Remove stray
	semicolon to get rid of compiler warning in pedantic mode.
	(Drive::stop_finish): ditto.

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/volumemonitor.hg: implement Gio::VolumeMonitor::drive-stop-button

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/drive.ccg: fix accidental bug in Gio::Drive::eject() that
	  the compiler warned me about

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/volume.ccg:
	* gio/src/volume.hg: implement eject_with_operation()
	  similarly to the GDrive methods mentioned below

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/mount.ccg:
	* gio/src/mount.hg: implement eject_with_operation() and
	  mount_with_operation similarly to the GDrive methods mentioned
	  below

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/inetaddress.hg: implement get_native_size()

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/drive.hg: implement GDrive::stop-button signal

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/drive.ccg:
	* gio/src/drive.hg: Wrap the new eject_with_operation() methods and
	  implement the other eject() functions with
	  g_drive_eject_with_operation since g_drive_eject has been
	  deprecated in favor of eject_with_operation()

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/drive.ccg:
	* gio/src/drive.hg:
	* gio/src/gio_enums.defs:
	* tools/m4/convert_gio.m4: wrap added GDrive methods: start(),
	  stop(), start_finish(), stop_finish(), can_start(), can_start(),
	  can_start_degraded()

2009-07-09  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/gio_methods.defs: re-generated defs
	* gio/src/socket.ccg:
	* gio/src/socket.hg: fix build breakage caused by the addition of a
	  bunch of cancellable parameters to GSocket methods.

2009-07-06  Daniel Elstner  <danielk@openismus.com>

	Treat empty Glib::spawn*() working dir as unset

	* glib/src/spawn.ccg (Glib::spawn_async_with_pipes): If the
	working_directory argument is the empty string, pass a 0 pointer
	to the GLib C API to make it inherit the parent's working directory.
	This is fine as the empty string is not a valid directory name, and
	our documentation already says that it will be interpreted that way.
	(Glib::spawn_async): ditto,
	(Glib::spawn_sync): ditto.

2009-07-03  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tests/glibmm_valuearray/main.cc: Use references to store casts in
	glibmm_valuearray test.

2009-06-30  Jonathon Jongsma  <jonathon@quotidian.org>

	* glib/src/optiongroup.ccg:
	* glib/src/optiongroup.hg: add OptionGroup::add_entry(.., double&)

2009-06-29  Jonathon Jongsma  <jonathon@quotidian.org>

	* tools/m4/convert_gio.m4: add some namespaced conversions so that I
	  can use them for new api I'm wrapping in Gdk::Pixbuf.  Is there no
	  other way to do this?

2.21.1:

2009-06-29  Murray Cumming  <murrayc@murrayc.com>

  Allow dynamic GType registration, using g_type_module_register_type().

	* glib/glibmm/class.[h|cc]: Added a register_derived_type() overload that
	  takes an extra GTypeModule* parameter, and which calls
	  g_type_module_register_type() instead of g_type_register_static().
	* tools/m4/class_gobject.m4:
	* tools/m4/class_gtkobject.m4:
	* tools/m4/class_shared.m4: Added a _DYNAMIC_GTYPE_REGISTRATION macro to
	  be used in the class in the hg file, to add a *_Class::init(GTypeModule)
	method, and a get_type(GTypeModule*) method that calls it.


2009-06-24  Daniel Elstner  <daniel.kitta@gmail.com>

	Omit unused parameter names to avoid warning

	* tools/extra_defs_gen/generate_defs_gio.cc (main): Omit names of
	unused function parameters, to fix the build with fatal warnings
	enabled.
	* examples/properties/properties_example.cc (main): ditto,
	* tests/giomm_ioerror/main.cc (main): ditto.

2009-06-23  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tests/glibmm_valuearray/main.cc: Use a const instead of a #define.

2009-06-23  Hubert Figuiere  <hub@figuiere.net>

	* tools/pm/WrapParser.pm (on_defs): Make sure we trim
	the module names to not have extraneous space. Closes bug #586785.

2009-06-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	* glib/src/valuearray.ccg:
	* glib/src/valuearray.hg: Use guint for pre-allocation constructor.
	* .gitignore: Add value array test executable.

2009-06-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	* configure.ac:
	* glib/glibmm.h:
	* glib/src/Makefile_list_of_hg.am_fragment:
	* glib/src/valuearray.ccg:
	* glib/src/valuearray.hg: Add Glib::ValueArray.

	* tests/Makefile.am:
	* tests/glibmm_valuearray/Makefile.am:
	* tests/glibmm_valuearray/main.cc: Add test for Glib::ValueArray.

	* .gitignore: Include valuearray.{h,cc}.

2009-06-22  José Alburquerque  <jaalburqu@svn.gnome.org>

	* glib/src/date.ccg: Check for an invalid date in copy constructor and
	assignment operator.  Fixes bug #585027.

2009-06-19  Jonathon Jongsma  <jonathon@quotidian.org>

	Add start of Socket class

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/gio_enums.defs:
	* gio/src/gio_signals.defs:
	* gio/src/socket.ccg: Added.
	* gio/src/socket.hg: Added.
	* tools/enum.pl:
	* tools/extra_defs_gen/generate_defs_gio.cc:
	* tools/m4/convert_gio.m4:

2009-06-19  Jonathon Jongsma  <jonathon@quotidian.org>

	Add start of Initable
	This class may require a bit of additional thought since it implies
	that we will need to call a special g_initable_new() constructor
	that can fail with a GError rather than calling g_object_new()
	directly.  Alternately, all classes that derive from Initable may
	need to manually call init() in their constructors

	* .gitignore:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/initable.ccg: Added
	* gio/src/initable.hg: Added.

2009-06-19  Jonathon Jongsma  <jonathon@quotidian.org>

	Add NetworkService class

	* .gitignore:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/gio_signals.defs:
	* gio/src/networkservice.ccg: Copied from gio/src/socketaddress.ccg.
	* gio/src/networkservice.hg: Added.
	* tools/extra_defs_gen/generate_defs_gio.cc:

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/giomm.h: update the main include header to include all of the
	  new / recent headers

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	Add NetworkAddress

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/gio_signals.defs:
	* gio/src/networkaddress.ccg: Copied from gio/src/socketaddress.ccg.
	* gio/src/networkaddress.hg: Copied from gio/src/socketaddress.hg.
	* tools/extra_defs_gen/generate_defs_gio.cc:

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/gio_signals.defs:
	* tools/extra_defs_gen/generate_defs_gio.cc: add Resolver to the
	  extra defs generator

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/Makefile_list_of_hg.am_fragment: put one .hg file on a
	  line and put sort them so it's easier to maintain this list

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* .gitignore:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/gio_signals.defs: re-generate with signals and properties
	  for some of the new network IO classes
	* gio/src/inetsocketaddress.ccg:
	* gio/src/inetsocketaddress.hg: Added InetSocketAddress class
	* tools/extra_defs_gen/generate_defs_gio.cc: added some new network
	  IO classes
	* tools/m4/convert_gio.m4:

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	split SocketAddressEnumerator into its own file

	* .gitignore:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/socketaddressenumerator.ccg: Copied from gio/src/socketconnectable.ccg.
	* gio/src/socketaddressenumerator.hg: Copied from gio/src/socketconnectable.hg.
	* gio/src/socketconnectable.ccg:
	* gio/src/socketconnectable.hg:

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* glib/src/fileutils.ccg:
	* glib/src/fileutils.hg: add Glib::file_set_contents() to match
	  Glib::file_get_contents().  Fixes Bug #586187

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* configure.ac: bump version and glib version requirement

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/socketconnectable.ccg:
	* gio/src/socketconnectable.hg: add overloads without a
	  'cancellable' argument for SocketAddressEnumerator methods

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/gio_methods.defs: re-generate
	* gio/src/socketaddress.hg: uncomment method that was being
	  generated incorrectly due to out-of-date .defs
	* gio/src/socketconnectable.ccg:
	* gio/src/socketconnectable.hg: wrap the next_async() manually
	  because we need to do the slot adaptation stuff

2009-06-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/resolver.ccg:
	* gio/src/resolver.hg: remove some overloads for now and get the
	  lookup_service() API working with the list of SrvTargets
	* gio/src/srvtarget.hg: add TypeTraits for lists of SrvTargets

2009-06-17  Jonathon Jongsma  <jonathon@quotidian.org>

	Add initial wrappers for SocketConnectable, SocketAddress

	* .gitignore:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/enums.hg:
	* gio/src/inetaddress.hg:
	* gio/src/resolver.hg:
	* gio/src/socketaddress.ccg: Copied from gio/src/error.ccg.
	* gio/src/socketaddress.hg: Copied from gio/src/fileicon.hg.
	* gio/src/socketconnectable.ccg: Copied from gio/src/filemonitor.ccg.
	* gio/src/socketconnectable.hg: Added.
	* tools/m4/convert_gio.m4:

2009-06-17  Jonathon Jongsma  <jonathon@quotidian.org>

	Initial wrapping for SrvTarget, Resolver

	* .gitignore:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/resolver.ccg: Added.
	* gio/src/resolver.hg: Added.
	* gio/src/srvtarget.ccg: Added
	* gio/src/srvtarget.hg: Added.
	* tools/m4/convert_gio.m4:

2009-06-18  Murray Cumming  <murrayc@murrayc.com>

  Add debug output to hint that your .defs needs a define-object.

	* tools/pm/DocsParser.pm: lookup_object_of_method(),
	* tools/pm/GtkDefs.pm: lookup_object(): Add debug output to hint that you
	need a define-object for each C GType in the *.defs file, though I
	do not yet know why these are sometimes missing.

2009-06-18  Murray Cumming  <murrayc@murrayc.com>

	* configure.ac: Require glib 2.21, because g_cancellable_connect/disconnect()
	are not in glib 2.20.

2009-06-17  Hubert Figuiere  <hub@figuiere.net>

	* gio/src/file.hg:
	* gio/src/file.ccg: Added Gio::File::load_contents() overload to allow
	ignoring the etag contents. (Bug #581349)

2009-06-16  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tools/extra_defs_gen/generate_extra_defs.cc:
	* tools/extra_defs_gen/generate_extra_defs.h: Modify extra defs
	generation utility to accept a custom defined function to determine if
	a GType is a pointer.  This was discussed in bug #562810 and I went
	back and forth about applying it.  I applied it, but later reverted
	it.  Now I find that it is difficult to keep patching the generated
	defs files in gstreamermm.  Since permission was granted, I'm
	re-applying it once and for all.

2009-05-23  Alexander Shaduri  <ashaduri@gmail.com>

	Build static libraries correctly under Windows/MinGW. Bug #583657.

	* configure.ac: Define GLIBMM_STATIC_LIB and GIOMM_STATIC_LIB when
	--enable-static is specified.
	* gio/giommconfig.h.in: Add GIOMM_STATIC_LIB and don't define GIOMM_DLL
	when using MinGW unless GIOMM_STATIC_LIB is defined.
	* glib/glibmmconfig.h.in: Add GLIBMM_STATIC_LIB and don't define
	GLIBMM_DLL when using MinGW unless GLIBMM_STATIC_LIB is defined.

2009-05-31  Armin Burgmeier  <armin@openismus.com>

	* tools/pm/Output.pm: Made gmmproc work on Windows, so that it is
	possible to build glibmm and friends directly from git.

2009-05-26  José Alburquerque  <jaalburqu@svn.gnome.org>

	* glib/src/spawn.ccg:
	* glib/src/spawn.hg: Corrected stray semicolons to fix the build with
	exceptions disabled.

2009-05-19  Siavash Safi  <siavash@siavashs.org>

	* tools/enum.pl: Fix --module option to work

2009-05-18  Jonathon Jongsma  <jonathon@quotidian.org>

	wrap Gio::InetAddress

	* .gitignore:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/gio_enums.defs: re-generate
	* gio/src/inetaddress.ccg: Added
	* gio/src/inetaddress.hg: Added.
	* tools/m4/convert_gio.m4:

2009-05-18  Jonathon Jongsma  <jonathon@quotidian.org>

	Wrap new Gio::FileIOStream class

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/fileiostream.ccg: Copied from gio/src/fileinputstream.ccg.
	* gio/src/fileiostream.hg: Copied from gio/src/fileinputstream.hg.

2009-05-18  Jonathon Jongsma  <jonathon@quotidian.org>

	Wrap the new Gio::IOStream class

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/iostream.ccg: Added.
	* gio/src/iostream.hg: Added.

2009-05-18  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/gio_docs_override.xml:add an override for
	get_activation_root() since the documentation contains /* comments
	*/ that mess up the documentation comments

2009-05-16  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/cancellable.ccg:
	* gio/src/cancellable.hg: add connect() and disconnect() functions

2009-05-16  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/gio_docs.xml:
	* gio/src/gio_methods.defs: update some defs

2009-05-14  Murray Cumming  <murrayc@murrayc.com>

	Type registration: Ignore NULL GTypes, preventing crashes.

	* glib/glibmm/wrap.cc: wrap_register(): Silently ignore NULL GTypes.
	* glib/glibmm/class.cc: register_derived_type(): Silently ignore NULL
	GTypes. Use g_strconcat() instead of ustring+= to maybe make it more
	efficient. This helps gstreamermm, which may try to use type names of
	plugins that are not actually available on the system.

2009-05-06  Chris Vine  <chris@cvine.freeserve.co.uk>

	* glib/glibmm/ustring.h (ustring_Iterator<>): Turn the relational
	operators into non-templated functions, and rely on the implicit
	conversion of ustring::iterator to ustring::const_iterator.  This
	makes the operators work with mixed argument types. (bgo #580773)

2009-04-27  Jonathon Jongsma  <jonathon@quotidian.org>

	* glibmm.doap: add mailto: protocol the email uris so the doap file
	is valid

2009-04-27  Jonathon Jongsma  <jonathon@quotidian.org>

	* examples/properties/Makefile.am
	* examples/properties/properties_example.cc
	* .gitignore
	* configure.ac
	* examples/Makefile.am: add a brief example of using properties with
	a Glib::Object-derived class

2009-04-23  Johannes Schmid <jschmid@openismus.com>

	* tools/pm/DocParser.pm:
	Fix #568490 – gmmproc: gtk_accel_map_*() not substituted in documentation
	by adding some more special cases to the doc generation. Also fixes the same
	issue for most methods where the .defs file do not mention an object.

2009-03-26  Daniel Elstner  <danielk@openismus.com>

	* configure.ac: Rename from configure.in.
	* autogen.sh: Fix reference to configure.in.
	* MSVC_Net2005/glibmm/Makefile.am: ditto,
	* MSVC_Net2005/giomm/Makefile.am: ditto,
	* MSVC_Net2008/glibmm/Makefile.am: ditto,
	* MSVC_Net2008/giomm/Makefile.am: ditto.

2009-03-26  Daniel Elstner  <danielk@openismus.com>

	* scripts/dk-warn.m4: New file defining DK_ARG_ENABLE_WARNINGS().
	* scripts/macros.m4: Remove the old GTKMM_ARG_ENABLE_WARNINGS().
	* configure.in: Use new macro DK_ARG_ENABLE_WARNINGS() to set the
	Makefile variable $(GLIBMM_WXXFLAGS).
	* build_shared/Makefile_build.am_fragment (all_includes): Prepend
	$(GLIBMM_WXXFLAGS).
	* tools/extra_defs_gen/Makefile.am (INCLUDES): ditto,
	* examples/Makefile.am_fragment (all_includes): ditto,
	* tests/Makefile.am_fragment (INCLUDES): ditto.

2009-03-26  Daniel Elstner  <danielk@openismus.com>

	* gio/src/emblemedicon.hg: Remove stray semicolons to get rid of
	compiler warnings.

2009-03-26  Daniel Elstner  <danielk@openismus.com>

	* tools/m4/list.m4 (GP_LIST_FIND): Rewrite the two find() loops
	to avoid a GCC warning about a lone semicolon as a loop body.

2009-03-25  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/glib_enums.defs:
	* glib/src/glib_functions.defs: Remove broken definitions - mostly
	functions that take function pointers. I wonder why I did not notice
	this before.

2009-03-23  Daniel Elstner  <danielk@openismus.com>

	* glib/src/keyfile.{ccg,hg}: Conditionalize all exception-handling
	code in order to fix the build with --disable-api-exceptions.
	* glib/src/regex.hg: ditto,
	* gio/src/appinfo.ccg: ditto,
	* gio/src/file.{ccg,hg}: ditto,
	* gio/src/outputstream.ccg: ditto,
	* examples/keyfile/main.cc: ditto,
	* examples/regex/main.cc: ditto,
	* tests/giomm_ioerror/main.cc: ditto,
	* tests/giomm_simple/main.cc: ditto.

2009-03-19  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tools/m4/class_gobject.m4: Added _CUSTOM_CTOR_CAST to _CLASS_GOBJECT
	for classes that need to include custom code in their cast and
	construct_params constructors as is done with _CLASS_GTKOBJECT.
	Bug #574861.

2009-03-18  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tools/m4/base.m4: Modified _GET_TYPE_FUNC() to properly work with
	types like GtkFOOBar producing, for example, gtk_foo_bar_get_type()
	instead of gtk_fo_obar_get_type().
	Bug #575870.

2009-03-16  Armin Burgmeier  <armin@openismus.com>

	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2008/giomm/giomm.vcproj: Added emblem.[h|cc],
	emblemedicon.[h|cc] and memoryoutputstream.[h|cc] to the project.

	* tools/extra_defs_gen/generate_defs_gio.cc: #ifdef-out the unix types
	on Windows.

2.20.0

2009-03-15  Jonathon Jongsma  <jjongsma@gnome.org>

	* configure.in: bump rev to 2.20.0
	* NEWS: update for release

2009-03-09  Daniel Elstner  <danielk@openismus.com>

	* tools/extra_defs_gen/generate_extra_defs.cc (get_properties):
	Replace nested double quotes in the docs string by single quotes
	to ease the parsing pain of gmmproc.

2.19.8:

2009-02-23  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_enums.defs: Regenerated, adding
	FILE_CREATE_REPLACE_DESTINATION and Error::TOO_MANY_OPEN_FILES.
	* gio/src/gio_signals.defs: Regenerated.
	* go/src/mountoperation: Added the aborted signal.

2009-02-22  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/drive.hg: Remove extra ;s on the new signalsl, to avoid
	compiler warnings.

2.19.3

2009-02-20  Jonathon Jongsma  <jonathon@quotidian.org>

	* docs/reference/Makefile.am: fix distcheck issue

2009-02-20  Jonathon Jongsma  <jonathon@quotidian.org>

	* NEWS:
	* configure.in: update for 2.19.3 release

2009-02-17  Daniel Elstner  <danielk@openismus.com>

	* glib/glibmm/debug.h: Remove mention of G_GNUC_PRETTY_FUNCTION in
	comment because a code maintenance tool of André Klapper complained
	about it.
	* glib/glibmm/objectbase.cc: Likewise.

2009-02-06  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_methods.defs: Regenerated.

	* gio/src/filterinputstream.hg: Added get/set_close_base_stream().
	* gio/src/filteroutputstream.hg: Added get/set_close_base_stream().
	* gio/src/unixinputstream.hg: Added get_fd() and get/set_close_fd().
	* gio/src/unixoutputstream.hg: Added get_fd() and get/set_close_fd().

	* gio/src/datainputstream.[hg|ccg]: Added read_until_async(),
	read_until_finish(), read_line_async() and read_line_finish().
	Added documentation for read_until() and read_line().

2009-02-06  Murray Cumming  <murrayc@murrayc.com>

	* tools/extra_defs_gen/generate_defs_gio.cc: Added unix types.
	* gio/src/gio_signals.defs: Regenerated.
	* gio/src/bufferedinputstream.hg: Added buffer_size property.
	* gio/src/bufferedoutputstream.hg: Added buffer_size and auto_grow
	properties.
	* gio/src/datainputstream.hg: Added byte_order and newline_type
	properties.
	* gio/src/dataoutputstream.hg: Added byte_order property.
	* gio/src/filterinputstream.hg: Added close_base_ stream property.
	* gio/src/filteroutputstream.hg:
	* gio/src/unixinputstream.hg: Added fd and close_fd properties.
	* gio/src/unixoutputstream.hg: Added fd and close_fd properties.

2009-02-05  Theppitak Karoonboonyanan  <thep@linux.thai.net>

	* docs/reference/Doxyfile.in:
	* docs/reference/Makefile.am: Allow glibmm to build outside the source
	tree. Bug #570216

2009-02-05  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/regex.hg: create(): For the version when
	GLIBMM_EXCEPTIONS_ENABLED is not defined, do not specify default
	parameter values because we have an extra error parameter.
	Bug #570648 (Bernd Buschinski)

2009-01-20  Deng Xiyue  <manphiz@gmail.com>

	* Change license header to mention Lesser General Public License
	version 2.1 instead of Library General Public License, to be
	consistent with COPYING.

2.19.2:

2009-01-19  Tao Wang  <dancefire@gmail.com>

	* glib/src/nodetree.hg: Do not use a non-ASCII dash character, to
	avoid the MSVC++ warning C4819 with Visual Studio 2008.
	Bug #568072

2009-01-09  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/wrap.h: wrap_auto_interface<>(): Add a warning to give a
	clue when the dynamic_cast fails, for instance if you are doing some
	incorrect multiple inheritance.

2009-01-08  Daniel Elstner  <danielk@openismus.com>

	* glib/glibmm/ustring.h (ustring::compose): Add an overload which
	takes only a format string and no arguments to be substituted.  It
	is essentially a null-operation as long as the format string does
	not contain any invalid argument references.  Bug #506394.

2009-01-06  Jonathon Jongsma  <jonathon@quotidian.org>

	* glib/src/uriutils.ccg: fix a memory leak in the uri utility functions
	caused by not freeing the returned C string.  Bug #566845 (Jason Kasper)

2009-01-03  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg: Added implementation of the
	make_directory_with_parents() method overload that takes no parameter.
	Bug #566003 (Philip Belemezov).

2008-12-24  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/spawn.ccg:
	* glib/src/spawn.hg: Added Glib::spawn_*() alternative API for when
	GLIBMM_EXCEPTIONS_ENABLED is not enabled (when compiling without
	C++ exceptions.)
	Bug #565487
	(Jonathon Jongsma)

2008-12-14  Jonathon Jongsma  <jonathon@quotidian.org>

	* NEWS: update for follow-up release

2008-12-14  Jonathon Jongsma  <jonathon@quotidian.org>

	* configure.in: bump to 2.19.1

2008-12-14  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/drive.hg: Wrap new signals 'changed', 'disconnected', and
	'eject_button' with the no_default_handler option so that we don't break ABI
	by adding new virtual functions

=== 2.19.0 ===

2008-12-12  Jonathon Jongsma  <jonathon@quotidian.org>

	* NEWS: update for release

2008-12-12  Jonathon Jongsma  <jonathon@quotidian.org>

	* tests/giomm_ioerror/main.cc:
	* tests/giomm_simple/main.cc: use common filenames so that people other than
	murrayc can run the tests without errors

2008-12-12  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/memoryoutputstream.hg: Fix a copy-paste error where I accidentally
	left a FilterOutputStream type in

2008-12-02  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/memoryoutputstream.ccg:
	* gio/src/memoryoutputstream.hg: Added MemoryOutputStream, but needs a bit
	of work on the constructor yet

2008-12-02  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/emblem.ccg:
	* gio/src/emblem.hg:
	* gio/src/emblemedicon.ccg:
	* gio/src/emblemedicon.hg:
	* tools/m4/convert_gio.m4: add Emblem and EmblemedIcon classes

2008-12-02  Jonathon Jongsma  <jonathon@quotidian.org>

	* tools/m4/convert_glib.m4: add a conversion for Glib::KeyFile&
	* gio/src/desktopappinfo.hg: wrap the new create_from_keyfile() function.
	In addition, I removed the _WRAP_CTOR and _WRAP_CREATE usage from the
	desktop_id constructor and wrapped all of the static create* functions using
	_WRAP_METHOD since these functions do a lot of error handling and can fail
	to create an object under some circumstances.

2008-12-02  Jonathon Jongsma  <jonathon@quotidian.org>

	* docs/reference/Makefile.am: rebuild docs when a giomm header file is
	changed (similar to how we handle glibmm)

2008-12-02  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/giomm/contenttype.cc:
	* gio/giomm/contenttype.h: add content_type_from_mime_type()

2008-12-02  Jonathon Jongsma  <jonathon@quotidian.org>

	Wrap a bunch of new / missed API

	* gio/src/appinfo.hg:
	* gio/src/appinfo.ccg: AppInfo::get_commandline(), can_delete(), do_delete()
	(need better name?), reset_type_associations(), launch_default_for_uri()
	* gio/src/cancellable.hg: add commented-out make_pollfd() since I'm not sure
	yet whether it's useful with the C++ API or not
	* gio/src/drive.hg: Added signals 'changed', 'disconnected', and
	'eject_button'
	* gio/src/icon.hg:
	* gio/src/icon.ccg: Added Icon::create(string) and Icon::to_string()
	* gio/src/mount.hg:
	* gio/src/mount.ccg: Added Mount::guess_content_type_sync(), is_shadowed(),
	shadow(), and unshadow()

2008-12-01  Jonathon Jongsma  <jonathon@quotidian.org>

	* configure.in: bump requirement to glib 2.19.x
	* gio/src/gio_docs.xml:
	* gio/src/gio_enums.defs:
	* gio/src/gio_methods.defs:
	* gio/src/gio_signals.defs:
	* glib/src/glib_docs.xml:
	* glib/src/glib_enums.defs:
	* glib/src/glib_functions.defs:
	* glib/src/gmodule_enums.defs:
	* glib/src/gmodule_functions.defs:
	* glib/src/gobject_enums.defs:
	* glib/src/gobject_functions.defs: update the .defs to start on 2.19.x API

2008-12-01  Jonathon Jongsma  <jonathon@quotidian.org>

	* Makefile.am: add some convenience rules for generating the .defs files

2008-09-22  Dave Foster <daf@minuslab.net>

	* glib/glibmm/main.h:
	* glib/glibmm/main.cc: Added SignalIdle::connect_once,
	SignalTimeout::connect_once, and SignalTimeout::connect_seconds_once.

2008-12-10  Przemysław Grzegorczyk  <pgrzegorczyk@gmail.com>

	* Cleaned up glib includes since in the future, only glib.h (and
	glib-object.h, etc) will be allowed to be included directly.
	Bug #563987

2008-12-01  Hubert Figuiere  <hub@figuiere.net>

	* glib/src/markup.ccg: Change the way unused variables
	are marked. Bug #562716

2008-11-29  Hubert Figuiere  <hub@figuiere.net>

	* glib/src/nodetree.hg: Fix -Wshadow warnings. Bug #555743.

2008-10-20  Jonathon Jongsma  <jonathon@quotidian.org>

	* NEWS:
	* configure.in: bump version to 2.18.1, prepare NEWS for release

2008-10-20  Jonathon Jongsma  <jonathon@quotidian.org>

	* Makefile.am: updated the release-announce template

2008-10-16  Armin Burgmeier  <armin@openismus.com>

	* glib/glibmm/ustring.h: Fixed the const char* specialization for
	Stringify<> by making the string_ member a const Glib::ustring instead
	of a const Glib::ustring&. Also enabled the char[N] specialization for
	string literals.

	* tests/glibmm_ustring_compose/main.cc: Enabled the test for the
	specialization for string literals.
	Bug #506410 (Szilárd Pfeiffer)

2008-10-15  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tools/extra_defs_gen/generate_extra_defs.cc: Modify signal and props
	generation tool to generate interface signals.

2008-10-15  Armin Burgmeier  <armin@openismus.com>

	* gio/src/fileenumerator.hg:
	* gio/src/fileenumerator.ccg: Made FileEnumerator::next_file not add
	an additional reference to the return value, because the C version
	creates a new object. Also, changed ownership of the list returned by
	FileEnumerator::next_files_finish to be deep instead of shallow. Bug
	#556387.

2008-10-09  Armin Burgmeier  <armin@openismus.com>

	* gio/src/fileinfo.hg: Rename FILE_TYPE_UNKNOWN to FILE_TYPE_NOT_KNOWN
	because the former is a #define on Windows in winbase.h, included from
	windows.h. Keep FILE_TYPE_UNKNOWN for compatibility if it is not
	already defined.

2008-10-09  Armin Burgmeier  <armin@openismus.com>

	* MSVC_Net2008/Makefile.am: Removed README from EXTRA_DIST to fix
	`make dist'.

2008-10-08  Armin Burgmeier  <armin@openismus.com>

	* MSVC_Net2005/examples/dispatcher2/dispatcher2.vcproj:
	* MSVC_Net2005/examples/dispatcher/dispatcher.vcproj:
	* MSVC_Net2005/examples/options/options.vcproj:
	* MSVC_Net2005/examples/thread/thread.vcproj:
	* MSVC_Net2005/examples/thread_pool/thread_pool.vcproj:
	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2005/glibmm/glibmm.vcproj: Adapt to the new MSVC++ DLL
	naming convention.

	* MSVC_Net2008/: Added MSVC 2008 project files.

	* configure.in:
	* Makefile.am: Add the new files to the build.

2008-10-04  Jonathon Jongsma  <jonathon@quotidian.org>

	* gio/src/error.hg: add a workaround for the HOST_NOT_FOUND symbol
	conflicts, as suggested by Szilárd Pfeiffer in Bug #529496
	* tests/giomm_ioerror/main.cc: add a test for this

2008-09-19  Armin Burgmeier  <armin@openismus.com>

	* tools/pm/DocsParser.pm (convert_tags_to_doxygen): Keep @param and
	@throws intact, so these can be used in *_docs_override_xml. Bug
	#539891.

2008-09-22  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/glibmm/glibmm.vcproj: Added uriutils.cc and nodetree.cc
	to the project.

2008-09-22  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/examples/dispatcher2/dispatcher2.vcproj:
	* MSVC_Net2005/examples/dispatcher/dispatcher.vcproj:
	* MSVC_Net2005/examples/markup/markup.vcproj:
	* MSVC_Net2005/examples/options/options.vcproj:
	* MSVC_Net2005/examples/thread/thread.vcproj:
	* MSVC_Net2005/examples/thread_pool/thread_pool.vcproj:
	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2005/glibmm/glibmm.vcproj:
	* MSVC_Net2005/tests/giomm_simple/giomm_simple.vcproj:
	* MSVC_Net2005/tests/glibmm_value/glibmm_value.vcproj: Fixed the MSVC
	build of the examples and tests if configure did not run before.

=== 2.18.0 ===

2008-09-21  Jonathon Jongsma  <jonathon@quotidian.org>

	* Makefile.am: fix a minor issue in the release target

2008-09-21  Jonathon Jongsma  <jonathon@quotidian.org>

	* NEWS: Add news for 2.18 release
	* configure.in: bump version number for release
	* Makefile.am: update release mail template slightly

2008-09-08  Murray Cumming  <murrayc@murrayc.com>

	* COPYING.tools:
	* Makefile.am: Added COPYING.tools with the GPL because the tools/*.cc
	file is GPL. Bug #550789.

=== 2.17.3 ===

2008-09-03  Jonathon Jongsma  <jjongsma@gnome.org>

	* NEWS: update for release
	* configure.in: bump version for release

2008-08-26  Szilárd Pfeiffer  <szilard.pfeiffer@gmail.com>

	* glib/src/nodetree.hg: Implemented clone function to merge the
	constructors into that and fixed clear function the operator=
	function.
	* tests/glibmm_nodetree/main.cc: Simplified the test case.
	Bug #547901.

2008-08-27  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/glibmm/glibmm.rc.in:
	* MSVC_Net2005/giomm/giomm.rc.in: Replaced #include "afxres.h" by
	#include <windows.h> which does the job equally well, and allows
	compilation with the freely available Visual Studio Express compiler.

2008-08-27  Armin Burgmeier  <armin@arbur.net>

	* glib/glibmm/ustring.cc: Only include config.h when HAVE_CONFIG_H is
	defined, to allow building glibmm with MSVC without having generated
	config.h before. The only thing config.h is used for is the
	SIZEOF_WCHAR_T define anyway, and this is not needed for a MSVC build.
	Bug #549343.

2008-08-26  Murray Cumming  <murrayc@murrayc.com>

	* tests/glibmm_nodetree/main.cc: Actually use the copy constructor (or operator=),
	instead of just copying the pointer.

2008-08-26  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/nodetree.hg: Added an operator=() because we have a copy constructor.
	Moved some code into a private clear() method so we can reuse it.

2008-08-26  Szilárd Pfeiffer  <szilard.pfeiffer@gmail.com>

	* glib/src/nodetree.hg: Added a copy constructor. Therefore, take
	store the data by value instead of reference, taking it by const reference.
	* tests/glibmm_nodetree/main.cc: Test the copy constructor.
	Bug #547909.

2008-08-15  Szilárd Pfeiffer  <szilard.pfeiffer@gmail.com>

	* glib/src/nodetree.hg: Fixed pointer handling problem in find_child.
	Bug #547909.

2008-08-15  Szilárd Pfeiffer  <szilard.pfeiffer@gmail.com>

	* tests/glibmm_nodetree/main.cc: Implement the C++ version of GNode test
	case.
	Bug #547889

2008-07-29  Szilárd Pfeiffer  <szilard.pfeiffer@gmail.com>

	* glib/src/nodetree.hg: Use const_cast<> in the necessary const member
	functions instead of gobj() to fix the compilation when using these.
	Bug #546485.

2008-08-08  Armin Burgmeier  <armin@arbur.net>

	* MSVC_Net2005/: Moved from MSVC_Net2003

	* MSVC_Net2005/glibmm.sln:
	* MSVC_Net2005/glibmm/glibmm.vcproj:
	* MSVC_Net2005/examples/dispatcher/dispatcher.vcproj: Converted to
	project files for Visual Studio 2005.

	* MSVC_Net2005/glibmm/glibmm.rc.in: Removed the #include "resource.h"
	since there is no resource.h in the project, and the resource still
	seems to compile.

	* MSVC_Net2005/giomm/giomm.rc.in:
	* MSVC_Net2005/giomm/giomm.vcproj:
	* MSVC_Net2005/giomm/Makefile.am: Added giomm to the MSVC project.

	* MSVC_Net2005/tests/giomm_simple/giomm_simple.vcproj:
	* MSVC_Net2005/tests/giomm_simple/Makefile.am: Added giomm_simple to
	the MSVC project.

	* MSVC_Net2005/tests/Makefile.am:
	* MSVC_Net2005/Makefile.am:
	* Makefile.am:
	* configure.in: Adapted build files.

=== 2.17.2 ===

2008-08-06  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* NEWS: update for 2.17.2
	* configure.in: bump version

2008-08-06  Murray Cumming  <murrayc@murrayc.com>

	* configure.in:
	* tests/Makefile.am:
	* tests/glibmm_ustring_compose/main.cc: Added a test case.
	* glib/glibmm/ustring.h: Added a ustring::Stringify<>
	template specialization so that ustring::compose() works with
	const char* arguments, though it still needs to be fixed to
	work for string literals.
	Bug #506410 (Szilárd Pfeiffer).

2008-08-06  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/nodetree.hg: Make gobject_ and data_ private,
	to remove them from protected API. Patch from Szilárd Pfeiffer.
	Bug #546485.
	Make gobj() inline.

2008-08-04  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/propertyproxy.h: Added some API documentation
	about the need to register a new GType when adding properties.
	Bug #523043 (Moritz Ulrich).

2008-08-02  Murray Cumming  <murrayc@murrayc.com>

	* docs/reference/glibmm_header.html_fragment: Change the Main
	Page link to link to gtkmm.org/documentation.shtml

2008-07-29  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/Makefile.am: Remove the mention of tree.cc here to
	fix the build. Generated files should never be menioned there.

2008-07-29  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/nodetree.hg: Hand-code the TraverseType enum, to add
	a prefix to the values.
	* tests/glibmm_nodetree/main.cc: Adapted.

2008-07-29  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/nodetree.hg: find(), find_child(), traverse(), foreach():
	Rearrange the parameters so we can have default values.
	* tests/glibmm_nodetree/main.cc: Adapted.

2008-07-29  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/nodetree.hg: Move the TraverseFlags enum into
	the class, and hand-code it to avoid problems with _WRAP_ENUM().
	* tests/glibmm_nodetree/main.cc: Adapted.
	Bug #545050 (Szilárd Pfeiffer).

2008-07-29  Murray Cumming  <murrayc@murrayc.com>

	* configure.in:
	* glib/glibmm.h:
	* glib/src/Makefile_list_of_hg.am_fragment:
	* glib/src/nodetree.hg:
	* glib/src/tree.hg: Renamed to nodetree.hg
	* tests/Makefile.am:
	* tests/glibmm_tree/Makefile.am:
	* tests/glibmm_tree/main.cc: Renamed to glibmm_nodetree/

2008-07-29  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/tree.hg: Renamed Glib::Tree to Glib::NodeTree to avoid
	confusion with GTree, because we actually wrap GNode, but do not like
	that name. As discussed in bug #520778.
	* tests/glibmm_tree/main.cc: Adapted.

2008-07-29  Murray Cumming  <murrayc@murrayc.com>

	* Makefile.am: Build the docs at the end, after the tests, to
	save time when testing API changes.

	* glib/src/tree.hg: Const corrections: Add const and non-const versions
	of many methods, instead of returning non-const objects from const methods.
	find().
	Changed max_height() to get_max_height() for consistency.
	* tests/glibmm_tree/main.cc: Adapted to changed API.

2008-07-29  Szilárd Pfeiffer  <szilard.pfeiffer@gmail.com>

	* glib/src/tree.hg: Make the callbacks take a Tree<> instead of just
	the data, so they can use methods on the tree (which can be a node
	in the tree).
	gobject_: Make this protected.
	Provide the this pointer as data to g_node_new() so we can retrieve
	it later.
	Removed children_ and parent_ because we don't need a separate store now that
	we can get the C++ instance from the gobject instance.
	owns_gobject_: Removed because it is was always true, so the gobject was
	always destroyed (and still is).
	* tests/glibmm_tree/main.cc: Updated for the changed API.
	Bug #520778.

2008-07-25  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/volumemonitor.hg: Added the drive_eject_button signal.

2008-07-25  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_enums.defs: Hacked in a replacement
	enum for Gio::Error::HOST_NOT_FOUND as
	Gio::Error::HOST_WAS_NOT_FOUND, to avoid a clash with
	a netdb.h define.
	Bug #529496.
	* configure.in:
	* tests/Makefile.am:
	* tests/giomm_ioerror/Makefile.am:
	* tests/giomm_ioerror/main.cc: Added a test to make sure
	that our hacked-in enum value stays hacked in.

2008-07-25  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_enums.defs:
	* gio/src/gio_methods.defs:
	* gio/src/gio_signals.defs: Regenerated.
	* gio/src/mount.hg: Corrected an _IGNORE().
	* gio/giomm/contenttype.cc:
	* gio/giomm/contenttype.h: Added content_type_guess_for_tree().

2008-07-23  Damien Carbery <damien.carbery@sun.com>

	* scripts/macros.m4: Change grep to use -i when checking for GNU m4.
	  This fixes the test on Solaris. Bug #423990.

=== 2.17.1 ===

2008-07-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* NEWS: update for new release

2008-07-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* configure.in: bump version and min required glib version

2008-07-16  Jens Georg  <mail@jensge.org>

	* MSVC_Net2003/glibmm/glibmm.vcproj: Mention new source files
	for regex and keyfile.
	Bug #543292.

2008-07-16  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: Added make_directory_with_parents(),
	query_file_type(), monitor().
	* gio/src/fileenumerator.ccg:
	* gio/src/fileenumerator.hg: Added get_container().
	* gio/src/mount.hg: Added guess_content_type() and
	guess_content_type_finish().
	* gio/src/themedicon.hg: Added prepend_name().
	* gio/src/volume.hg: Added get_activation_root().
	* tools/m4/convert_gio.m4: Added a necessary conversion.

2008-07-15  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_methods.defs:
	* glib/src/glib_functions.defs: Regenerated with h2def.py
	* glib/src/checksum.hg: Added reset().

2008-07-15  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/appinfo.ccg:
	* gio/src/appinfo.hg: Avoid a circular include to fix the build.

2008-07-15  Benjamin Herr  <ben@0x539.de>

	* gio/src/volumemonitor.hg: Removed some unnecessary ; characters,
	to avoid warnings.
	Bug #542929.

2008-07-14  Murray Cumming,  <murrayc@murrayc.com>

	* tools/m4/convert_gio.m4:
	* gio/src/appinfo.hg: get_display(), get_startup_notify_id():
	Take a list of Gio::File, not filepath string. Now that the C API is
	properly documented we know that this is correct. It's an API break
	but this function could nothave worked before.

	* glib/src/glib_docs.xml: Regenerate.
	* glib/src/glib_docs_override.xml: Add overrides for
	g_key_file_load_from_file() and g_key_file_get_value() to mention
	exceptions.

2008-06-30  Johannes Schmid  <jhs@gnome.org>

	* glib/glibmm/containerhandle_shared.h:
	Improve documentation of Glib::OwnershipType (#540875)

2008-07-02  Armin Burgmeier  <armin@arbur.net>

	* gio/src/file.ccg: Pass NULL to the underlying C function for the
	etags parameter in the various replace_contents functions. Also bug
	#540656.

2008-06-28  Armin Burgmeier  <armin@arbur.net>

	* gio/src/file.ccg: Pass NULL to the underlying C function for the
	etags parameter in various *_replace functions. Otherwise, existing
	files are not overwritten. Bug #540656.

2008-06-23  Murray Cumming  <murrayc@murrayc.com>

	* configure.in:
	* examples/Makefile.am:
	* examples/keyfile/Makefile.am:
	* examples/keyfile/example.ini:
	* examples/keyfile/main.cc: Added a little KeyFile example. I am
	surprised that we do not seem to have one somewhere already.
	I need to move all these glibmm examples into gtkmm-documentation some
	time.

2008-06-19  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/tree.hg: Some whitespace changes. And more use of typedefs
	to simplify the code.

2008-06-19  Levi Bard  <taktaktaktaktaktaktaktaktaktak@gmail.com>

	* glib/src/tree.hg: Some minor changes to deal with TODOs.
	Bug #538803.

2008-06-17  Chris Vine <chris@cvine.freeserve.co.uk>

	* glib/src/thread.hg: document that the slot object passed to
	Glib::Thread::create() should not represent a non-static method of
	a class derived from sigc::trackable.
	See bug #512348.

=== 2.17.0 ===

2008-06-16  Jonathon Jongsma  <jonathon.jongsma@collabora.co.uk>

	* NEWS:
	* configure.in: update for new release

2008-06-13  Levi Bard  <taktaktaktaktaktaktaktaktaktak@gmail.com>

	* glib/glibmm.h:
	* glib/glibmm/Makefile.am:
	* glib/src/Makefile_list_of_hg.am_fragment:
	* glib/src/tree.ccg:
	* glib/src/tree.hg: Added Glib::Tree, a wrapper for GNode, providing
	an N-ary tree container, more or less like a standard C++ container.
	* configure.in:
	* tests/Makefile.am: Added some test code for this new API.
	Bug #520778

2008-06-13  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/date.hg: Used @newin2p18 on the new API and made some
	slight corrections to the new reference documentation comments.

2008-06-11  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tests/glibmm_date/Makefile.am: Contents of files in
	tests/glibmm_date/ (main.cc and Makefile.am) were duplicated when I
	applied patch in bug #536721 to already existing files before 6/9
	commit. Fixed main.cc already, so now repaired Makefile.am.

2008-06-10  José Alburquerque  <jaalburqu@svn.gnome.org>

	* tests/glibmm_date/main.cc: Removed duplicate code so test can
	compile.

2008-06-09  José Alburquerque  <jaalburqu@svn.gnome.org>

	* glib/src/date.ccg:
	* glib/src/date.hg: Added copy constructor and assignment operator;
	Made GDate constructor visible.

	* configure.in:
	* tests/Makefile.am:
	* tests/glibmm_date/Makefile.am:
	* tests/glibmm_date/main.cc: Added simple test to test Glib::Date.

This is svn trunk for new API, wrapping glib 2.17/18. See also the glibmm-2-16 branch.

2008-04-25  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/drive.hg:
	* gio/src/volume.hg: add TypeTraits implementations for Drive and Volume
	similar to the one added for Mount.

2008-04-23  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/mount.hg: Add a TypeTraits implementation for
	Glib::RefPtr<Gio::Mount> so that we can wrap implementor types that don't
	have a wrapper (e.g. GHalMount in gvfs).  Fixes bug #529533

2008-04-24  Jonathon Jongsma  <jjongsma@gnome.org>

	* glib/glibmm/wrap.cc: Improve the error message when failing to wrap a
	particular type of object to give a hint about initializing the library
	since we get so many questions about this (bug #529648)

2.16.2:

2008-04-18  Jonathon Jongsma  <jjongsma@gnome.org>

	* NEWS:
	* configure.in: bump to 2.16.2 for release

2008-04-16  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/spawn.hg: Moved the enum back out of the doxygen group,
	because that results in the enums group being inside the spawn group.

2008-04-16  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/spawn.hg: Addded doxygen documentation based on the
	C documentation.
	Bug #528271 (Jonathon Jongsma)

2008-04-13  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optionentry.ccg: set_long_name(): Do not use NULL for an
	empty string, because "" has a special meaning to GOptionEntry - it
	is the definition of G_OPTION_REMANING.
	* examples/options/main.cc: Add an entry with the long name
	G_OPTION_REMAINING, to list additional non-named arguments. More
	explicit API should be added for this.
	Bug #526831 (Christian Lundgren).

2008-04-13  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/ustring.cc erase(): Create an end iterator and use it,
	instead of just using the std::string(iterator) erase implementation,
	because that only removes one byte, which can make the whole string
	invalid UTF-8.
	Bug #527687 (Jarro).

2008-04-11  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optionentry.ccg:
	* glib/src/optionentry.hg: Hand-code set_description(),
	set_arg_description() and set_long_name(), to free any existing string,
	to maybe fix a (possible) leak found by valgrind.

2008-03-29  Jonathon Jongsma  <jjongsma@gnome.org>

	* Makefile.am: add some more convenience targets for making releases

2.16.1:

2008-03-28  Tim Retout  <tim@retout.co.uk>

	* glib/glibmm/helperlist.h (operator[]): Add a newline before
	the semicolon at the end of the 'for' loop.  Fixes g++ 4.3 warning.

2008-03-29  Jonathon Jongsma  <jjongsma@gnome.org>

	* NEWS: updated
	* configure.in: bump to 2.16.1

2008-03-29  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg:
	* gio/src/file.ccg: query_default_handler(), set_display_name(),
	query_info(), query_filesystem_info(): Do not take an extre reference,
	because the C functions all provide new objects with an initial
	reference. I checked.

2008-03-28  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg: create(), replace(): Do not take an extra reference,
	because the C function has given us a new instance with an initial
	reference. The leak stopped the stream from really replacing the file,
	because that only happens when it is closed.

2008-03-28  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg:
	* gio/src/outputstream.hg: Documentation: Remove/fix mentions of 0 when
	we mean something else.

2008-03-24  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/desktopappinfo.hg:
	* gio/src/unixinputstream.hg:
	* gio/src/unixmount.hg:
	* gio/src/unixoutputstream.hg: don't wrap these unix-specific types when
	building on MS Windows (bug #524126)

2008-03-18  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg: Include giomm/error.h Because Gio::Error is thrown
	by some of these methods and it is annoying to have to include it
	separately just to catch that.

2.16.0:

2008-03-10  Tim Mooney  <murrayc@murrayc.com>

	* glib/glibmm/object.cc: Include string.h to fix the build with
	SUN CC.
	Bug #498438.

2008-03-07  Jonathon Jongsma  <jjongsma@gnome.org>

	* glib/glibmm.h: add an include for checksum.h which was added in the 2.15.x
	series.

2008-03-05  Murray Cumming  <murrayc@murrayc.com>

	* MAINTAINERS: Added Jonathon Jongsma as co-maintainer.

2008-03-05  Murray Cumming  <murrayc@murayc.com>

	* tools/m4/convert_gio.m4: Use __CONVERT_CONST_REFPTR_TO_P_SUN() instead
	of __CONVERT_REFPTR_TO_P() to maybe fix the build with Sun CC.
	(Simon Zheng)

2008-03-04  Jonathon Jongsma  <jjongsma@gnome.org>

	* Makefile.am: updated the 'release' target to give a bit more helpful error
	messages

2008-03-04  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_docs.xml: Regenerated with docextract_to_xml.py.
	* gio/src/gio_docs_override.xml: Overrode g_file_query_exists() to
	mention an exception instead of an error. G_IO_ERROR_* now does not
	appear in any of our documentation.

2.15.8:

2008-03-03  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/bufferedinputstream.hg:
	* gio/src/bufferedoutputstream.hg:
	* gio/src/datainputstream.hg:
	* gio/src/dataoutputstream.hg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/filterinputstream.hg:
	* gio/src/filteroutputstream.hg:
	* gio/src/inputstream.hg:
	* gio/src/memoryinputstream.hg:
	* gio/src/mount.hg:
	* gio/src/outputstream.hg:
	* gio/src/seekable.hg:
	* gio/src/unixinputstream.hg:
	* gio/src/unixoutputstream.hg: Put these in a Streams doxygen group.
	We should think of some more groups, maybe by looking at the C
	documentation.

2008-03-03  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: load_contents(), load_contents_finish(),
	load_partial_contents_finish(): Use char*& instead of char** for contents,
	though that is not that great either. Use std::string& instead of char**
	for etag_out. Added method overloads without cancellable.
	We might want other method overloads in future.

2008-02-29  Jonathon Jongsma  <jjongsma@gnome.org>

	* Makefile.am: added 'release' target which will run distcheck, tag the
	repository with the current version and upload the tarball to
	master.gnome.org

2008-02-27  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/asyncresult.hg:
	* gio/src/file.hg:
	* gio/src/fileenumerator.hg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/gio_docs_override.xml:
	* gio/src/inputstream.hg:
	* gio/src/outputstream.hg: Correct hand-coded documentation,
	to talk about throwing exceptions rather than setting or returning
	errors.
	* gio/src/mount.hg: Add class documentation based on the C documentation.

2008-02-27  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_docs.xml: Regenerated with docextract_to_xml.py.
	* gio/src/gio_docs_override.xml: Override some documentation that
	mentions the GCancellable being optional, or that talks about setting
	errors instead of throwing them.

2.15.7:

2008-02-26  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_methods.defs: Regenerated.
	* gio/src/file.ccg:
	* gio/src/file.hg: Added query_filesystem_info_async() and
	query_filesystem_info_finish() because these were added to the C API.
	* gio/src/themedicon.hg: Added append_name() because this was added to
	the C API.

2008-02-25  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/Doxyfile.in: 'upgraded' the doxygen config file since
	doxygen was complaining about obsolete options
	* gio/giomm/contenttype.h:
	* gio/src/bufferedinputstream.hg:
	* gio/src/file.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/outputstream.hg:
	* glib/src/checksum.hg:
	* glib/src/keyfile.hg: fixed a bunch of minor doxygen warnings

2008-02-25  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/doxygen_to_devhelp.xsl: add path separators between the
	reference prefix and the link filenames
	* docs/reference/Makefile.am: remove trailing slash from the reference
	prefix (fixes bug #518673)

2008-02-25  Wouter Bolsterlee  <wbolster@svn.gnome.org>

	* gio/src/file.hg:
	* gio/src/gio_docs.xml:
	* gio/src/gio_methods.defs:
	* gio/src/gio_vfuncs.defs:

	Initial work for another API change:
	g_file_contains_file() has been renamed to
	g_file_has_prefix() (with the parameter order swapped!)

2008-02-25  Wouter Bolsterlee  <wbolster@svn.gnome.org>

	* glib/src/uriutils.ccg:
	* glib/src/uriutils.hg:

	g_uri_get_scheme has been renamed to g_uri_parse_scheme
	in GLib trunk. Updated accordingly.

2008-02-24  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/Makefile.am: dist xml/index.xml to satisfy build-deps for
	building the devhelp book from the tarball.  Fixes distcheck.

2.15.6:

2008-02-24  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/inputstream.hg: Updated the todo regarding read().

2008-02-22  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/fileattributeinfolist.hg: Added dup().
	* gio/src/gio_others.defs: Added signals for GMount and GVolume.
	This deals with the gmmproc warnings.

2008-02-21  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/desktopappinfo.hg: Revert the change from José which removed
	use of _WRAP_CTOR() and _WRAP_CREATE(). We really do want to use these
	so we instantiate derived GTypes.

2008-02-21  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/desktopappinfo.hg: Made is_hidden() const.

2008-02-21  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/desktopappinfo.hg: Used _WRAP_METHOD instead of _WRAP_CREATE
	for create() to allow docs from C API to be used

2008-02-21  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/desktopappinfo.hg: Renamed new_from_file() to
	create_from_file()

2008-02-21  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/desktopappinfo.hg: Added create(), create_from_file()
	is_hidden() and set_desktop_env()
	* tools/m4/convert_gio.m4: Added DesktopAppInfo conversion

2008-02-21  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_methods.defs: Regenerated with h2defs.py

	* gio/src/gio_signals.defs: Corrected the GMountOperation::ask-question
	definition.
	* gio/src/mountoperation.hg: Wrapped the ask-question signal, though
	I wonder if it really works.

	* gio/src/memoryinputstream.ccg:
	* gio/src/memoryinputstream.hg:
	Added add_data(const void* data, gssize len).

	* gio/src/gio_others.defs: Added g_themed_icon_get_names()
	because h2defs.py cannot seem to parse it.
	* gio/src/Makefile.am: Mention gio_methods.defs.
	* gio/src/themedicon.hg: Attempted to wrap get_names(), but I get a
	gmmproc error.

2008-02-20  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/desktopappinfo.hg: Removed a todo regarding
	DesktopAppInfoLookup. We will not wrap it as it is an interface
	that is used by backends.

2008-02-20  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/Makefile.am: updated some build dependencies that were
	causing issues after adding the xml/devhelp build rules.  Also removed some
	cruft that was supposedly setting the doxygen image path for gtk stock icons
	(presumably copied from the gtkmm build rules).  Should Fix Bug #517423

2008-02-20  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/appinfo.hg:
	* gio/src/bufferedinputstream.hg:
	* gio/src/drive.hg:
	* gio/src/file.hg:
	* gio/src/filemonitor.hg:
	* gio/src/icon.hg:
	* gio/src/seekable.hg:
	* gio/src/volume.hg:
	* gio/src/volumemonitor.hg: Comment out _WRAP_VFUNC() lines because
	we decided that they are not useful (people will not create new
	implementations with giomm) and are a potential source of errors.

2008-02-20  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/convert_gio.m4:
	* gio/src/file.hg: equal(), get_relative_file(), contains_file(): Take
	const File parameters.

2008-02-15  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/Makefile.am: I should have tested this more thoroughly --
	we apparently need to use relative paths in the reference_prefix variable.
	Also add the devhelp file to the all-local target so it gets built by
	default on a simple 'make' and not just on 'make install'

2008-02-15  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/Makefile.am: install the stylesheet in the gmmproc dir
	instead of the documentation directory.  This allows other libraries to get
	a path to the stylesheet by querying the just-added gmmprocdir variable.
	Also, it doesn't really belong in the documentation directory since it's not
	technically documentation.

2008-02-15  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/doxygen_to_devhelp.xsl: make this more general instead of
	hard-coding the name and title and reference path into the stylesheet --
	instead pass them as parameters on the commandline
	* docs/reference/Makefile.am: use new GMMPROC_DIR variable.  Also install
	the doxygen_to_devhelp.xsl stylesheet so that other libraries can use the
	installed version instead of having everybody copy the file into their own
	library if they want to generate a devhelp book

2008-02-15  Jonathon Jongsma  <jjongsma@gnome.org>

	* configure.in: add a GMMPROC_DIR variable so the individual
	Makefile.am files don't need to duplicate the information about where
	gmmproc is to be installed
	* glib/glibmm-2.4.pc.in: add new gmmprocdir variable so that interested
	libraries can query it with `pkg-config --variable gmmprocdir glibmm-2.4`
	* tools/Makefile.am:
	* tools/m4/Makefile.am:
	* tools/pm/Makefile.am: use the new GMMPROC_DIR variable

2008-02-14  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/dataoutputstream.hg: Removed get/set_newline_type(),
	which doesn't exist in the C API.

2008-02-13  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/Doxyfile.in:
	* docs/reference/Makefile.am:
	* docs/reference/doxygen_to_devhelp.xsl: generate and install a devhelp book
	for glibmm like we do for gtkmm.  It would be nice to make the xsl
	stylesheet general and shared between gtkmm and glibmm (and eventually other
	libraries as well), but for now I just duplicated it here

2008-02-12  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/gio_methods.defs: Regenerated with h2defs.py.

	* gio/src/unixinputstream.hg:
	* gio/src/unixoutputstream.hg: Made wrapped constructors protected.

	* gio/src/bufferedinputstream.hg:
	* gio/src/datainputstream.hg:
	* gio/src/dataoutputstream.hg: Ditto for Data*Streams,
	and marked some hand-wrapped functions to ignore.

	* gio/src/mountoperation.hg: Wrote a note about ask_question signal,
	still to be wrapped.

	* gio/src/volume.hg: Added should_automount().

	* gio/giomm: Updated svn:ignore properties.

2.15.5:

2008-02-11  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/file.ccg:
	* gio/src/file.hg:
	* gio/src/gio_enums.defs:
	* gio/src/gio_vfuncs.defs:
	* gio/src/mount.ccg:
	* gio/src/mount.hg:
	* gio/src/volume.ccg:
	* gio/src/volume.hg:
	* tools/m4/convert_gio.m4: update to match new gio API which adds a
	GMountMountFlags argument to all mount operations

2008-02-11  Jonathon Jongsma  <jjongsma@gnome.org>

	* configure.in: bump glib requirement to 2.15.5 (bug #515727)

2008-02-09  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_vfuncs.defs: Added hand-written vfunc .defs for
	GVolume and GVolumeMonitor.
	* gio/src/volume.hg:
	* gio/src/volumemonitor.hg: Added vfuncs, though not using all C++ types
	yet. I am not really sure that these will ever be useful (if anyone will
	ever want to implement them in C++).

2008-02-09  Murray Cumming, <murrayc@murrayc.com>

	* gio/giomm.h:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/simpleasyncresult.ccg:
	* gio/src/simpleasyncresult.hg: removed SimpleAsyncResult because I
	do not believe it is really public API. If we are wrong then we
	can resurrect it from svn later.

2008-02-09  Takao Fujiwara  <Takao.Fujiwara@Sun.COM>

	* glib/glibmm/Makefile.am:
	* glib/glibmm/i18n-lib.h: Actually install this header,
	and make the header guards unique.
	Bug #515133

2.15.4:

2008-02-07  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/Makefile.am:
	* glib/glibmm/main.h: Moved the Priorities enum into
	* glib/glibmm/priorities.h:
	Though all the giomm stuff seems to already include main.h anyway.
	It probably shouldn't, and then we can include priorities.h only.

	* gio/src/bufferedinputstream.hg:
	* gio/src/file.hg:
	* gio/src/fileenumerator.hg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/gio_methods.defs:
	* gio/src/inputstream.hg:
	* gio/src/outputstream.hg: Use Glib::PRIORITY_DEFAULT instead of
	G_PRIORITY_DEFAULT.

	* glib/src/iochannel.ccg: Add some ifdefs to avoid unused parameter
	warnings when exceptions are disabled, because our current trick for
	that is now causing another warning instead.

2008-02-06  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/datainputstream.ccg:
	* gio/src/datainputstream.hg: change the read_line() and read_until() APIs
	so that they are actually useable.  These functions now return a boolean
	value to indicate that the end of the stream was reached and return the
	string data via reference argument.  See bug #514097 for more information

2008-02-06  Murray Cumming <murrayc@murrayc.com>

	* gio/src/gio_methods.defs: Regenerated with h2defs.py

	* configure.in: Depend on gio-unix-2.0 when not on win32.
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/unixinputstream.ccg:
	* gio/src/unixinputstream.hg:
	* gio/src/unixoutputstream.ccg: Mentioned this as unix-specific files
	so they are built.

	* gio/src/bufferedoutputstream.hg: Fixed a parameter type to fix the
	build, after a change in gio.

2008-02-05  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: Added an overload of query_default_handler()
	without the cancellable.

2008-02-05  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/vfs.ccg:
	* gio/src/vfs.hg: Remove these because they are not API - they
	are declarations of entry points for dynamically-loadable modules.

2008-02-04  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: Added copy_async(), with overloads without
	slot_progress (which is optional and would run in the main loop),
	with documentation. Wrapped copy_finish(), query_default_handler().

2008-02-04  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/desktopappinfo.ccg:
	* gio/src/desktopappinfo.hg: Added DesktopAppInfo but not to
	Makefile_list_of_hg.am_fragment yet (need to use gio-unix-2.0.pc to
	compile correctly)

2008-02-04  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/bufferedoutputstream.ccg: Changed size param of
	create_sized() to type gsize (in agreement with declaration) to fix
	compilation

2008-02-04  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/class_interface.m4: Allow _CLASS_INTERFACE() to take two
	extra optional paremeters to specify the base class, so that appropriate
	code is generated when we derive from another Interface - which seems
	appropriate when the GInterface has a prerequisite.
	* gio/src/loadableicon.ccg:
	* gio/src/loadableicon.hg: Derive from Icon, because it is a prerequisite
	of this interface. Use the extra _CLASS_INTERFACE() parameters.
	* gio/src/fileicon.hg: Do not derive from Icon because that happens
	through LoadableIcon now. But do use _IMPLEMENTS_INTERFACE(Icon) here,
	because only a Glib::Object can actually implement an interface.

2008-02-04  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/file.hg: remove an obsolete TODO
	* gio/src/gio_vfuncs.defs: add LoadableIcon vfunc definitions
	* gio/src/loadableicon.ccg:
	* gio/src/loadableicon.hg: wrap some methods of LoadableIcon.  Some vfuncs
	need to be wrapped yet

2008-02-04  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/bufferedoutputstream.hg: switch back create_sized() size parameter
	to gsize since glib switched their declaration due to bug #514013.

2008-02-03  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/unixinputstream.ccg:
	* gio/src/unixinputstream.hg:
	* gio/src/unixmount.ccg:
	* gio/src/unixmount.hg:
	* gio/src/unixoutputstream.ccg:
	* gio/src/unixoutputstream.hg: Added these, but not to
	Makefile_list_of_hg.am_fragment to avoid compile errors (need
	gio-unix-2.0.pc to compile correctly)
	* gio/src/vfs.hg: Moved forward decs to top (was between class doc and
	declaration)

2008-02-03  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/vfs.ccg:
	* gio/src/vfs.hg:
	* tools/m4/convert_gio.m4: Added Vfs

2008-02-04  Murray Cumming  <murrayc@murrayc.com>

	* tools/extra_defs_gen/generate_defs_gio.cc: Added types.
	* gio/src/gio_signals.defs: Regenerated.
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/filenamecompleter.hg:
	* gio/src/themedicon.hg: Added FilenameCompleter and ThemedIcon.

2008-02-03  José Alburquerque  <jaalburqu@svn.gnome.org>

	* gio/src/bufferedoutputstream.ccg: changed size param of
	create_sized() to type guint (in agreement with declaration)
	* gio/src/file.ccg:
	* gio/src/file.hg: added non-cancellable set_attribute_string(),
	set_attribute_byte_string(), set_attribute_{uint32, int32, uint64,
	int64}

2008-02-03  Murray Cumming  <murrayc@murrayc.com>

	* tools/extra_defs_gen/generate_defs_gio.cc: Added types.
	* gio/src/gio_signals.defs: Regenerated.

	* tools/m4/convert_gio.m4:
	* gio/src/drive.hg:
	* gio/src/filterinputstream.hg:
	* gio/src/filteroutputstream.hg:
	* gio/src/mount.hg:
	* gio/src/mountoperation.hg:
	* gio/src/volume.hg:
	* gio/src/volumemonitor.hg: Added signals and properties.

	* gio/src/file.ccg:
	* gio/src/file.hg: Added query_filesystem_info() without a cancellable.

2008-02-03  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/filemonitor.hg: Add class documentation, now that there is
	some in gio.
	* gio/src/volumemonitor.hg: Add class documentation.
	Remove _DO_NOT_DERIVE_GTYPE because gio no longer abuses the type
	system - see bug #511814.

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm.h:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/memoryinputstream.ccg:
	* gio/src/memoryinputstream.hg: add MemoryInputStream class

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/dataoutputstream.ccg: fix copy/paste error

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/datainputstream.hg:
	* gio/src/dataoutputstream.hg: add DataOutputStream class
	* gio/src/dataoutputstream.ccg:
	* gio/src/enums.ccg:
	* gio/src/enums.hg: moved the DataStream enums to a common enums header
	since they're needed by both the input and output data streams.
	* gio/giomm.h: add new headers

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/bufferedoutputstream.ccg:
	* gio/src/bufferedoutputstream.hg: add BufferedOutputStream class

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm.h:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/filteroutputstream.ccg:
	* gio/src/filteroutputstream.hg:
	* tools/m4/convert_gio.m4: add FilterOutputStream class

2008-02-03  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: find_enclosing_mout(), append_to(): Reordered
	parameters and added overload without cancellable. Removed superfluous
	monitor_file() overload.

2008-02-03  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/convert_gio.m4:
	* gio/src/bufferedinputstream.hg: Move a signal-specific conversion
	here, because these conversions are unusual and shouldn't be used by
	mistake elsewhere, and when they are next to the signal then it is
	more obvious why they take a reference (also fixed).

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm.h: add new header files to the main include
	* gio/src/datainputstream.hg: add FIXME note about not being able to tell
	error conditions from empty strings on read_line() / read_until()

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm/Makefile.am: add slot_async.h private header to EXTRA_DIST so
	that it gets distributed.  I didn't add it to the
	sublib_files_extra_general_h variable, since then it would get installed

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/datainputstream.ccg:
	* gio/src/datainputstream.hg:
	* tools/m4/convert_gio.m4: add DataInputStream class

2008-02-02  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/gio_vfuncs.defs:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/bufferedinputstream.ccg:
	* gio/src/bufferedinputstream.hg: add BufferedInputStream class
	* gio/giomm/slot_async.cc:
	* gio/giomm/slot_async.h: split out the SlotProxy_async_callback so it
	doesn't have to be implemented in every file
	* gio/src/drive.ccg:
	* gio/src/file.ccg:
	* gio/src/file.hg:
	* gio/src/fileenumerator.ccg:
	* gio/src/fileinputstream.ccg:
	* gio/src/fileoutputstream.ccg:
	* gio/src/inputstream.ccg:
	* gio/src/mount.ccg:
	* gio/src/outputstream.ccg:
	* gio/src/volume.ccg: use the common SlotProxy_async_callback function in
	all of these files
	* tools/m4/convert_gio.m4: add conversion for Cancellable
	* gio/giomm/Makefile.am: indenting changes

2008-02-02  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/volumemonitor.hg: Removed VolumeMonitorEvent enum def,
	which does not exist any more in the C API.
	* gio/src/volume.hg: Added get_identifier(), enumerate_identifiers().

2008-02-02  Marko Anastasov  <marko@marko.anastasov.name>

	* gio/src/volume.hg: Added get_mount().
	* gio/src/gio_enums.defs: Regenerated with enums.pl.
	* gio/src/gio_methods.defs: Regenerated with h2defs.py.

2008-02-02  Kjartan Maraas  <kmaraas@gnome.org>

	* tests/giomm_simple/main.cc: Fix compile with GCC 4.3.

2008-02-02  Murray Cumming  <murrayc@murrayc.com>

	* build_shared/Makefile_gensrc.am_fragment: Use the local .pm files
	for gmmproc instead of installed ones. This was a regression that I
	introduced when I added gio to the build.
	* tools/pm/DocsParser.pm: append_parameter_docs(): Ignore error
	parameters because they are almost always wrapped as exceptions.

2008-02-01  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/Makefile.am:
	* gio/src/appinfo.hg:
	* gio/src/gio_vfuncs.defs:
	* tools/m4/convert_gio.m4:
	* tools/m4/convert_glib.m4: Add Gio::AppInfo vfuncs

2008-02-02  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: Added overloads of create_file(), remove(), trash(),
	make_directory(), make_symbolic_link(), query_settable_attributes(),
	and query_writable_namespaces() without cancellable parameters.
	The set_attribute_*() methods still need this to be done.

2008-02-02  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/cancellable.hg: Added the signal.
	* gio/src/file.ccg:
	* gio/src/file.hg: Added copy_attributes(), added mount_enclosing_volume()
	mount_enclosing_volume_finish(), find_enclosing_mount(), and
	find_enclosing_mount_finish().
	Added a mount_mountable() overload with no parameters.
	set_attributes_from_info(): Reordered parameters so we can have default
	values.

2008-02-02  Murray Cumming  <murrayc@murrayc.com>

	* gio/giomm/contenttype.cc:
	* gio/giomm/contenttype.h: Use convert_return_gchar_ptr_to_ustring()
	because it releases the gchar* and checks for NULL.
	Removed the ontent_type_guess() that takes a basic_string<guchar>
	because I doubt anybody would use that. Added one that takes a
	gchar* and size, and one that takes a std::string (for when the data is
	a string).

2008-01-31  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm/contenttype.cc: put content_type functions in the Gio namespace
	which was accidentally omitted.

2008-01-31  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm.h: forgot to add new contenttype.h header
	* gio/giomm/Makefile.am: forgot to install contenttype.h header

2008-01-31  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm/Makefile.am:
	* gio/giomm/contenttype.cc:
	* gio/giomm/contenttype.h: wrap content_type_* functions

2008-01-29  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg: get_child_for_display_name():
	Change the display_name parameter to a ustring because
	the C documentation says it should be UTF-8.
	* gio/src/fileinfo.hg: Add get_attribute_as_string(), which
	returns a UTF-8 string.
 	(Note that no other gio documentation mentions UTF-8.)
	Thanks to Iain Nicol.

2.15.3:

2008-01-27  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/fileattribute.ccg:
	* gio/src/fileattribute.hg: Split into
	* gio/src/fileattributeinfo.ccg:
	* gio/src/fileattributeinfo.hg: and
	* gio/src/fileattributeinfolist.ccg:
	* gio/src/fileattributeinfolist.hg

	* gio/giomm.h:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/file.hg:
	* gio/src/fileinfo.hg:
	* gio/src/outputstream.hg:
	* gio/src/seekable.hg:
	* glib/src/optionentry.hg: Adapted.

	* tools/pm/DocsParser.pm: substitute_identifiers():
	Tried (unsuccessfully) to remove G:: prefixes in generated documentation.

2008-01-27  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/appinfo.hg:
	* gio/src/asyncresult.hg:
	* gio/src/cancellable.hg:
	* gio/src/drive.hg:
	* gio/src/error.hg:
	* gio/src/file.hg:
	* gio/src/fileattribute.hg:
	* gio/src/fileenumerator.hg:
	* gio/src/fileicon.hg:
	* gio/src/fileinfo.hg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/filterinputstream.hg:
	* gio/src/icon.hg:
	* gio/src/inputstream.hg:
	* gio/src/loadableicon.hg:
	* gio/src/mount.hg:
	* gio/src/mountoperation.hg:
	* gio/src/outputstream.hg:
	* gio/src/seekable.hg:
	* gio/src/simpleasyncresult.hg:
	* gio/src/volume.hg: Do not include gio.h from our public headers, to
	avoid polluting the namespace.

2008-01-27  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/appinfo.ccg:
	* gio/src/appinfo.hg: Make equal() non virtual - equal_vfunc() is instead.
	* gio/src/file.ccg:
	* gio/src/file.hg: Make equal() non virtual - equal_vfunc() is instead.
	replace_contents(), replace_contents_async(), replace_contents_finish():
	Reordered parameters to allow default values, and added method overloads.

2008-01-25  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/convert_gio.m4:
	* gio/src/filterinputstream.hg: Added the _CLASS_* macro so this type
	is really wrapped.

2008-01-25  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/class_shared.m4: Added _DO_NOT_DERIVE_GTYPE for use in .hg
	files when we do not want to derive a new GType, meaning of course that
	we cannot have default signal handlers or vfuncs.
	* gio/src/volumemonitor.hg: Use _DO_NOT_DERIVE_GTYPE, because
	gio tries to call every type that derives from G_TYPE_VOLUME_MONITOR,
	which seems unwise to me - bug #511814.
	This makes gtkmm-documentation/examples/book/volumes not crash.

2008-01-24  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/giomm.h: add missing headers to the main include header

2008-01-23  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/error.hg: Renamed Gio::IOError to
	Gio::Error.
	* gio/src/fileenumerator.ccg:
	* gio/src/fileenumerator.hg: Added method overloads of close() and
	next_file() without the cancellable parameter.

2008-01-23  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/error.ccg:
	* gio/src/error.hg: Wrapped GIOErrorEnum as Gio::Error exception.
	(This is registered in wrap_init()), so that the correct exception
	is thrown.
	* gio/giomm.h: Include error.h

2008-01-23  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: Added a read() method overload with no
	cancellable parameter.
	* tests/giomm_simple/main.cc: Try loading the contents of a file.
	Seems to work, though there is an unknown GError domain when the file
	does not exist.

2.15.2:

2008-01-21  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/gio_methods.defs: Regenerated.
	* gio/src/file.ccg:
	* gio/src/file.hg:
	* gio/src/fileinputstream.ccg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.ccg:
	* gio/src/fileoutputstream.hg: More overloads, parameter reordering,
	and documentation.

2008-01-21  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/inputstream.ccg:
	* gio/src/inputstream.hg: Added method overloads and documentation.

2008-01-20  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/fileinputstream.ccg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.ccg:
	* gio/src/fileoutputstream.hg: Ignore functions that are just
	duplicates of the ones in Seekable, and mention Seekable more in
	the documentation.
	* gio/src/seekable.hg: Expand the class documentation.
	* gio/src/outputstream.ccg:
	* gio/src/outputstream.hg: Added method overloads and documentation.

2008-01-20  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/objectbase.cc:
	* glib/glibmm/objectbase.h: Added connect_property_changed_with_return()
	because connect_property_changed() does not return a sigc::connection.
	Bug #433984 (Philip Langdale, Kalle Vahlman).

2008-01-20  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/checksum.ccg:
	* glib/src/checksum.hg: Added class documentation. Corrected constructor
	documentation and added operator bool() to check for a failure in the
	constructor.

2008-01-20  Marko Anastasov  <marko@marko.anastasov.name>

	* tools/enum.pl: Handle possible parenthesis when matching enum
	values declared as shifted ones. Bug #498621.

2008-01-20  Naveen Verma  <ernaveenverma@gmail.com>

	* glib/src/checksum.[hg|ccg]:
	* glib/src/Makefile_list_of_hg.am_fragment:
	Added Checksum, wrapping GChecksum Bug #510235.

2008-01-20  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/inputstream.hg: Ignore g_input_stream_clear_pending() as well as
	the other implementation functions.
	* gio/src/outputstream.hg: Ignore the equivalent functions here,
	assuming that they are also only for implementations.

2008-01-20  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/fileinfo.hg: FileAttributeMatcher::create(): Add a default
	value and documentation.
	* gio/src/file.ccg:
	* gio/src/file.hg:
	* gio/src/mount.ccg:
	* gio/src/mount.hg: const corrections for Slot* and Cancellable
	parameters.

2008-01-20  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg:
	* gio/src/file.ccg: enumerate_children(), enumerate_children_async(),
	query_info(), query_info_async(), query_exists(): Reorder parameters to
	add default values, add documentation, make const.

2008-01-18  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/mount.ccg:
	* gio/src/mount.hg: Added unmount(), remount(), and
	eject(), based on code from José Alburquerque in bug #510080.
	* gio/src/volume.hg: Added documentation.

2008-01-18  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/drive.ccg:
	* gio/src/drive.hg: poll_for_media(): Added documentation.
	Wrapped 2 vfuncs (though the .defs still need to be written).
	* gio/src/file.ccg:
	* gio/src/file.hg: move(), copy(), replace(): Rearranged the parameters so we
	can have default values, and added some documentation.
	set_display_name(), set_display_name_async(): Take a ustring instead
	of a std::string. Added documentation.

	* gio/src/fileattribute.ccg:
	* gio/src/fileattribute.hg: Added FileAttributeInfoList::add().
	Added FileAttributeInfoList::empty().

	* tools/m4/convert_gio.m4:
	* gio/src/appinfo.hg:
	* gio/src/fileenumerator.hg: Move the ListHandle conversions to the
	.hg files because the ownership is specific to each use.

2008-01-18  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/drive.hg:
	* gio/src/volumemonitor.hg: Wrapped functions that reurn GLists.

2008-01-18  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/appinfo.hg:
	* gio/src/icon.hg: Removed operator= and operator!= for these RefPtr<>
	specializations, because they are unobvious and conflict with the generic
	ones.

2008-01-17  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/inputstream.ccg:
	* gio/src/inputstream.hg: Fixed const-ness of Cancellables.
	* gio/src/fileinputstream.ccg:
	* gio/src/fileinputstream.ccg:
	* gio/src/fileoutputstream.ccg:
	* gio/src/fileoutputstream.hg: Added an overload of query_info_async(),
	* gio/src/outputstream.ccg:
	* gio/src/outputstream.hg: write_async(), splice_async() without
	the Cancellable.

	Patch from José Alburquerque, bug #510080.

2008-01-17  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg:
	* gio/src/drive.ccg:
	* gio/src/drive.hg: eject(),
	* gio/src/volume.ccg:
	* gio/src/volume.hg: eject(),
	* tools/m4/convert_gio.m4: Wrapped GMountUnmountFlags enum as
	MountUnmountFlags, and used it.

	* gio/src/file.ccg:
	* gio/src/file.hg: unmount_mountable(), eject(): Reorder the
	parameters and add a default flag value.

2008-01-17  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/filterinputstream.ccg:
	* gio/src/filterinputstream.hg:
	* gio/src/Makefile_list_of_hg.am_fragment: Added FilterInputStream.

	Updated svn:ignore properties.

2008-01-16  Murray Cumming  <murrayc@murrayc.com>

	* tools/extra_defs_gen/generate_defs_gio.cc: Added Mount and
	VolumeMonitor.
	* gio/src/gio_signals.defs: Regenerated.

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/mount.ccg:
	* gio/src/mount.hg: Added Mount
	* gio/src/volumemonitor.hg:
	* gio/src/volumemonitor.ccg: Added VolumeMonitor.

	* tools/m4/convert_gio.m4: Added necessary conversions.

2008-01-16  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* tools/m4/convert_gio.m4:
	* gio/src/filemonitor.hg:
	* gio/src/filemonitor.hg: Added FileMonitor.
	* gio/src/file.hg: Tried to wrap monitor_file() and
	monitor_directory but there is a problem with the GError in
	the generated code.

	* tools/extra_defs_gen/generate_defs_gio.cc: Added GFileMonitor.

2008-01-16  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/seekable.ccg:
	* gio/src/seekable.hg: Added methods and vfuncs (though the .defs
	do not exist for the vfuncs yet.)

2008-01-16  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.hg: Added query_file_exists().
	* glib/src/uriutils.hg:uri_unescape_string(), uri_escape_string():
	Change the illegal_characters and reserved_chars_allowed parameters
	to std::string, because they may not be UTF-8
	See bug #508773.

2008-01-15  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/drive.ccg:
	* gio/src/drive.hg:  eject(), poll_for_media()
	* gio/src/volume.ccg:
	* gio/src/volume.hg: mount(), eject():
	Add method overloads that take no slot.

	* glib/src/uriutils.hg: Fix a typo to fix the build.

2008-01-15  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/uriutils.hg: Improved the documentation for uri_unescape_string(),
	based on the improved C documentation.

2008-01-15  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/drive.ccg:
	* gio/src/drive.hg:
	* gio/src/file.ccg:
	* gio/src/file.hg:
	* gio/src/fileenumerator.ccg:
	* gio/src/fileenumerator.hg:
	* gio/src/fileinputstream.ccg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.ccg:
	* gio/src/fileoutputstream.hg:
	* gio/src/inputstream.ccg:
	* gio/src/inputstream.hg:
	* gio/src/outputstream.ccg:
	* gio/src/outputstream.hg:
	* gio/src/volume.ccg:
	* gio/src/volume.hg: *_async() functions: Rearrange the parameters,
	so the (optional) cancellable is always after the slot,
	and so flags and io_priority are always at the end, so they can have
	default values.

2008-01-15  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/Makefile_list_of_sources.am_fragment:
	* tools/m4/convert_gio.m4:
	* tools/m4/convert_glib.m4:
	* tools/m4/convert_gtkmm.m4: Moved the gio conversions into
	their own .m4 file, to make it easier to find them.

	* gio/src/cancellable.ccg:
	* gio/src/cancellable.hg: Use _WRAP_METHOD() for get_current(),
	which also fixes the refcounting.
	* glib/src/uriutils.hg: Added documentation and default parameter
	values.

2.15.1:

2008-01-12  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm.h: Added uriutils.h
	* glib/glibmm/private/Makefile.am: Renamed some variables to
	avoid clashes with the build_shared/ variables, which caused
	a dist failure involving wrap_init.h

2008-01-11  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/appinfo.hg: Added class documentation.
	* gio/src/asyncresult.hg:
	* gio/src/cancellable.hg:
	* gio/src/drive.hg:
	* gio/src/file.hg:
	* gio/src/fileattribute.hg:
	* gio/src/fileenumerator.hg:
	* gio/src/fileicon.hg:
	* gio/src/fileinfo.hg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/icon.hg:
	* gio/src/inputstream.hg:
	* gio/src/loadableicon.hg:
	* gio/src/mountoperation.hg:
	* gio/src/outputstream.hg:
	* gio/src/seekable.hg:
	* gio/src/simpleasyncresult.hg:
	* gio/src/volume.hg: Added @newin2p16 to
	the documentation.

	* glib/src/Makefile_list_of_hg.am_fragment:
	* glib/src/uriutils.ccg:
	* glib/src/uriutils.hg: Added wrappers of (some) of
	these new g_uri_* functions. Not yet documented.

2008-01-11  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: Rename create() to create_file(),
	create_async() to create_file_async() and
	create_finish() to create_file_finish() to slightly
	reduce confusion with the static create*() methods.

2008-01-11  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/seekable.ccg:
	* gio/src/seekable.hg: Added the Seekable interface, though it
	has not methods yet.
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg: Derive/implement Seekable.
	* gio/src/icon.hg:
	* gio/src/inputstream.hg:
	* gio/src/loadableicon.hg:
	* gio/src/mountoperation.hg:
	* gio/src/outputstream.hg:
	* gio/src/simpleasyncresult.hg:
	* gio/src/volume.hg: Added class documentation, based on the C
	documentation.

2008-01-10  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/appinfo.ccg:
	* gio/src/appinfo.hg: Wrapped AppInfo and AppLaunchContext, without
	the vfuncs.
	* tools/m4/convert_glib.m4: New conversions.
	The previous comment on build was not valid.

2008-01-10  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/appinfo.ccg:
	* gio/src/appinfo.hg:
	* gio/src/Makefile_list_of_hg.am_fragment:
	Added AppInfo, with only two methods before we see why it
	doesn't get included in the build.

2008-01-10  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/drive.hg:
	* gio/src/drive.ccg: Added poll_for_media, poll_for_media_finish.
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/inputstream.hg:
	* gio/src/volume.hg: Modified *_finish functions to take a const
	AsyncResult.

2008-01-10  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/drive.hg: Added missing capability checking functions.
	* gio/giomm: Updated svn:ignore properties.

2008-01-10  Jonathon Jongsma  <jjongsma@gnome.org>

	* gio/src/mountoperation.hg: api change in reply() virtual function and
	addition of MountOperationResult enumeration
	* tools/m4/convert_glib.m4: add MountOperationResult enum conversion
	* gio/src/gio_enums.defs: re-generate enums
	* gio/src/gio_methods.defs: re-generate methods

2008-01-10  Murray Cumming  <murrayc@murrayc.com>

	* Makefile.am:
	* build_shared/Makefile_build.am_fragment:
	* build_shared/Makefile_build_extra.am_fragment:
	* build_shared/Makefile_build_gensrc.am_fragment:
	* build_shared/Makefile_gensrc.am_fragment:
	* build_shared/Makefile_gensrc_platform.am_fragment:
	Copy (and very slightly adjust) the build_shared/ files from
	gtkmm, which has had multiple sub-libraries for a long time.
	* gio/giomm/Makefile.am:
	* gio/src/Makefile.am:
	* gio/src/Makefile_list_of_hg.am_fragment:
	* glib/glibmm/Makefile.am:
	* glib/glibmm/private/Makefile.am:
	* glib/src/Makefile.am:
	* glib/src/Makefile_list_of_hg.am_fragment:
	Adapt to the structure (variable names, mostly) needed by the
	newer build_shared/ files, so that the giomm library is actually
	built.

	* tools/m4/convert_glib.m4:
	* gio/giomm/init.cc:
	* gio/giomm/init.h:
	* gio/src/asyncresult.ccg:
	* gio/src/drive.ccg:
	* gio/src/drive.hg:
	* gio/src/file.ccg:
	* gio/src/file.hg:
	* gio/src/fileattribute.ccg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/volume.ccg:
	* gio/src/volume.hg: Various build fixes, including adding a flags
	parameter to unmount and eject methods.

2008-01-10  Murray Cumming  <murrayc@murrayc.com>

	* gio/giomm.h: Correct an include.
	* gio/src/asyncresult.hg:
	* gio/src/cancellable.hg:
	* gio/src/drive.hg:
	* gio/src/file.hg:
	* gio/src/fileattribute.hg:
	* gio/src/fileenumerator.hg:
	* gio/src/fileicon.hg:
	* gio/src/fileinfo.hg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/outputstream.hg:
	* gio/src/simpleasyncresult.hg:
	* gio/src/volume.ccg:
	* gio/src/volume.hg: Correct several includes to use giomm/ instead of
	glibmm/.

	* configure.in:
	* examples/Makefile.am_fragment:
	* tests/Makefile.am_fragment: Include/Link giomm too.

	* tests/Makefile.am:
	* tests/giomm_simple/Makefile.am:
	* tests/giomm_simple/giomm_simple.cc:
	Added a little test, which shows that the library is not being built
	properly - we get undefined symbols.

2008-01-10  Murray Cumming  <murrayc@murrayc.com>

	* tools/extra_defs_gen/generate_defs_gio.cc: Added some types used so
	far. There are probably more that should be added here.
	* tools/extra_defs_gen/generate_extra_defs.cc: get_properties():
	Added warnings and a check to avoid a crash when
	g_object_interface_list_properties() returns a NULL paramspec, but a
	non-null properties count, as is happening with GVolume.
	* gio/src/gio_signals.defs: Generated this from generate_defs_gio.

2008-01-09  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/Makefile_list_of_hg.am_fragment:
	* gio/src/loadableicon.ccg:
	* gio/src/loadableicon.hg: Added this, though no methods or vfuncs are
	wrapped yet.
	* tools/m4/convert_glib.m4:
	* gio/src/fileicon.hg:
	* gio/src/fileinfo.hg: Derive from LoadableIcon and implement it.
	set_modification_time(): Take a const TimeVal.
	* gio/src/fileinputstream.ccg:
	* gio/src/fileinputstream.hg: Added documentation and a version of
	seek() without the cancellable parameter.
	* gio/src/gio_docs.xml: Generated from docextract_to_xml.py so we get
	documentation for methods created by _WRAP_METHOD().

2008-01-09  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/file.ccg:
	* gio/src/file.hg: Added method documentation for most *_async methods.
	See also GTK+ bug #508297.
	Removed one superfluous load_partial_contents_async() method overload.
	* gio/src/fileenumerator.hg: Corrected documentation for close_async().

2008-01-08  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Uncomment GTKMM_DOXYGEN_INPUT_SUBDIRS to fix the
	reference documentation build (no idea when this happened) and add
	gio to the list of directories.

	* glib/src/optioncontext.ccg:
	* glib/src/optioncontext.hg: Added get_help().

	* gio/src/gio_enums.defs: Regenerated with enums.pl
	* gio/src/gio_methods.defs: Regenerated with h2defs.py.

	* tools/m4/convert_glib.m4:
	* gio/src/fileattribute.hg: Renamed FileAttributeFlags to
	FileAttributeInfoFlags, as it is in gio.

	* gio/src/fileenumerator.hg:
	* gio/src/asyncresult.hg:
	* gio/src/cancellable.hg:
	* gio/src/drive.hg:
	* gio/src/file.hg: Added class documentation, and some method
	documentation, based on the C documentation.
	Many giomm classes still need documentation.

2008-01-08  Murray Cumming  <murrayc@murrayc.com>

	* gio/src/asyncresult.hg:
	* gio/src/cancellable.hg:
	* gio/src/fileattribute.hg:
	* gio/src/fileenumerator.hg:
	* gio/src/fileinputstream.hg:
	* gio/src/fileoutputstream.hg:
	* gio/src/icon.hg:
	* gio/src/inputstream.hg:
	* gio/src/mountoperation.hg:
	* gio/src/outputstream.hg:
	* gio/src/simpleasyncresult.hg:
	Made some whitespace more consistent with the rest of glibmm.
	In particular, white space alignment in .hg files will often be even worse
	when seen in the generated .h files.

	* gio/src/drive.hg: get_icon(),
	* gio/src/file.hg: read(),
	* gio/src/fileicon.hg: get_file(),
	* gio/src/fileinfo.hg: get_icon(),
	* gio/src/volume.hg: get_drive(), get_icon():
	For the const versions, actually return a const RefPtr.

2.15.0:

2007-12-28  Marko Anastasov  <marko.anastasov@gmail.com>

	* tools/extra_defs_gen/generate_defs_gio.cc:
	* tools/extra_defs_gen/Makefile.am: Build a separate extra defs
	generating program for gio. Currently the program would crash
	with get_defs() calls with gio types.
	* configure.in: Define GIOMM_CFLAGS and GIOMM_LIBS.

2007-12-28  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/gio_enums.defs:
	* gio/src/gio_methods.defs: Regenerated with enums.pl and h2defs.py.

2007-12-28  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/src/icon.ccg:
	* gio/src/icon.hg:
	* gio/src/inputstream.ccg:
	* gio/src/inputstream.hg:
	* gio/src/Makefile_list_of_hg.am_fragment: Added files missing from
	the import.

	Set svn:ignore properties for gio.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Mention the new gio/giommconfig.h in AM_CONFIG_HEADER().
	* gio/Makefile.am: Change references to the giomm-2.0.pc to giomm-2.4.pc.
	* gio/src/Makefile_list_of_hg.am_fragment: Remove icon.hg and inputstream.hg
	because they do not exist in svn.
	* gio/src/outputstream.hg: Comment out set_pending() because gmmproc complains
	about the wrong number of parameters.

	This fixes the build, though I don't know yet if everything is working properly.

2007-12-28  Marko Anastasov  <marko.anastasov@gmail.com>

	* configure.in: Fixed typo.

2007-12-28  Marko Anastasov  <marko.anastasov@gmail.com>

	* gio/*:
	* configure.in:
	* Makefile.am:
	* tools/m4/convert_glib.m4: Checked in sources from giomm. Build
	needs to be fixed to work with scripts in build_shared/.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/ustring.h: Added @newin2p16 to compose() and format()
	documentation.
	* glib/src/keyfile.ccg:
	* glib/src/keyfile.hg: set_double_list(): Make the ArrayHandle argument const.
	This could not have been used before.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/keyfile.hg: Add class documentation from the glibmm-2-14 branch.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/class_gobject.m4:
	* tools/m4/ctor.m4:
	_INITIALLY_UNOWNED_SINK: Rename from INITIALLY_UNOWNED_SINK,
	for consistency, because this could be used directly from .ccg files
	that use _CONSTRUCT().
	Remove the debug code for the else case.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/class_gobject.m4:
	* tools/m4/ctor.m4:
	Added the _DERIVES_INITIALLY_UNOWNED macro, for use
	after _CLASS_GOBJECT(), if the C type derives
	from GInitiallyUnowned rather than just GObject.
	(Not for use with GtkObject-derived classes).
	This does g_object_ref_sink() so that we get a normally-behaved
	GObject.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* scripts/c_std.m4: Added this, to fix the build. I forgot to
	add this when merging the change from glibmm-2-14 on 2007-10-22.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/refptr.h: Use @newin2p16 in the reset() documentation.

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/refptr.h: Deprecate clear(), replacing it with
	reset(), because people often do treemodel.clear() when they
	mean treemodel->clear(). reset() is consistent with std::auto_ptr<>.

2007-12-28  Daniel Elstner  <danielk@openismus.com>

	* tools/pm/Output.pm (output_wrap_property): Refuse to generate
	a wrapper for a construct-only property which is also write-only,
	and display an error message accordingly. (#436789)

2007-12-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/error.cc:
	* glib/glibmm/exception.cc:
	* glib/src/convert.ccg:
	* glib/src/date.ccg: Include glib.h instead of gmessages.h or
	gtestutils.h so this builds with all versions of glib.

2007-12-17  Marko Anastasov  <marko.anastasov@gmail.com>

	* glib/glibmm/exception.cc:
	* glib/glibmm/error.cc:
	* glib/src/date.ccg:
	* glib/src/convert.ccg: Include gtestutils.h instead of gmessages.h
	for g_assert* adapting to glib head.

2007-11-20  Sebastien Bacher  <seb128@ubuntu.com>

	* glib/glibmm/object.cc: fix build issue when using gcc4.3 (#498438)

2007-10-22  Murray Cumming  <murrayc@murrayc.com>

	* Merged this change from 2007-03-03 from the glibmm-2-12 branch, which was
	missing from this branch:
	* configure.in:
	* glib/glibmmconfig.h.in:
	* glib/src/date.ccg:
	* glib/src/date.hg:
	* scripts/Makefile.am:
	* scripts/c_std.m4: Added a test for the case that time_t is equivalent to
	guint32, as seems to be the case on NetBSD-4.99.6/amd64, so we can ifdef-out
	the (deprecated, anyway) Glib::Date::set_time(GTime) method when necessary, because
	GTime is also equivalent to guint32.
	Bug #386990.

2007-10-12  Armin Burgmeier  <armin@openismus.com>

	* tools/m4/base.m4: Added a new section called SECTION_HEADER_FIRST
	that within the header file that is before any generated code (apart
	from the include guards) and a _CONFIGINCLUDE macro that includes a
	file within this section. This is intended to be used with
	g*mmconfig.h so the *_DISABLE_DEPRECATED define is set for deprecated
	classes also when included from other code.

2007-10-05  Philipp Kerling <philipp@gmail.com>

	* tools/extra_defs_gen/generate_extra_defs.cc:
	Also create defs for interfaces, by refing and unrefing them
	temporarily.

2007-09-29  Rémi Cardona  <remi@gentoo.org>

	* configure.in:
	increase the minimum glib requirements.
	Bug #481566.

2007-10-02  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/wrap.cc:
	* glib/glibmm/wrap.h: Replaced wrap_create_new_wrapper()
	(introduced by the last commit) with wrap_create_new_wrapper(),
	allowing us to check that the parent GType actually implements
	the interface. This allows us to return a parent known type
	if it implements the wanted interface.

2007-09-25  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/wrap.cc:
	* glib/glibmm/wrap.h: Added wrap_auto_interface<>(), which should
	be used by wrap() specializations for interfaces, so we create
	instances of the interface even if the derived C type is unknown to
	us.
	* glib/glibmm/signalproxy_connectionnode.h: Do not wrap.h from here
	unnecessarily, to allow us to include objectbase.h in wrap.h,
	needed by the new templated method.
	* tools/m4/class_interface.m4: Use wrap_auto_interface<>()
	instead of wrap_auto() for interfaces.

2007-09-06  Daniel Elstner  <danielk@openismus.com>

	* glib/src/regex.{ccg,hg} (Regex): Some cosmetic cleanup.  Also
	replace C-style casts in default argument values with static_cast<>.
	(escape_string): Wrap missing function.
	(match_full): Rename to and add as overloads of match().
	(match_all_full): Rename to and add as overloads of match_all().
	(split_full): Rename to and add as overloads of split().

2007-09-03  Daniel Elstner  <danielk@openismus.com>

	* glib/glibmm/ustring.cc (ustring::FormatStream::FormatStream): Use
	the global C++ locale instead of forcing the environment's locale
	onto the formatting stream.  This lifts an unnecessary restriction
	at the cost of requiring users to call std::locale::global().
	* glib/glibmm/ustring.h (ustring): Advertise the new compose and
	format API in the class documentation.
	(ustring::format): Correct a couple of cut'n'paste mistakes -- ouch.
	Also add two more overloads so that format() now takes up to eight
	arguments.  Extent the method documentation, too.
	(ustring::Stringify): Explicitly declare the class as noncopyable.
	(ustring::compose): Qualify calls to method ustring::compose_argv()
	in order to avoid surprising name lookup results in the context of
	the template instantiation.

	* docs/reference/Doxyfile.in (PREDEFINED): Add GLIBMM_HAVE_WIDESTREAM
	so that the wide stream I/O operators show up in the documentation.

2007-08-16  Jonathon Jongsma  <jjongsma@gnome.org>

	* docs/reference/glibmm_footer.html_fragment,
	docs/reference/glibmm_header.html_fragment: added <div> to doxygen header
	and footer to make it easier to integrate with library.gnome.org, per a
	request by Frederic Peters

2007-08-15  Daniel Elstner  <danielk@openismus.com>

	* glib/glibmm/ustring.{cc,h} (ustring::compose_argv): Rename
	"format" argument to "fmt" to avoid name clashes with the method
	of the same name.
	(ustring::compose): Make the type of each substitution parameter
	a template argument, and invoke ustring::format() implicitly for
	non-string arguments.  Explicit invocation of ustring::format() is
	still necessary in order to apply I/O manipulators to an argument.
	(ustring::Stringify): New auxiliary template class used in the
	implementation of ustring::compose().

	* examples/compose/main.cc (show_examples): Omit explicit calls
	to ustring::format() where possible.

2007-08-12  Daniel Elstner  <danielk@openismus.com>

	* examples/compose: New example demonstrating the message
	compose and format features.
	* examples/compose/main.cc: New file.
	* examples/compose/Makefile.am: New file.

	* examples/Makefile.am (example_dirs): Add compose directory.
	* configure.in (AC_CONFIG_FILES): Add examples/compose/Makefile.

2007-08-12  Daniel Elstner  <danielk@openismus.com>

	* build_shared/Makefile_build.am_fragment (all_includes): Add
	-I$(top_builddir) in order to allow <config.h> to be included.

	* glib/glibmm/ustring.{cc,h}: Include <config.h> for the
	definition of SIZEOF_WCHAR_T.
	(ustring::FormatStream::stream): Replace accessor with template
	method that passes its argument onto the stream.  Add overload
	for "const char*" to enable the use of UTF-8 string literals as
	arguments to ustring::format().
	(ustring::FormatStream::FormatStream): Handle exceptions on
	failure to initialize the locale gracefully.
	(ustring::format): Adapt to the modified stream() method.
	(operator<<): Add missing call to ustring::raw() to get the
	number of bytes instead of code points.  Oops.

2007-08-12  Daniel Elstner  <danielk@openismus.com>

	* glib/glibmm/ustring.{cc,h}: Add preliminary implementation of
	a message compose and format API (bug #399216).  The API design
	is not final and still open for discussion.
	(ustring::compose): New set of static methods for composing
	internationalized text messages by substituting placeholders
	in a template string.
	(ustring::format): New set of static methods for locale-dependent
	formatting of numbers and other streamable objects to strings.
	(ustring::compose_argv): New static method which implements the
	common functionality of the compose() overloads.
	(ustring::FormatStream): New helper class which implements the
	type-independent functionality of the format() templates.
	(operator>>): New operator overload for std::wistream.
	(operator<<): New operator overload for std::wostream.

2007-08-12  Daniel Elstner  <danielk@openismus.com>

	* scripts/dk-feature.m4: New file, defining M4 utility macros for
	feature testing.  These macros are part of my personal autoconf
	library and are not specific to glibmm, as indicated by the "DK_"
	namespace prefix.

	* configure.in (AC_INIT): Switch to the non-deprecated usage of
	AC_INIT() by passing project name and version number as arguments.
	This is necessary to define a couple of auxiliary macros.
	(AC_PREREQ): Bump Autoconf version requirement to 2.58.
	(AC_CONFIG_SRCDIR): Point to project-specific source file.
	(AC_CONFIG_MACRO_DIR): Declare scripts/ as M4 directory.
	(AM_INIT_AUTOMAKE): Switch to non-deprecated usage.
	(AC_CHECK_SIZEOF): Use to determine the size of wchar_t.
	(DK_CHECK_FEATURE): Use new feature test macro to check for
	support of wide-character streams.

	* config.h.in (SIZEOF_WCHAR_T): Add #undef template.
	* glib/glibmmconfig.h.in (GLIBMM_HAVE_WIDE_STREAM): Likewise.

2007-08-04  Daniel Elstner  <daniel.kitta@gmail.com>

	* containerhandle_shared.h (TypeTraits<bool>): Rewrite completely
	broken type adapter (bug #406960).
	* src/keyfile.{ccg,hg}: Fix the implementation to correctly use
	ArrayHandle<>.  Fix compilation with the new ArrayHandle<bool>
	code.

2.13.9:

2007-07-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/keyfile.hg:
	* glib/src/keyfile.ccg: Added a set_double() without the group_name
	parameter, because the C function can take NULL.
	* glib/src/glib_docs_override.xml: Corrected the documnentation for
	g_keyfile_set/get_double() to mention 2.14, instead of 2.12,
	because we only added these to glibmm in 2.14.
	* glib/src/regex.hg: Correct the since documentation to be 2.14
	not 2.12.
	* glib/src/iochannel.hg: read(): Corrected a parameter name to
	match the generated documentation.
	* glib/glibmm/miscutils.h: Fixed typos in the use of newin2p14.

2007-07-28  Murray Cumming  <murrayc@murrayc.com>

	* docs/Makefile_web.am_fragment: Corrected the rsync options, to
	match those used by gtkmm, to fix the examples upload.
	* glib/src/glib_docs.xml: Regenerated from the C documentation.

2007-07-14  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/keyfile.ccg:
	* glib/src/keyfile.hg: Added get_double(), set_double(), get_double_list()
	and set_double_list().

2.13.8:

2007-07-07  Jonathon Jongsma  <jjongsma@gnome.org>

	* glib/src/optioncontext.ccg:
	* glib/src/optioncontext.hg: add some new API that was added in glib 2.12,
	including get/set_summary(), get/set_description(), set_translation_domain(),
	and set_translate_func().
	* glib/src/glib_docs.xml: Regenerated with docextract_to_xml.py
	* glib/src/glib_docs_override.xml: override docs for the new functions so
	that they say that they were introduced in glibmm 2.14 instead of 2.12

2007-07-02  Johannes Schmid <johannes.schmid@openismus.com>

	* glib/src/regex.hg:
	Added class documentation

2007-07-02  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/DocsParser.pm: convert_tags_to_doxygen():
	Handle newin markers for 2.12 and a few after that.
	* docs/reference/Doxyfile.in: Added ALIASES for newin2p12 and
	a few more.

2.13.7:

2007-06-22  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/main.cc:
	* glib/glibmm/main.h: Added SignalTimeout::connect_seconds()
	as an equivalent for g_timeout_add_seconds() and took the improved
	documentation from glib.

	* glib/glibmm/miscutils.cc:
	* glib/glibmm/miscutils.h: Added get_user_special_dir(), though we
	should maybe wrap the enum.
	Reimplemented many of the functions with the
	convert_return_gchar_ptr_to_stdstring() and
	convert_const_gchar_ptr_to_stdstring() functions to simplify them
	and make them handle NULLs properly.

2007-06-22  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/regex.ccg:
	* glib/src/regex.hg: Added a create() method, and added some
	more default parameter values to the methods.

	* configure.in:
	* examples/Makefile.am:
	* examples/regex/main.cc: Added a very simple example.

	* glib/glibmm/value_custom.h: Put header guards around this, though
	this should never be included directly anyway.

2.13.6:

2007-06-17  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/regex.hg:
	* glib/src/matchinfo.hg: Removed API that uses GMatchInfo, until we
	wrap this properly, probably as a C++ iterator. This will avoid this
	API accidentally being released as stable sometime.

2007-06-12  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/glib_enums.defs: Regenerated with enums.pl
	* glib/src/glib_functions.defs: Regenerated with h2defs.py

	* glib/src/Makefile_list_of_hg.am_fragment:
	* tools/m4/convert_glib.m4:
	* glib/src/matchinfo.ccg:
	* glib/src/matchinfo.hg:
	* glib/src/regex.ccg:
	* glib/src/regex.hg: Added the RegEx and MatchInfo classes.
	These need some examples to test them. The MatchInfo class is
	probably particularly broken at the moment. See the TODO comments.

	* glib/glibmm.h: Added regex.h

2007-05-14  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/class_boxedtype.m4:
	* tools/m4/class_gobject.m4:
	* tools/m4/class_gtkobject.m4:
	* tools/m4/class_interface.m4:
	* tools/m4/class_opaque_copyable.m4:
	* tools/m4/class_opaque_refcounted.m4: Explicitly mention Glib::wrap()
	in the documentation for generated Glib::wrap() functions, because doxygen
	does not show their namespace.

2007-05-04  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/Function.pm: When generating example prototypes for
	signal handlers, prefix them with on_my_, to avoid confusion with
	similarly named functions and with on_*() default signal handlers.

2.13.5:

2007-04-30  Johannes Schmid <johannes.schmid@openismus.com>

	* tools/generate_wrap_init.pl.in:
	* tools/m4/class_gtkobject.m4:
	Use _IS_DEPRECATED instead of _CLASS_DEPRECATED because
	the latter confuses gmmproc.
	We cannot just use _DEPRECATED because it will result
	in incorrect handling of for example
	#ifndef GTKMM_DISABLE_DEPRECATED

2007-04-24  Yselkowitz <yselkowitz@users.sourceforge.net>

	* scripts/macros.m4: Check for both m4 and M4 in the GNU m4 output,
	to fix the build on some platforms.
	Bug #423990

2.13.4:

2007-04-11  Armin Burgmeier  <armin@openismus.com>

	* tools/pm/WrapParser.pm: Added peek_token() function which only
	returns the next token without removing it from the tokens array.
	Parse '/**' as a separate token and handle it in a special way so that
	when the final '*/' is encountered and _WRAP_SIGNAL follows, the
	comment is not terminated but continued by that automatically
	generated doxygen comment.

	* tools/pm/Output.pm: Added a merge_doxygen_comment_with_previous
	parameter in output_wrap_sig_decl(). If it is nonzero, the function
	assumes that there is already a comment open and continues to use it
	instead of opening a new comment by removing the leading '/**' from
	what get_refdoc_comment() returns. Bug #378810.

2007-04-06  Johannes Schmid <johannes.schmid@openismus.com>

	* tools/generate_wrap_init.pl.in:
	Use _CLASS_DEPRECATE instead of just _DEPRECATE to
	known whether a whole class should be avoided in wrap_init.
	Otherwise every .hg file containing deprecated methods
	might get ignored. (Fixes Gtk::TextBuffer bug in maemo)

2007-03-19  Bradley Bell  <btb@debian.org>

 	* glib/glibmm/helperlist.h: Change variable name to avoid
 	warnings about a shadowed member.
	Bug #420316.

2007-03-19  Bradley Bell  <btb@debian.org>

	* glib/glibmm/utility.h: remove g_free prototype, include gmem.h
	instead, to avoid a warning about a redundant declaration.
	Bug #420339.

2007-03-17  Armin Burgmeier  <armin@openismus.com>

	* tools/m4/signal.m4:
	* tools/m4/vfunc.m4:
	Use static_cast in vfuncs and signal handlers to cast the
	wrapper object to ObjectBase*. This is enough to check whether the object is
	from a derived type or not. A slow dynamic_cast has only to be performed if it
	is derived, and the C++ vfunc needs to be called.
	* glib/glibmm/objectbase.h: This requires ObjectBase::is_derived_ to be public,
	because it is called on a ObjectBase* rather than the actual type.
	This causes a slight speed up of vfuncs and default signal handler invokation.

	Also added commented-out inline versions of ObjectBase::_get_current_wrapper() and
	ObjectBase::is_derived(), which could be used in the generated code if we find
	that this has significant performance benefits. Note that these methods must be
	additional to the non-inline methods, because inline methods are not usually exported in the
	shared library.

2007-02-10  Murray Cumming  <murrayc@murrayc.com>

	* examples/options/main.cc: Use a default value, to show that it
	can be done.
	(This change, from 2006-03-30 was restored after being accidentally lost on Apr 12 2006)

2007-02-10  Armin Burgmeier <armin@arbur.net>

	* glib/src/optiongroup.ccg: default_c_arg(): Set the initial
	value of the C argument to the value the C++ argument has, to avoid
	that glibmm resets arguments to zero that were not given on the
	command line.
	(This change, from 2006-03-30 was restored after being accidentally lost on Apr 12 2006)

2007-01-28  Daniel Elstner  <daniel.kitta@gmail.com>

	* tools/m4/ctor.m4: If the argument list is empty, call the non-
	varargs overload of the Glib::ConstructParams constructor instead
	of using an empty varargs list.  This mistake was exposed thanks
	to the recent addition of G_GNUC_NULL_TERMINATED to the varargs
	constructor declaration.  Fortunately it was harmless in this case.
	Also use the opportunity to clean up the M4 code and prefix builtin
	M4 macros with m4_, so that we may get rid of the unprefixed macros
	altogether some day.

Thu, 25 Jan 2007 23:13:05 +0100 Dodji Seketeli

	* tools/m4/base.m4:
	  prefix the builting mkstemp with 'm4' because otherwise,
	  m4 1.4.8 recognizes it as a builtin macro and expands it, leading
	  to compilation errors on some distros.
	  This should fix #397167. Thanks to Daniel Elstner for spotting this.

2007-01-20  Daniel Elstner  <daniel.kitta@gmail.com>

	* glib/glibmm/dispatcher.{cc,h}: Early spring cleaning.  Also add
	a paragraph about Dispatcher on win32 to the documentation.
	(DispatchNotifyData): Remove the 'tag' member from the struct that
	was always set to 0xdeadbeef in order to detect memory corruption.
	This is pointless, as we already check the DispatchNotifier pointer
	sent across the pipe, which is a far better indicator of corruption
	anyway.
	(warn_failed_pipe_io): Remove the err_no parameter and retrieve
	errno respectively GetLastError() within the function instead.
	(DispatchNotifier::conn_io_handler_): Remove, as we now inherit
	from sigc::trackable.  I verified that this doesn't cause problems
	with threading in this particular case.
	(DispatchNotifier::DispatchNotifier): If creating the pipe failed
	and exceptions are disabled, call at least warn_failed_pipe_io()
	instead of doing nothing at all.
	(DispatchNotifier::*): Rework the win32 implementation so that it
	matches more closely the Dispatcher semantics on Unix.  This still
	needs testing by someone on win32, though.  So far I only verified
	that it compiles with dummy definitions of the win32 API.  Also,
	I accidentally located the real cause of the race condition Cedric
	experienced in bug #109966.  It was a bug in my patch, rather than
	in the example code.

	* examples/thread/dispatcher.cc: Cleanup.  In particular, get rid
	of the Glib::RefPtr<> abuse with non-Glib::Object types.  I don't
	believe we endorse such usage officially, so it shouldn't be in
	the examples.

2007-01-20  Daniel Elstner  <daniel.kitta@gmail.com>

	* glib/glibmm/miscutils.cc: Clean up the code a bit.
	(get_application_name): Remove the code that checked the string for
	valid UTF-8, and attempted conversion if not valid.  I must have
	been on crack when I wrote this, as the combination of conditions
	that would cause the string to be invalid UTF-8 is quite unlikely.
	If this is a valid concern at all, it should be filed as a GLib bug
	and not worked around in glibmm.
	(build_filename(const std::string&, const std::string&)): Just call
	the plain g_build_filename() instead of building a temporary array
	and passing that via ArrayHandle to the build_filename() overload
	for containers.
	(build_path): Remove the already deactivated custom implementation
	from the time before g_build_pathv() was added to GLib.

	* glib/glibmm/object.{cc,h}: Improve/fix a couple of comments.
	(ConstructParams::ConstructParams): Add G_GNUC_NULL_TERMINATED
	function attribute to make the compiler complain if the variadic
	argument list is not terminated by a NULL pointer.

	* glib/glibmm/ustring.{cc,h} (utf8_find_last_of): Avoid applying
	bitwise logical operators directly to (possibly signed) operands
	of char type.  In order to avoid relying on implementation-defined
	behavior, make sure that the operands are of unsigned integer type.
	(ustring::is_ascii): Likewise,
	(ustring_Iterator<T>::operator--): Likewise.
	(get_unichar_from_std_iterator): De-obfuscate this highly optimized
	piece of code, as the current stable release of GCC (4.1.2-pre on
	my system) generates better assembler output without the voodoo.

2.13.3:

2006-11-28  Daniel Elstner  <danielk@openismus.com>

	* tools/pm/GtkDefs.pm (read_defs): Allow an empty pair of
	parentheses in the innermost match.  This fixes the problem of
	gmmproc choking on "()" in the documentation strings.  This would
	still break on unmatched parentheses, though.  Of course the
	parser should just skip over quoted strings, but I wasn't able
	to get that to work.
	* glib/src/glib_enums.defs (GNormalizeMode): Manually fix the
	improperly parsed value of G_NORMALIZE_NFD.  Fortunately this
	doesn't change anything since the "#error" token was interpreted
	as zero, which happens to be the right value.
	* glib/src/glib_functions.defs (g_iconv): Manually convert to
	a function definition, as it was improperly parsed as a method
	with a zero-length name (!) of object GIConv.  This fixes the
	annoying gmmproc warning about an allegedly unwrapped method.

2006-11-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/propertyproxy_base.cc: Don't ifdef out
	PropertyProxy_Base when properties are disabled. It is needed
	for connect_property_changed().

2006-11-27  Daniel Elstner  <danielk@openismus.com>

	* tools/enum.pl (parse): Ignore whitespace in front of an enum
	typedef.  This fixes parsing of HildonTelephoneEditorFormat in
	hildon-libs.
	* tools/pm/Enum.pm (parse_values): Check whether the enumeration
	constants actually have a common module prefix before attempting
	to remove it.  This fixes the incorrect parsing of inconsistently
	named enums in hildon-libs.

2006-11-27  Daniel Elstner  <danielk@openismus.com>

	* tools/enum.pl (form_names): Break the loop if the length of the
	common prefix reaches zero.  This fixes the infinite loop when
	processing the inconsistently named enumeration constants of the
	Hildon libraries.

2006-11-20  Murray Cumming  <murrayc@murrayc.com>

	* docs/reference/libstdc++.tag.xml: Updated from the libstdc++ site.
	Note that the original does not have an .xml extension. This is is
	lots bigger, but that should mean there is more documentation now.

2006-11-22  Oliver Nittka  <oly@nittka.com>

	* glib/src/value_basictypes.cc.m4: When registering float parameters,
	use -G_MAXFLOAT instead of G_MINFLOAT. Since we first implemented this,
	the glib documentation has been updated to make it cleare that this is
	the real minimum and G_MINFLOAT is the minimum positive value.
	Do the same for doubles too.

2006-11-10  Murray Cumming  <murrayc@murrayc.com>

	* tools/Makefile.am: Add enum.pl to the dist, so that it is in
	tarballs. Someone saw it mentioned in the appendix, but could not
	find it in the tarball.

2006-11-10  Murray Cumming  <murrayc@murrayc.com>

	* docs/reference/Doxyfile.in: Add PREDEFINES for the optional API,
	so that the documentation shows the regular API.

2006-11-10  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/objectbase.cc:
	* glib/glibmm/objectbase.h: Added connect_property_changed(),
	as an alternative to use when the property proxies are not
	available because GLIBMM_PROPERTIES_ENABLED is not defined.
	SignalProxyProperty::connect(): Use notify::propertyname instead of
	just notify, so do not have to check the property name later. This
	should be more efficient (when this is used, rarely).
	* glib/glibmm/propertyproxy_base.cc:
	* glib/glibmm/propertyproxy_base.h: Move PropertyProxyConnectionNode
	into the header, so we can reuse it for connect_property_changed().

2006-10-04  Murray Cumming  <murrayc@murrayc.com>

        * glib/glibmm/class.cc:
        * glib/src/iochannel.ccg:
        * glib/src/markup.ccg: Add a silly line to avoid unused parameters
        when GLIBMM_EXCEPTIONS_ENABLED is not set.
        * glib/glibmm/error.h: Do not use G_GNU_NO_RETURN on the version
        of throw_exception() that returns, to avoid a warning.

2006-10-01  Murray Cumming  <murrayc@murrayc.com>

	* Makefile.am:
	* docs/Makefile.am:
	* docs/Makefile_web.am_fragment:
	* docs/images/Makefile.am:
	* docs/reference/Makefile.am:
	* docs/reference/README:
	* examples/Makefile.am: Upload to the new hoster instead of to sourceforge.
	Abstracted the host and path names into docs/Makefile_web.am_fragment to
	avoid duplication.

2.13.2:

2006-09-28  Cedric Gustin  <cedric.gustin@gmail.com>

	* MSVC_Net2003/glibmm/glibmm.vcproj: Remove sarray from list of
	source and header files.

2006-09-26  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmmconfig.h.in: For win32, define
	GLIBMM_ARG_ENABLE_API_DEFAULT_SIGNAL_HANDLERS to 1,
	instead of just defining it to nothing.
	* scripts/reduced.m4: In the AC_ARG_ENABLE() to
	define (or not) GLIBMM_ARG_ENABLE_API_DEFAULT_SIGNAL_HANDLERS,
	use api-default-signal-handlers as the first parameter
	instead of api-exceptions (a copy/paste error), though it does
	not seem to make any difference.
	Bug #357830.

2006-09-23  Jonathon Jongsma  <jonathon.jongsma@gmail.com>

	* glib/src/keyfile.ccg, glib/src/keyfile.hg: added new files that were
	missed from an earlier commit

2.13.1:

2006-09-19  Ralf Stephan  <ralf@ark.in-berlin.de>

	* glib/glibmm/ustring.h:
	ustring(const ustring& src, size_type i, size_type n=npos)
	and
	ustring(const char* src, size_type n) constructors:
	In the reference documentation, mention explicitly that
	n is the number of _UTF-8_ characters, rather than
	ASCII characters (bytes).

2006-02-20  Rob Page  <page.rob@gmail.com>

	Wraps GKeyFile (Bug #330535)
	* glib/glibmm.h: Added include of keyfile.h
	* glib/glibmm/Makefile.am: Added keyfile.h
	* glib/glibmm/containerhandle_shared.h: Added a TypeTraits
	specialization for converting between bool and gboolean*.
	* glib/src/Makefile_list_of_hg.am_fragment: Added keyfile.hg
	to files_general_hg.
	* glib/src/keyfile.hg: KeyFile header
	* glib/src/keyfile.ccg: KeyFile implementation
	* tools/m4/convert_glib.m4: Added a conversion for KeyFileFlags

2006-09-14  Johannes Schmid <jhs@gnome.org>

	* tools/m4/class_shared.m4: Change _IMPLEMENTS_INTERFACE to
	_IMPLEMENTS_INTERFACE_CC so we can have more control over it,
	by generating the _IMPLEMENTS_INTERFACE_CC from the WrapParser.pm.
	* tools/m4/method.m4:
	* tools/m4/signal.m4:
	* tools/m4/vfunc.m4: Added optional parameters that result in
	#ifdefs around methods, signals, vfuncs, etc.
	* tools/pm/Output.pm: Addef ifdef() and endif().
	output_wrap_vfunc_h(), output_wrap_vfunc_cc(),
	output_wrap_default_signal_handler_h(),
	output_wrap_default_signal_handler_cc(),
	output_wrap_meth(),
	output_wrap_create(),
	output_wrap_sig_decl(): Support optional ifdefs around
	declarations and implementations, by calling ifdef() and endif(),
	or by passing the extra argument to the m4 macros.
	* tools/pm/WrapParser.pm: parse_and_build_output():
	Parse _IMPLEMENTS_INTERFACE, and call the new on_implements_interface()
	method, which uses the new output_implements_interface() method,
	so it can have an optional ifdef parameter.
	on_wrap_method(), on_wrap_create(), on_wrap_vfunc(), output_wrap_signal(),
	output_wrap_vfunc(): Handle the optional ifdef (with a parameter) option
	for the _WRAP*() macros.

	This adds support for disabling certain features by using the new
	"ifdef" argument for methods, vfuncs, signals and interfaces.

2006-09-05  Jonathon Jongsma  <jonathon.jongsma@gmail.com>

	* docs/reference/Makefile.am: rebuild docs when a .h files changes in
	glib/glibmm
	* glib/glibmm/miscutils.cc:
	* glib/glibmm/miscutils.h: wrap g_get_user_data_dir(),
	g_get_user_config_dir(), and g_get_user_cache_dir()

This is the HEAD branch, for new API. There is also a glib-2-12 branch for
maintenance of the stable API.

2006-08-18  Cedric Gustin  <cedric.gustin@gmail.com>

	* MSVC_Net2003/*.vcproj: Updated for glibmm-2.12.

2.12.0:

2.11.3:

2006-04-25  Murray Cumming  <murrayc@murrayc.com>

	* configure.in:
	* glib/glibmmconfig.h.in:
	* scripts/reduced.m4: Added a --enable-api-default-signal-handlers option. This defines
	GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED, which is used to #ifdef default signal handlers.
	This saves on library code size (less code and API symbols) and application code size and
	loading time (less virtual methods, which must be imported and resolved at load time) and
	per-object memory size (smaller object sizes because of less virtual methods.)
	* tools/m4/class_interface.m4:
	* tools/m4/class_shared.m4: Put default signal handler code in #ifdefs.

2.11.2:

2006-07-17  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Reverted the previous patch slightly to unbreak glibmmconfig.h.

2.11.1:

2006-07-16  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Quote GLIBMM_*_VERSION to avoid m4 warnings. Patch from
	Bug #347076 from Kevin McBride.
	* scripts/sun.m4: Quote GLIBMM_PROG_CXX_SUN to avoid an m4 warning.
	Patch from Bug #347077 from Kevin McBride.

2006-07-16  Jonathon Jongsma  <jonathon.jongsma@gmail.com>

	* glib/src/date.ccg: fix implementation of Glib::Date::set_time_current() so
	that it doesn't set the date to Dec 31, 1969.

2006-06-19  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/object.h: Check whether DestroyNotify is defined, so we can warn about
	including X11/Xlib.h before this header, which will break things.
	Bug #316726 from Mert Tugcu and Javeed Shaikh.

2006-06-09  Cedric Gustin  <cedric.gustin@gmail.com>

	* glib/glibmm/objectbase.h : Inline the set_property and
	get_property methods. This is required by mingw32-gcc as
	ObjectBase is explicitly dllexported.

2006-06-05  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/convert.ccg: When using --enable-api-exception=no, only try to get the Glib::Error
	when the GError is not null.

2006-05-18  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/method.m4: _METHOD(): When using errthrow, actually print the function call even if
	the return type is 0.

2006-05-16  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/method.m4:  _METHOD(), _STATIC_METHOD(): Remove spaces before dnl statements,
	to avoid unwanted indentation in .cc files.

2006-05-16  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/convert_base.m4: _CONVERT(): If the return type is void, use the unconverted
	statement, not no statement. This prevents some void methods from being totally empty.
	This was a (very bad) regression introduced by the optional API changed.
	Bug #341895 from Philip Langdale.
	* tools/m4/method.m4: _METHOD(), _STATIC_METHOD(): Attempt to remove unnecessary newlines,
	though some indenting spaces slipped in instead. Must fix that.

2006-05-14  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/value.cc:
	* glib/glibmm/value.h: Restored the init(GValue*) method that was lost when
	merging changes from the glibmm-2-10 branch.

2006-05-09  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/ustring.cc:
	* glib/src/date.ccg:
	* glib/src/convert.ccg:
	* glib/src/convert.hg: Added #ifdefed versions for the case that
	exceptions are disabled.

2006-05-10  Murray Cumming  <murrayc@murrayc.com>

	* configure.in:
	* scripts/reduced.m4: Moved --enable-deprecated-api macro into scripts/reduced.m4.
	Added the --enable-api-exceptions macro that was missing from my last commit.

2006-04-05  Murray Cumming  <murrayc@murrayc.com>

	* configure.in:
	* scripts/reduced.m4: Added --enable-api-exceptions option. When this
	is used, methods that would normally throw an exception will now take
	an extra std::auto_ptr<Glib::Error> argument that should be checked with
	auto_ptr::get().
	* glib/glibmmconfig.h.in: Undef the GLIBMM_EXCEPTIONS_ENABLED,
	so it will be defined.
	* tools/m4/gerror.m4: throw_func() returns an auto_ptr of a
	Glib::Error when exceptions are disabled.
	* tools/m4/method.m4:
	* tools/pm/Output.pm: on_wrap_method(): Added alternative API with
	#ifdefs
	* tools/m4/signal.m4:
	* tools/m4/signalproxy_custom.m4:
	* tools/m4/vfunc.m4: Put #ifdefs around the exception re-throwing
	try/catch blocks.
	* glib/glibmm/dispatcher.cc:
	* glib/glibmm/dispatcher.h:
	* glib/glibmm/error.cc:
	* glib/glibmm/error.h:
	* glib/glibmm/exceptionhandler.cc:
	* glib/glibmm/exceptionhandler.h:
	* glib/glibmm/main.cc:
	* glib/glibmm/signalproxy.cc:
	* glib/glibmm/streamiochannel.cc:
	* glib/glibmm/stringutils.cc:
	* glib/glibmm/threadpool.cc:
	* glib/src/iochannel.ccg:
	* glib/src/iochannel.hg:
	* glib/src/markup.ccg:
	* glib/src/spawn.ccg:
	* glib/src/thread.ccg: Put #ifdefs around try/catch blocks, and
	use alternative API when appropriate.
	* examples/iochannel_stream/fdstream.cc:
	* examples/markup/parser.cc:
	* examples/options/main.cc: Adapted examples to
	the alternative API, with #ifdefs
	* tools/m4/convert_base.m4: Avoid any conversion if the result is
	void, to allow _WRAP_METHOD() to ignore bool results, so we can
	generate some methods that are currently hand-coded.

2006-05-09  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/value.cc:
	* glib/glibmm/value.h: Added init(const GValue*), so that we can copy GValue instances
	of any type at runtime. Needed by libgdamm, which returns const GValue* instances.

This is the HEAD branch, for API additions. See also the glibmm-2-10 branch.

2.10.1:

2006-04-12  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/signalproxy_custom.m4: Remove this file because it is not installed and
	does not seem to be used.

2006-04-12  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/signal.m4: Mark the (private) signal info callback functions as
	static, to save on code size.

2006-04-12  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/WrapParser.pm: Parse a new optional constversion parameter for
	_WRAP_METHOD(), to save on code size by just calling the non-const overload
	instead of generating almost identical code.
 	* tools/m4/method.m4: _METHOD(): Take extra parameters for use when constversion is used.
	* tools/pm/Output.pm: Send the extra parameters to _METHOD().
	* docs/internal/using_gmmproc.txt: Documented the new constversion option.

2006-04-12  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/main.cc:
	* glib/glibmm/objectbase.cc:
	* glib/glibmm/property.cc:
	* glib/glibmm/ustring.cc:
	* glib/glibmm/value_custom.cc:
	* glib/src/spawn.ccg: Mark private functions as
	static, to stop them being exported in the API, to reduce the
	library code size slightly.
	* tools/m4/signal.m4: Make generated callback functions static, for
	the same reasons.

2006-04-07  Cedric Gustin  <cedric.gustin@gmail.com>

	* README.win32: Updated for Mingw-4.1.

2006-04-06  Cedric Gustin  <cedric.gustin@gmail.com>

	* MSVC_Net2003/*.vcproj: Embed the manifest file into executables
	in the case of the Debug target.
	* README.win32: Fixed a few typos.
	* build_shared/Makefile_build.am_fragment: Add -DGLIBMM_BUILD to
	the extra_defines compiler flags (switch between
	dllexport/dllimport on win32).
	* glib/glibmmconfig.h.in: Define GLIBMM_DLL when building with
	mingw32/cygwin. This makes the GLIBMM_API tag (and GTKMM_API for
	gtkmm) active with these two platforms, as required by bug
	#309030.
	* glib/glibmm/object.h, glib/glibmm/objectbase.h : Tag the Object
	and ObjectBase classes with GLIBMM_API to make Visual Studio happy.

2.10.0:

2006-02-25  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/DocsParser.pm: looklookup_documentation(): Put the
	@deprecated text immediately after the main description, before
	the parameters, so that Doxygen actually uses it.

2006-02-25  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/DocsParser.pm: looklookup_documentation(): Accept an
	extra deprecated_documentation parameter, to be appended to the
	Doxygen documentation.
	* tools/pm/Output.pm: output_wrap_meth(): Put the documentation
	inside the deprecation #ifdef, for neatness.
	* tools/pm/WrapParser.pm: on_wrap_method(): Read an optional string
	after the optional deprecated parameter, used to say why the
	method is deprecated, in case it was not deprecated by the C API,
	in which case it would already have documentation for this.

2006-02-27  Cedric Gustin <cedric.gustin@gmail.com>

	* README.win32: Updated for glibmm-2.8 (MS Visual Studio 2005).
	* glib/glibmm/ustring.h: Tag npos with GLIBMM_API, in order to
	dllexport it on win32. Bug #332438.
	* MSVC_Net2003/*.vcproj: Updated for Visual Studio 2005. Added the
	/vd2 compiler flag (Bug #158040).
	* MSVC_Net2003/glibmm.sln: Updated for Visual Studio 2005.
	* MSVC_Net2003/gendef/gendef.cc: Redirect output of dumpbin to a
	file.
	* glib/glibmmconfig.h.in: Undefined
	GLIBMM_HAVE_ALLOWS_STATIC_INLINE_NPOS for MSVC.

2006-02-03  Murray Cumming  <murrayc@murrayc.com>

	* docs/internal/using_gmmproc.txt: Section about regenerating .defs:
	Repeat the hint about extra_defs_gen here.

2006-02-27  Cedric Gustin <cedric.gustin@gmail.com>

	* glib/glibmm/ustring.h: Tag npos with GLIBMM_API, in order to
	dllexport it on win32. Bug #332438.

2006-02-07  Rob Page  <page.rob@gmail.com>

	* glib/glibmm/ustring.h: fix a typo in the documentation for uppercase()

2.9.1:

2006-01-28  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optiongroup.ccg: add_entry_with_wrapper(): Copy the
	CppOptionEntry into the map _after_ setting entry_ so that we
	really delete it in release_c_arg(), to avoid a memory leak.

2006-01-28  Rob Page <rob@gmail.com>

	* docs/reference/glibmm_header.html_fragment: Fix the link
	to the Main page. Bug #328299.

2006-01-27  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optionentry.ccg: Constructor: Avoid memory
	leak caused by double instantiation of gobject_.

2005-12-16  Murray Cumming <murrayc@murrayc.com>

	* glib/glibmm/object.h:
	* glib/glibmm/objectbase.h: Hide some internal stuff
	from Doxygen. Add/Improve the Doxygen documentation.
	* glib/src/convert.hg: Correct the declaration of
	filename_display_name() to match the implementation.
	Previously this would have been unusable due to a linker
	error.

2005-11-30  Murray Cumming <murrayc@murrayc.com>

	* docs/reference/Doxyfile.in: Define the @newin aliases,
	as in gtkmm.
	* tools/pm/DocsParser.pm: Convert Since: in gtk-doc
	text to @newin for our doxygen docs.

2005-11-29  Murray Cumming <murrayc.com>

	* build_shared/Makefile_build.am_fragment:
	* configure.in: Added --enable-use-deprecations,
	defaulting to no (do not check for them), so that
	the tarball will still build when newer versions
	of glib deprecate some API.
	* examples/Makefile.am_fragment: Use the
	deprecation, if wanted.

2005-11-29  Murray Cumming <murrayc@murrayc.com>

	* build_shared/Makefile_build.am_fragment:
	* configure.in: Added --enable-deprecated-api
	option. When set to disabled, it does not build
	deprecated API. This reduces the size of the library,
	and might be useful for embedded devices.
	* glib/src/date.ccg:
	* glib/src/date.hg: Use _DEPRECATE_IFDEF_START/END
	around the deprecated set_time() method.

2005-11-29  Murray Cumming <murrayc@murrayc.com>

	* tools/m4/base.m4: Add
        _DEPRECATE_IFDEF_START and _DEPRECATE_IFDEF_END
	macros, to #ifdef-out generated methods.
	Added _DEPRECATE_IFDEF_CLASS_START and
	_DEPRECATE_IFDEF_CLASS_END for whole classes.
	Put _DEPRECATE_IFDEF_CLASS* around all generated
	code. It does nothing if the class is not deprecated.
	* tools/m4/class_gtkobject.m4: Add _DEPRECATED macro,
	used to mark a class as deprecated.
	* tools/m4/method.m4: Take an extra parameter, to
	optionally mark the method as deprecated, to add
	#ifdefs around the code, with
	_DEPRECATE_IFDEF_START/END
	* tools/pm/Output.pm: _DEPRECATE_IFDEF_START/END
	around the declarations of deprecated methods.
	* tools/pm/WrapParser.pm: Check for an optional
	deprecated parameter to _WRAP_METHOD().
	* tools/m4/member.m4: Allow optional deprecated
	method for _MEMBER_GET/SET*() to ifdef the code
	out.
	* tools/generate_wrap_init.pl.in: Put an #ifdef
	around use of deprecated classes.

2005-11-23  Murray Cumming <murrayc@murrayc.com>

	* configure.in: Depend on glib 2.9, which
	has new API.
	* glib/src/date.ccg:
	* glib/src/date.hg: Wrap glib_date_set_time_t()
 	and glib_date_set_time_val(). Deprecate
	set_time(GTime) in favour of the new method
	overloads. Added set_time_current(), wrapping the
	case that the time_t is 0.

This is the HEAD branch, for new API, targetting glib 2.9. See also the
glibmm-2-8 branch.

2.8.2:

2005-11-23  Murray Cumming <murrayc@murrayc.com>

	* glib/glibmm/containers.h: Do not use g_assert() in
	a header, because g++ sometimes warns that it has
	no effect.

2005-10-29  Murray Cumming <murrayc@murrayc.com>

	* scripts/macros.m4: AL_PROG_GNU_MAKE():
	Use $MAKE-make instead of $ac_make, which
	apparently fixes a build problem on some
	Solaris systems. Thanks to Mark Rouchal in
	bug #307480.

2.8.1:

2005-10-19  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Check for glib 2.8. Bug #317913.

2.8.0:

Updated NEWS and increased version to 2.8.0.

2.7.3:

2005-08-17  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/glib_docs.xml: Regenerated with docextract_to_xml.py
	* glib/src/glib_enums.defs: Regenerated with enums.pl
	* glib/src/glib_functions.defs: Regenerated with h2defs.py

2.7.2:

2005-07-16  Murray Cumming <murrayc@murrayc.com

	* glib/glibmm/miscutils.cc: Reimplemented build_filename() and
	build_path() with the new non-vararg functions in glib 2.7,
	instead of implementing them in gtkmm.
	* glib/src/glib_enums.defs: Regenerated with enums.pl
	* glib/src/optionentry.hg: Added FLAG_NO_ARG, FLAG_FILENAME,
	FLAG_OPTIONAL_ARG, and FLAG_NOALIAS enum values.


2.7.1:

2005-06-08  Murray Cumming <murrayc@murrayc.com

	* glib/glibmm/propertyproxy.h:
	PropertyProxy_ReadOnly<>::get_value(),
  	PropertyProxy_WriteOnly<>::set_value(): Add implementations
	instead of casting to unrelated PropertyProxy() and calling it
	there. The AIX compiler did not like this hack. Bug #301610

2005-06-07  Cedric Gustin <cedric.gustin@swing.be>

	* glib/glibmm/miscutils.cc: In get_home_dir, return an empty
	string when HOME is not defined (Win9x). Bug #306310 from Michael
	Hofmann.
	* glib/glibmm/miscutils.h: Updated docstring for the get_home_dir
	method.

2005-04-27  Murray Cumming <murrayc@murrayc.com>

	* examples/child_watch/main.cc:
	* examples/thread/dispatcher.cc:
	* examples/thread/thread.cc:
	* glib/glibmm/dispatcher.cc: Inherit signal handler objects from
	sigc::trackable. This is necessary with some libsigc++ patches,
	though not currently necessary with regular libsigc++.

2005-04-22  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/gmodule_enums.defs: Regenerate with enums.pl
	* glib/src/gmodule_functions.defs: Regenerate with h2defs.py
	This adds the BIND_LOCAL enum value. Bug #172748 from
        Phillip Neiswanger.

2005-04-05  Murray Cumming  <murrayc@murrayc.com>

	* tool/pm/Output.pm: output_wrap_property(): Do not add the
	const read-only method override if the property can not be read. Be
	careful because this removes a little API from generated code. You
	should hand-code the wrongly-generated methods and mark them as
	deprecated.
	* glib/glibmm/refptr.h: Added cast_const<>, like the existing
	cast_dynamic<> and cast_static.

2005-03-31  Murray Cumming <murrayc@murrayc.com>

	* glib/src/glib_functions.defs: Updated with
	h2defs.py.

2005-03-13  Yair Hershkovitz <yairhr@gmail.com>

	* glib/glibmm/main.h,
	glib/glibmm/main.cc: Added MainContext::signal_child_watch()
	* examples/: Added child_watch/ example

2005-03-11  Yair Hershkovitz <yairhr@gmail.com>

	* glib/glibmm/main.h, glib/glibmm/main.cc:
	Add Glib::SignalChildWatch class, Glib::signal_child_watch()

This is the HEAD branch, for new API. Bug fixes that do not change or add
API should also be applied to the glibmm-2-6 branch.

2005-03-09  Cedric Gustin <cedric.gustin@swing.be>

	* MSVC_Net2003/Makefile.am: Add blank.cpp to EXTRA_DIST.
	* MSVC_Net2003/glibmm/glibmm.vcproj: Remove sarray.cc from the
	list of source files.
	* MSVC_Net2003/examples/*/*.vcproj,
	MSVC_Net2003/tests/glibmm_value/glibmmvalue.vcproj: Change name of
	PDB file to $(OutDir)/$(TargetName).pdb.

2.6.1:

2005-03-07  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/interface.cc: Disable the new check for pre-existing
	interface implementations, because it checks all base gtypes and
	not just the current gtype. Bug #169442 by Bryan Forbes.

2.6.0:

2.5.6:

2005-02-18  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/interface.cc: Interface_Class:add_interface(), used by
	add_interface() methods of Interfaces: Do not add interfaces that
	have been added before, to avoid the warning from glib. This
	allows application code to be simpler.

2005-02-18  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/Output.pm: Add the documentation to the const property()
	accessor as well as the non-const one.

2005-02-13  Murray Cumming  <murrayc@murrayc.com>

	* tools/extra_defs_gen/generate_extra_defs.cc: Use
	g_param_spec_get_blurb() to output the documentation for the
	properties in the .defs file.
	* tools/m4/property.m4: Take an extra docs argument, and put it in the
	doxygen docs.
	* tools/pm/Output.pm: Add the extra docs argument when calling the
	property m4 macro.
	* tools/pm/Property.pm: Read in the new docs part of the .defs, and
	add a period at the end if neccessary.

2005-02-01  Murray Cumming  <murrayc@murrayc.com>

	* examples/threadpool.cc, dispatcher.cc, dispatcher2.cc: Removed the
	#ifdef for AIX, because sigc::bind now works on AIX.

2005-01-27  Cedric Gustin <cedric.gustin@swing.be>

	* MSVC_Net2003/glibmm/glibmm.rc.in: Reverted to 2.4 for the
	library version number.

2.5.5:

2005-01-26  Cedric Gustin <cedric.gustin@swing.be>

	* MSVC_Net2003/glibmm/glibmm.vcproj: Reverted to 2.4 for the
	library version number.

2005-01-24  Cedric Gustin <cedric.gustin@swing.be>

	* Makefile.am, configure.in: Added MSVC_Net2003 directory.
	* config.h.in: Added mkfifo #define (for mingw32).
	* glib/glibmmconfig.h.in: Added new #define's to MSVC section.
	* examples/iochannel_stream/Makefile.am: Do not build on win32
	with mingw32 (mkfifo not available).
	* scripts/cxx_std.m4: Fixed typo in AC_DEFINE macros.
	* build_shared/Makefile_build.am_fragment: Removed
	$(sublib_name)_COMPILATION variable (is useless now on
	cygwin/mingw as all symbols are dll exported).
	* MSVC_Net2003/*: Initial commit imported from glibmm-2-4 branch.
	* MSVC_Net2003/glibmm/Makefile.am: Rewrote rule for local copy of
	glibmmconfig.h (required for 'make distcheck').

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	* configure.in, scripts/cxx.m4, glibmm/glibmmconfig.h.in: Added new
	compiler tests to see whether extern "C" functions are put in the
	global namespace, even when we use extern "C" inside a namespace
	declaration. The AIX xlC compiler does this, but allows us to
	redeclare the namespace inside the extern "C" block.
	* glib/glibmm/property.h: Use the new
	#ifdef GLIBMM_MUST_REDECLARE_NAMESPACES_INSIDE_EXTERNC and redeclare
	the namespace when necessary.
	* examples/thread/dispatcher.cc, dispatcher2.cc: Use sigc::bind<1>
	instead of just sigc::bind<> because the AIX xlC compiler needs the
	extra hint. However, the linker then fails, so the use of sigc::bind
	is ifdefed out for _AIX. See the comments in the code.

2005-01-21  Murray Cumming  <murrayc@murrayc.com>

	* configure.in, scripts/cxx.m4, glibmm/glibmmconfig.h.in: Added new
	compiler tests.
	1. To see whether it allows use of non extern C functions
	as extern C callbacks, because the Tru64 compiler does not
	allow this, when using strict_ansi. We do not actually use this yet.
	2. To see whether it allows us to define a template that uses an
	undefined type, even if we do not use it before defining the type.
	Tru64 does not allow this. That's probably correct.
	* glib/glibmm/container.h: #ifdef out a dynamic_cast that Tru64
	does not allow, and which I can not think of a better place to put.
	See the comment in the code.
	* glib/glibmm/containerhandler_helpers.h: When the compiler does not
	alllow the GObject and GtkObject (dynamic_cast of) specializations
	here, then put them in glib/glibmm/object.h and
	gtkmm/gtk/src/object.hg instead.- needed by Tru64 compiler.
	* glib/glibmm/value.h, value_custom.[h|cc]: Conditionally moved
	the RefPtr Value specialization into object.h, as above.
	* glib/src/ optiongroup.ccg, spawn.ccg, thread.ccg: Make C callacks
	separate extern "C".
	* glib/src/optiongroup.ccg: Do not use the StringArrayHandle,
	because the Tru64 compiler has problems with it - see comments
	in code.
	* glib/src/optionentry.hg: Remove the include of value.h, because
	it is not used and it causes a Tru64 compile error in
	optioncontext.cc because its templates are included before the
	types that the template uses.

2005-01-19  Murray Cumming  <murrayc@murrayc.com>

	* configure.in, scripts/cxx.m4, glibmm/glibmmconfig.h.in: Added a
	compiler test, because the IRIX MipsPro compiler does not allow the
	inline initialization of ustring::npos.
	* glib/glibmm/ustring.[h|cc]: When the compiler does not support the
	inline initialization of npos, initialize it in the .cc file.
	Declare partial specializations of the SequenceString inner class
	inside the class - needed by IRIX MipsPro compiler.

2005-01-18  Murray Cumming  <murrayc@murrayc.com>

	* glibmm/src/optiongroup.[hg|ccg]: CppOptionEntry::convert_c_to_cpp():
	Copy the strings to the vector in a loop, instead of using the
	ArrayHandle constructor, because that does not seem to work with the
	SUN Forte compiler.

2.5.4:

2005-01-10  Murray Cumming  <murrayc@murrayc.com>

	* glibmm/src/optiongroup.[hg|ccg]: Added a castitem constructor
	that always takes ownership, needed by Gtk::Main. Added the new
	FLAG_REVERSE flag value. Added reference documentation.

2.5.3:

2005-01-09  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/misc_utils.[h|cc]: Added setenv() and unsetenv(),
	wrapping new functions added in glib 2.4.
	* glib/src/convert.[hg|ccg]: Added filename_display_name() and
	filename_display_basename().

2005-01-09  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optionentry.ccg: Copy constructor: Copy the short name
	form the src, not from itself. Bug #16331 from Daniel Holbach.

2005-01-09  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optionentry.[hg|cc]: Add add_entry(entry, bool&), to wrap
	use of G_OPTION_ARG_NONE. Bug #163325 from Daniel Holbach.
	* examples/options/main.cc: Use the new add_entry() overload.

2005-01-06  Benoît Dejean  <TazForEver@dlfp.org>

	* glib/glibmm/dispatcher.cc:
	* glib/glibmm/error.cc:
	* glib/glibmm/exceptionhandler.cc:
	* glib/glibmm/main.cc:
	* glib/glibmm/threadpool.cc:
	* glib/glibmm/ustring.cc:
	* glib/glibmm/wrap.cc: Don't export private API.
	Closes #163031.

2005-01-04  Chris Vine <chris@cvine.freeserve.co.uk>

	* examples/iochannel_stream/: Provide a means of obtaining
	Glib::IOChannel error information from the streambuffer.  Remove
	the code conversion option from the fdstream/fdstreambuf
	constructors and add comments in fdstream.h about code conversion
	and other matters.  Add a detach() function and a destructor to
	fdstreambuf.  Correct an error in fdstreambuf::xsgetn().  Include
	missing <string> header file in main.cc.

2.5.2:

2004-12-19  Murray Cumming  <murrayc@murrayc.com>

	* examples/: Adapted and added iochannel_stream example from
	Chris Vine in bug #138259.

2004-12-19  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/: Added glib_docs.xml, generated with docsextract_to_xml.py
	and glib_docs_override.xml, to generate some API reference from
	the C docs.
	* glib/src/Makefile.am: Mention the new files.

2004-12-19  Murray Cumming  <murrayc@murrayc.com>

	* docs/reference/: Added a copy of the libstdc++ doxygen tags file,
	but it still does not seem to work, for example with std::vector<>
	and std::string.

2004-12-19  Murray Cumming  <murrayc@murrayc.com>

	* docs/reference/Doxyfile.in: Use the libstdc++ TAG files, so that
	references to std:: classes take people to their docs.
	* glib/src/: Added glib_docs.xml and glib_docs_override.xml, and
	mentioned them in Makefile.am.

2004-12-19  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/date.hg, glib/glibmm/main.h,
	glib/glibmm/signalproxy_connectionnode.h: Deal with some doxygen
	warnings about undocumented parameters.
	* glib/glibmm/ustring.h: Added documentation for the size() and
	bytes() methods.

2004-11-21  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optionentry.[hg|ccg]: Removed OptionEntry enum and
	set_arg_data(), because they are not needed any more.

2.5.1:

2004-11-01  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optiongroup.[hg|ccg]: Added add_entry() for vector<ustring>
	and add_entry_filename() for std::string and vector<std::string>.
	* examples/options/main.cc: Test these new methods.

2004-10-30  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optiongroup.[hg|ccg]: Added gobj_give_ownership().
	* glib/src/optioncontext.[hg|ccg]: add_group(), set_main_group(): Use
	gobj_give_ownership() because GOptionContext deletes the GOptionGroups
	that we give it.

2004-10-26  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optionentry.hg: Remove accessors for arg and arg_data.
	* glib/src/optiongroup.[hg|ccg]: add_entry(): Remove arg_type parameter
	and instead add overrides which take specific C++ value types.
	Add CppOptionEntry inner class to hold information about each entry
	and its dynamically allocated C value.
	Add map_entries_ map to store them, so we can iterate over them during
	post_parse.

2004-10-21  Murray Cumming  <murrayc@murrayc.com>

	* build_shared/Makefile_build.am_fragment: Patch from Roger Leigh in
	bug # 15589 to use PLATFORM_WIN32 rather than OS_WIN32 to enable
	-no-undefined. This allows glibmm to build in a cgwin environment,
	apparently.

2.5.0:

2004-10-17  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/optioncontext.[hg|ccg]: add_entry(): Fixed crash by
	creating a temporary array, with a nulled last item, which is what the
	C function wants. In callbacks, ignore the group parameter because our
	option group in the data parameter is the same, and does not require
	construction of a second C++ wrapper instance for the same C instance.
	* glib/src/optiongroup.[hg|ccg]: Removed the cast constructor, because
	it is not needed anymore, and there is no clear way to implement it.

2004-10-14  Murray Cumming  <murrayc@murrayc.com>

 	* tools/pm/WrapParser.pm: on_wrap_property(): Convert property name to
 	canonical form, so that we can recognise notifications of property
 	value changes. Bug #152764.

2004-10-07  Philip Langdale  <plangdale@vmware.com>

	* glib/glibmm/signalproxy_connectionnode.cc: Remove unnecessary warning
	when notify() is called after destroy_notify_handler(). (bug #154498)

2004-10-01  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/option*.[hg|ccg], examples/options/main.cc: Rethought the
	structure now that I see how the parts work together. Rearranged the
	example to show how the parsing can fill values in member variables
	of a derived OptionGroup class. However, 1. it crashes now, 2. we need
	extra code to map the GOption C types to suitable C++ types, probably
	by doing pre and post parsing to create temporary C types for the C++
	types.

2004-09-27  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/option*.[hg|ccg]: Wrapped more methods, but I have still not
	finished.
	* examples/options/: Started an example.

2004-09-26  Murray Cumming  <murrayc@murrayc.com>

	* glib/src/glib_functions.defs: Regenerated with h2defs.py
	* glib/src/: Added optionentry.[hg|ccg], optiongroup.[hg|ccg],
	optioncontext.[hg|ccg].

2004-09-19  Murray Cumming  <murrayc@murrayc.com>

	* This is the HEAD branch.

2004-09-13  Cedric Gustin <cedric.gustin@swing.be>

	* examples/thread/dispatcher.cc: Fixed a race condition on win32
	that involved the combined use of auto_ptr and multithreading (bug
	#109966).

2.4.4:

2004-07-23  Martin Schulze  <mschulze@cvs.gnome.org>

	* glib/glibmm/main.cc: Move deletion of SourceConnectionNode object
	into destroy_notify_callback() exclusively; do not delete from
	notify().
	(bug #144420)

2004-07-10  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/signalproxy_connectionnode.cc: notify(): Do not delete
	the connection after disconnecting it, because disconnecting it
	always causes disconnect_notify to be called, so just delete it there.
	This prevents double deletes and reading of deleting memory, found in
	bug #145571.

2004-07-09  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/signalproxy.h.m4: Added some documentation.

2004-06-20  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/objectbase.cc: Spring cleaning.
	* glib/glibmm/object.cc: ditto.

2.4.3:

2004-06-18  Daniel Elstner  <daniel.elstner@gmx.net>

	* scripts/macros.m4 (GTKMM_ARG_ENABLE_WARNINGS): Add
	-Wno-long-long to the list of tried warning flags.

2004-06-16  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/dispatcher.cc (DispatchNotifier::create_pipe): There
	is no point in calling g_file_error_from_errno() on win32 since we
	have no real errno.  Also fix the error text to say "event" rather
	than "pipe".

2004-06-14  Daniel Elstner  <daniel.elstner@gmx.net>

	* scripts/cxx.m4: Add a couple of casts to void in order to suppress
	warnings about unused variables.  I still have no idea as to why the
	hardcore warning flags are remembered when running make distcheck...

2004-06-14  Daniel Elstner  <daniel.elstner@gmx.net>

	* examples/thread/dispatcher.cc: Explicitely join all threads.
	Hopefully that'll fix the crash on win32 (see bug #109966).

2004-06-13  Daniel Elstner  <daniel.elstner@gmx.net>

	* examples/thread/dispatcher*.cc (main): Remove unused parameter
	names to fix building with -Werror.

2004-06-13  Daniel Elstner  <daniel.elstner@gmx.net>

	* configure.in (GTKMM_ENABLE_DEBUG_REFCOUNTING): s/^GTK/GLIB/

2004-06-08  Daniel Elstner  <daniel.elstner@gmx.net>

	* build_shared/Makefile_build.am_fragment (all_includes): Remove
	left-over include paths for pango, atk, gdk and gtk.

2004-06-07  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/stringutils.h: Replace a couple of double quotes with
	&quot; to prevent doxygen from escaping the enclosed HTML entities.

2004-06-04  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/ustring.h: Use /*! instead of /** to introduce
	doxygen comments in order to avoid cluttering the long method list
	of class Glib::ustring.  Replace a few double quotes with &quot;
	to prevent doxygen from escaping the enclosed HTML entities.

2.4.2:

2004-06-03  Daniel Elstner  <daniel.elstner@gmx.net>

	* scripts/Makefile.am (EXTRA_DIST): Remove mkinstalldirs, because
	automake-1.8 doesn't use it anymore and prior versions should pick
	it up automatically anyway.

2004-06-03  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/dispatcher.cc: Complete overhaul of the Win32
	implementation of Glib::Dispatcher.  That is, mutex locking is
	done correctly now and dynamic memory allocation is no longer
	used, plus a few other cleanups.  See reopened bug #109966.

2004-06-03  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/signalproxy_connectionnode.cc
	(SignalProxyConnectionNode::SignalProxyConnectionNode):
	Reorder the initializer list to match the declaration order.

	(SignalProxyConnectionNode::notify): Add missing return 0.

2004-05-26  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/ustring.{cc,h}: Globally apply some minor code
	cleanup and optimization tweaks.

	(get_unichar_from_std_iterator): Replace implementation with a
	hand-optimized and profiled variant that has been lurking in my
	local tree for quite some time, thus should be well tested.
	Also add the G_GNUC_PURE() attribute.

	(operator+): Explicitely instantiate and return a temporary string,
	instead of accessing the reference ustring::operator+=() returns.
	This quite often allows the compiler to eliminate the additional
	copy constructor invocation.

2004-05-25  Murray Cumming  <murrayc@murrayc.com>

	* configure.in, Makefile.am: Removed the glibmm.spec files, because
	it is broken and nobody has volunteered to fix it.

2004-05-20  Daniel Elstner  <daniel.elstner@gmx.net>

	* examples/thread/dispatcher.cc: Revert last commit because it's
	silly.  To make the code truly exception-safe it would be necessary
	to either join all threads or to notify them, which is way beyond
	the scope of this example.

2004-05-20  Daniel Elstner  <daniel.elstner@gmx.net>

	* examples/thread/dispatcher.cc: Set a good example and
	be paranoid about possible memory leaks due to exeptions.

2004-05-20  Daniel Elstner  <daniel.elstner@gmx.net>

	* examples/thread/dispatcher.cc: Code cleanup.  Most importantly,
	get rid of the locking around std::cout since it obfuscates the
	purpose of using Glib::Dispatcher.

2004-05-13  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/object.{cc,h} (ConstructParams::ConstructParams):
	Implement the copy constructor in a way that actually works if used.
	Relying on the compiler to optimize it away is a bad idea. (#132300)

2004-05-04  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/ustring.h: Documented the constructors, based on
	the libstdc++ documentation, to make it clear that sizes are in
	characters rather than bytes.

2004-05-01  Murray Cumming  <murrayc@murrayc.com>

	* configure.in: Increase glib dependency to 2.4.0.

2004-04-30  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/gobject.m4: Allow use of _CUSTOM_DTOR(), needed by
	Gnome::Gda::Connection.

2.4.1:

2004-04-17  Murray Cumming  <murrayc@murrayc.com>

	* docs/reference/Makefile.am: Make the generated html depend on the
	beautify_docs.pl.in source instead of the generated beautify_docs.pl,
	so that the html is not rebuilt from tarballs.

2004-04-17  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/container_handle.h: Reimplemented more of the
	to_cpp_type() methods without using dependent methods, so that they
	work with g++ 3.4 (cvs versions).

2.4.0:

2004-04-11  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/WrapParser.pm, Output.pm, m4/signal.m4: Allow _WRAP_SIGNAL()
	to take an refreturn argument, so that Gtk::Widget::on_get_accessible()
	can do an extra ref before returning the Atk::Object.

2004-04-09  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/Output.pm: output_wrap_property(): Provide the actual
	property name as well as one with - replace with _, so we can
	test for the correct value in notification signal handler.
	* tools/m4/property.m4: Use the actual property name when calling
	C functions.

2.3.8:

2004-03-24  Murray Cumming  <murrayc@murrayc.com>

	* scripts/cxx.m4: Corrected parentheses, which cause the docs to be
	written into config.h. Thanks to Alexander Nedotsukov.

2004-03-23  Murray Cumming  <murrayc@murrayc.com>

	* scripts/cxx.m4: Corrected the ambiguous const template test, which
	failed on all platforms because it generated bad code.

2004-03-20  Martin Schulze  <mschulze@cvs.gnome.org>

	* glibmm/main.cc: Bug fix in SourceConnectionNode::notify() (#137030).

2004-03-18  Murray Cumming  <murrayc@murrayc.com>

 	* tools/generate_wrap_init.pl: Change a regex so that files are
 	included without full path. Apparently this helps when building outside
 	of the source directory, though I'm sceptical. By Victor Zverovich in
 	bug #137530.

2.3.7:

2004-03-14  Murray Cumming  <murrayc@murrayc.com>

        * scripts/sun.m4: Set the correct variable, so it is actually set in
	glibmmconfig.

2004-03-14  Murray Cumming  <murrayc@murrayc.com>
        * glib/glibmm/containerhandle_shared.h value.h: Used ifdef
        GLIBMM_HAVE_DISAMBIGUOUS_CONST_TEMPLATE_SPECIALIZATIONS to avoid
	problems with the SUN Forte compiler.

2004-03-14  Murray Cumming  <murrayc@murrayc.com>

	* scripts/cxx.m4: Added CAN_DISAMBIGUATE_CONST_TEMPLATE_SPECIALIZATIONS
	m4 macro to use in configure.in, to check for the SUN Forte problem -
	see the comments in cxx.m4.
	* scripts/sun.m4: Moved some brackets around to make the define
	actually work.

2004-03-13  Murray Cumming  <murrayc@murrayc.com>

	* glib/glibmm/containerhandle_shared.h: TypeTraits to_cpp_type()
	specializations: Use wrap_auto() directly instead of a specific
	wrap() overload that would be dependent. Needed for g++ 3.4.
	* glib/glibmm/containers.h: Same again.

2004-03-13  Murray Cumming  <murrayc@murrayc.com>

	* tools/m4/class_shared.m4: Remove the parent get_type() call from
	the Class::init() function, because it is optimised away, and g++ 3.4
	actually complains that it does nothing.
	* glib/glibmm/object.[h|cc]: Add a public ConstructParams copy
	constructor, needed by g++ 3.4. See comments in the code.
	* tests/glibmm_value/glibmm_value.cc: Instantiate instances of
	value types, to fix the g++ 3.4 build. I don't know what the code
	was meant to do before anyway.

2004-03-11  Murray Cumming  <murrayc@murrayc.com>

	* scripts/: Added sun.m4, copied from libsigc++-1.2/scripts and
	modified, so we can detect the SUN Forte compiler.
	* configure.in: Used the m4 macro.
	* glibmm/glibmm-config.h: Undef the GLIBMM_COMPILER_SUN_FORTE macro
	so that it will be defined if configure sets it.

2004-03-09  Murray Cumming  <murrayc@murrayc.com>

 	* Some, but not all, SUN Forte build fixes:
 	* tools/m4/convert_gdk.m4, convert_glib.m4: Use existing
 	sun-specific conversion when converting from any
 	RefPtr<const Something> to *Something.

2004-04-08  Hagen Moebius  <hagen.moebius@starschiffchen.de>

        * tools/pm/DocsParser.pm: Another change to give better warnings and
        errors at gmmproc-runtime. Further improvment of parsing parameter names
        to strip traling underscres. This not only for reference text, but for
        the parameter list also.

2004-04-07  Hagen Moebius  <hagen.moebius@starschiffchen.de>

	* tools/pm/DocsParser.pm: Allow overrides to only override
	part of the docs. Add a <mapping> tag to associate non-prefixed
	functions with classes. Improve parsing of parameter names so they
	can now have numbers in the names.

2.3.6:

2004-03-03  Murray Cumming  <murrayc@murrayc.com>

	* Added glib/glibmm/i18n.h and i18n-lib.h which defines _() and friends
	for internationalization. See the comments in the header - you must
	include things in the right order.
	* glib/src/spawn.[hg|ccg]: Added spawn_close_id() as wrapper for
	g_spawn_close_id().
	* glib/glibmm/main.[h|cc]: Added MainLoop::depth() as wrapper for
	g_main_depth().

 2004-03-02  Murray Cumming  <murrayc@murrayc.com>

	* tools/pm/Function.pm: parse_param(): Only parse const as an
	individual part of the type name if it is followed by a space, so
	that we can have const const_iterator& types.

2004-02-27  Martin Schulze  <teebaum@cvs.gnome.org>

  * CHANGES: Fix typo reported by Chris Vine.

2004-02-13  Martin Schulze  <teebaum@cvs.gnome.org>

	* documentation fixes and corrections in the comments reflecting
	the shift to libsigc++ 2.
	* make all source files in example thread use libsigc++ 2 instead
	of libsigc++ 1.2.

2.3.5:

2004-02-10  Murray Cumming  <murrayc@usa.net>

	* glibmm now uses libsigc++ 2 instead of libsigc++ 1.2. See bug
	#125061 for more details. We must update CHANGES later.

2.3.4:

2004-02-02  Murray Cumming  <murrayc@usa.net>

	* glib/glibmm/containerhandle_shared.h: Traits<const T*>: Added
	const_cast, needed by TreeView::get_columns() const: bug #126721.

2004-01-29  Murray Cumming  <murrayc@usa.net>

	* tools/pm/Parser.pm, Output.pm, tools/m4/signal.m4: Add an optional
	custom_c_callback parameter to _WRAP_SIGNAL to allow special code
	for the SelectionData& output parameter in Gtk::Widget signals.
	Hopefully we won't need too many more of these hacks - the m4 is
	becoming very hard to read, with all these nested ifelse() statements.

2004-01-27  Cedric Gustin  <cedric.gustin@swing.be>

	* build_shared/Makefile_build.am_fragment: Added win32-specific
	--export-all-symbols to linker flags. This is backported from
	gtkmm-2.2.
	* README.win32: Updated text for glibmm-2.4.
	* tools/generate_wrap_init.pl.in: Replaced GTKMM_WIN32 by the
	standard G_OS_WIN32.

2.3.3:

2004-01-22  Murray Cumming  <murrayc@usa.net>

	* glib/date.[hg|ccg]: Added clamp_min() and clamp_max() to wrap the
	case where g_date_clamp() takes null values.

2004-01-18  Alberto Paro  <alberto@paro.homeunxi.org>

	* glib/src/date.hg: documentated Glib::Date functions.
	* glib/glibmm/main.h: documentated Glib::MainLoop,Glib::MainContext
	and Glib::Source  functions.

2004-01-18  Murray Cumming  <murrayc@usa.net>

	* tools/pm/Output.pm, tools/m4/property.m4: When the property is not
	read-only, add a second read-only propertyproxy for the same property,
	with a const accessor. This allows setting of properties in const
	methods. Make all read-only propertyproxies have const accessors.
	* glib/glibmm/propertyproxy.h: Added class documentation.
	* tools/pm/Output.pm: Declare _vfuncs as virtual methods - fixing
	an error in my last change.

2004-01-16  Murray Cumming  <murrayc@usa.net>

	* tools/pm/Output.pm, tools/m4/vfunc.m4:
	- Generate const vfuncs when requested with _WRAP_VFUNC().
	- Put the *_vfunc() decleraration directly into the header, where
	the _WRAP_VFUNC() macro appears, instead of in a separate section.
	This allows us to add doxygen documentation before the _WRAP_VFUNC()
	in the .hg file. However, we must check that all of our _WRAP_VFUNC()
	macros are in protected: sections.

2004-01-12  Murray Cumming  <murrayc@usa.net>

	* glib/glibmm/object.cc: Object::Object() default constructor.
	Remove the warning because we really need this to implement a custom
	TreeModel. Derive a new GType, as in the
	Object::Object(ConstructParams) constructor. Like that constructor,
	the default one also assumes that you have called a suitable
	ObjectBase constructor, such as ObejctBase(typeid(MyCustomClass)).

2004-01-09  Murray Cumming  <murrayc@usa.net>

	* tools/pm/Output.pm: output_wrap_property(): Allow construct-only
	properties to be wrapped, as read-only properties.

2004-01-03  Murray Cumming  <murrayc@usa.net>

	* tools/gmmproc.in, pm/WrapParser.pm, DocsParser.pm: Removed the
	mergecdocs option - because we always want to merge C docs, to avoid
	accidental upload of half-complete docs.

2003-12-29  Murray Cumming  <murrayc@usa.net>

	* Makefile.am: Add scripts and tests directories to SUBDIRS instead of
	DIST_SUBDIRS, so that their Makefile.am files are actually used.
	* scripts/macros.m4: renamed GTKMM_CHECK_PERL() to GLIBMM_CHECK_PERL()
	and install it as glibmm_check_perl.m4, so that other *mm projects
	can use it. They need the PERL_PATH for Doxygen.

2003-12-22  Murray Cumming  <murrayc@usa.net>

	* docs/reference: generate beautify_docs.pl from beautify_docs.pl.in,
	so it can have the perl path in it. Install it, so other *mm
	modules can use it.

2003-12-13  Murray Cumming  <murrayc@usa.net>

	* tools/m4/*.m4: Added fuller Doxygen documentation to all gobj() and
	wrap() methods. Doxygen should not emit warnings about these now.

2.3.2:

2003-11-29  Murray Cumming  <murrayc@usa.net>

	* tools/m4/signal.m4: Add spaces inside signal_proxy template types,
	to avoid << and >> when using templated types.

2003-11-27  Murray Cumming  <murrayc@usa.net>

	* tools/pm/WrapParser.pm, Output.pm: Added WRAP_METHOD_DOCS_ONLY()
	macro.
	* docs/internal/using_gmmproc.txt: Explained the new macro.

2003-11-02  Murray Cumming  <murrayc@usa.net>

	* glib/glibmm/: Added init.[h|cc] with Glib::init() so that the
	gnomemm init() methods do not need to initialize gtkmm.
	* tools/m4/class_gobject.m4, class_gtkobject.m4: Added
	_GMMPROC_PROTECTED_GCLASS macro, needed by libgnomecanvasmm. This
	was not previously properly merged from gtkmm2.
	* tools/m4/property.m4: Re-added PropertyProxy reference documentation
	that did not survive a previous merge from gtkmm2.

2003-11-01  Murray Cumming  <murrayc@usa.net>

	* glib/glibmm/propertyproxy.h, propertyproxy_base.[h|cc]: Now uses
	ObjectBase instead of Object, because glib can now have properties
	on interfaces. This is needed, for instance, by the GtkFileChooser
	interface wrapper in gtkmm.
	* glib/glibmm/object.h: Moved get/set_property() methods into
	ObjectBase, for the same reason.
	* tools/pm/WrapParser.pm, Output.pm: Added optional no_default_handler
	parameter to gmmproc _WRAP_SIGNAL() macro, for signals whose
	default signal handler is not in the klass struct and therefore
	can not be overridden.

2003-10-31  Murray Cumming  <murrayc@usa.net>

	* docs/Makefile_web.am_fragment: Corrected install location,
	so that links from the gtkmm docs work when they are installed.

2003-10-30  Murray Cumming  <murrayc@usa.net>

	* docs: Added images directory, copied from gtkmm, for the reference
	html docs.
	* configure.in: Mention docs/images/Makefile.
	* docs/reference/Doxyfile.in: Genereate glibmm_doxygen_tags instead
	of gtkmm_doxygen_tags.
	* docs/reference/Makefile.am: dist glibmm_doxygen_tags.
	* docs/reference: gtkmm*.html_fragment are now glibmm*.html_fragment.

2.3.1:

2003-10-23  Murray Cumming  <murrayc@usa.net>

	* tools/pm/Output.pm: output_wrap_create(): Used
	args_types_and_names_with_default_values() intead of
	args_types_and_names(), so that create() functions .in .h files have
	the default values as specified in _WRAP_CREATE() in .hg files.
	* tools/pm/WrapParser.pm: on_ignore_signals(): Strip the quotes, to
  make _IGNORE_SIGNAL() really work in .hg files.

2003-10-02  J. Abelardo Gutierrez <jabelardo@cantv.net>

	* examples/threads/dispatcher.cc
	  examples/threads/dispatcher2.cc: fixed to cast out all gktmm code,
	now they only need glimm.
	* configure.in: Added examples/threads because they don't use gtkmm
	anymore.  Now all examples/threads compiles and run just fine.

2.3.0:

2003-09-30  Murray Cumming  <murrayc@usa.net>

	* configure.in: Removed examples/threads because we don't build or
	distribute it, because it doesn't build, because it uses gtkmm.

2003-09-30  Murray Cumming  <murrayc@usa.net>

	* glib/glibmm/object_base.h: ObjectBase inherits virtually from
	Sigc::Object. See bug #116280.

2003-09-27  Cedric Gustin  <cedric.gustin@swing.be>

 	* glib/glibmm/threadpool.cc: Removed
 	_GTKMMPROC_SIGNAL_H_AND_CC(#ifndef G_OS_WIN32) restrictions. These
 	functions are now implemented in the latest (2.2.4) GTK+ on win32.
 	* README.win32 : Updated list of unsupported functions.

2003-08-20  Frank Naumann  <fnaumann@freemint.de>

  	* glib/src/thread.hg,
  	  glib/src/unicode.hg: Warning bugfix for VisualStudio .NET 2003;
  	made wrapper functions returning bool from glib functions
  	returning int (C lacks builtin type bool) explicit by adding
  	an != 0 check. Otherwise VisualStudio .NET warn about implicit
  	int -> bool cast.

2003-07-26  Murray Cumming  <murrayc@usa.net>

 	* glib/glibmm/dispatcher.cc: Added #include <algorithm>, needed
 	by MSVC++, as suggested by Frank Naumann in bug #118215.

2003-05-31  Murray Cumming  <murrayc@usa.net>

	* tools/gmmproc.in: Corrected location of installed .pm files. They
	are now in a glibmm-2.3 folder instead of a glibmm-2.4 folder.

2003-05-14  Murray Cumming  <murrayc@usa.net>

	* Applied some of MSVC++ .NET 2003 changes from jburris. For instance,
	use of Gtk:: prefix with manage, because MSVC++ can not guess it. Also
	corrected the out-of-sync protected/private modifiers in the private
	gtype classes and their prototypes.

2003-05-09  Cedric Gustin  <cedric.gustin@swing.be>

        * glib/glibmm/dispatcher.cc: small typo in G_OS_WIN32 condition.

2003-05-07  Murray Cumming  <murrayc@usa.net>

	* scripts/macros.m4: Made the --enable-debug-refcounting configure
	option set GLIBMM_* instead of GTKMM_*.

2003-05-02  Murray Cumming  <murrayc@usa.net>

 	* tools/m4/*.m4: Added doxygen comments to gobj() methods.
 	* examples/markup/parser.cc: Commented-out a std::right that gcc 2.93
 	does not like.

2003-04-23  Andrew Makeev

	* glib/glibmm/dispatcher.cc: Added some #ifdefed code to implement
 	Glib::Dispatcher on WIN32. See comments with the code.

2003-04-22  Murray Cumming  <murrayc@usa.net>

	* Install headers in a glibmm-2.3 directory instead of glibmm-2.4,
	to be consistent with gtkmm 2.4.

2003-04-21  Murray Cumming  <murrayc@usa.net>

	* arrayhandle.h, listhandle, slisthandle.h:
	Glib::ListHandle, Glib::ListHandle, Glib::SListHandle: Added
	reference docs explaining that people can use STL containers.

2003-04-21  Murray Cumming  <murrayc@usa.net>

	* Removed examples/idle: It's now updated and in gtkmm/examples/book.

2003-04-19  Murray Cumming  <murrayc@usa.net>

	* tools/pm/GtkDefs.pm: get_unwrapped(): Changed some & to && to
	avoid warnings and because that is probably what they should be.

	* tools/m4/extra_defs_gen/generate_defs_glib.cc: Removed parameter
	names from main(), because they are not used. Avoid warning.

2003-03-26  Ross Burton  <ross@burtonini.com>

	* glib/src/module.hg: Added API documentation.

2003-03-18  Enrico Scholz  <enrico.scholz@informatik.tu-chemnitz.de>

	* scripts/*.m4, configure.in:
          Added description to several AC_DEFINE statements to make 'autoheader'
          happy
        * Makefile.am:
          Added ACLOCAL_AMFLAGS to make 'autoreconf' work

2003-03-18  Cedric Gustin  <cgustin@ibelgique.com>

  	* Makefile.am : removed examples from DIST_SUBDIRS

2003-03-18  Enrico Scholz  <enrico.scholz@informatik.tu-chemnitz.de>

	* examples/Makefile.am_fragment:  Added DESTDIR-support.

2003-03-14  Cedric Gustin  <cgustin@ibelgique.com>

	* Install examples. The are built by default too. Patch adapted for
	glibmm 2.4 by Murray Cumming.

2003-03-04  Cedric Gustin  <cgustin@ibelgique.com>

 	* configure.in : Removed libstdc++ in LDFLAGS on win32. Latest
 	libtool is taking care of it.
	* build_shared/Makefile_build.am_fragment,
	tools/extra_defs_gen/Makefile.am : Added
	--export-all-symbols linker flag on win32 (required by latest
 	libtool to build DLLs).
 	* build_shared/Makefile_gensrc.am_fragment : Modifiy rule that
 	builds wrap_init.cc. wrap_init.cc now contains reference to all
 	objects, event on win32. #ifdefs are included when needed.
	* README.win32 : updated for version 2.2. Added list of missing
 	methods and signals on win32
	* tools/m4/base.m4 : Added _GTKMMPROC_SIGNAL_H_AND_CC macro.


2003-03-14  Martin Schulze  <MHL.Schulze@t-online.de>

	* docs/internal/using_gtkmmproc.txt: Correct name of
	[...]signals.defs generation utiliy.

2003-01-30  Rick L Vinyard Jr <rvinyard@cs.nmsu.edu>

	* glib/src/thread.hg Cond: Add documentation

2003-01-27  Murray Cumming  <murrayc@usa.net>

	* glib/glibmm/refptr.h: Removed RefPtr<>::is_null() to encourage use
	of more pointer-like operator bool() instead. Wanted to remove clear()
	too, but there is no =0 equivalent yet.
	* tools/gmmproc.in: Change harcoded gtkmm-2.0/m4 path to glibmm-2.4/m4.

2003-01-22  Murray Cumming  <murrayc@usa.net>

	* GTKMM_ m4 tests and #defines are now prefixed with GLIBMM_

2003-01-21  Murray Cumming  <murrayc@usa.net>

	* tests/Makefile.am_fragment, examples/Makefile.am_fragment:
	Corrected LIBS and CFLAGS. Not all of these build because they
	use gtkmm stuff too. They need to be reduced to glibmm-only code.

2003-01-21  Murray Cumming <murrayc@usa.net>

	* glib/Makefile.am, glib/glibmm/Makefile.am: Install headers in
	glibmm-2.4 directory rather than gtkmm-2.4

2003-01-21  Murray Cumming  <murrayc@usa.net>

	* configure.in: Use GLIBMM_* instead of GTKMM_* to avoid config.h
	clashes with gtkmm 2.4.
	* glib/glibmm-2.4.pc.in: Correct cflags - report 2.4 instead of 2.0.

2003-01-21  Murray Cumming  <murrayc@usa.net>

	* tools/extra_defs_gen/Makefile.am: Changed extra_defs library name
	from 2.4 to 2.3, so it can be unstable.

2003-01-09  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/utility.h (GLIBMM_INITIALIZE_STRUCT): Replace
	__builtin_bzero() with __builtin_memset() because the former is
	deprecated.  Also, it looks like GCC is able to optimize the 0 case
	so we don't lose anything here.

2003-01-09  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/miscutils.cc (Glib::build_path): Reserve 256 bytes
	in advance to improve performance.

2003-01-09  Daniel Elstner  <daniel.elstner@gmx.net>

	* glib/glibmm/miscutils.{cc,h} (Glib::build_path): Fix to make it
	behave exactly like g_build_path().  (#102885, Jarek Dukat)

	(Glib::build_filename(const std::string&, const std::string&)):
	Implement in terms of Glib::build_path().

2003-01-21  Murray Cumming  <murrayc@usa.net>

	* Renamed gtkmmproc to gmmproc.

2003-01-08  Murray Cumming  <murrayc@usa.net>

	* glib/glibmm/refptr.h: Removed the operator=(CppObject*), as
	suggested in the TODO comment.

2003-01-08  Murray Cumming  <murrayc@usa.net>

	* make distcheck works.

2003-01-08  Murray Cumming  <murrayc@usa.net>

	* It now builds, though I haven' tried installing it. The
	library names and header directories should now all have 2.4
	instead of 2.0 in their name.

glibmm was previously part of gtkmm2.
