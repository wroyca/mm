// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/bufferedoutputstream.h>
#include <giomm/private/bufferedoutputstream_p.h>


/* Copyright (C) 2008 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gio.h>
#include <giomm/slot_async.h>

namespace Gio
{

Glib::RefPtr<BufferedOutputStream>
BufferedOutputStream::create_sized(const Glib::RefPtr<OutputStream>& base_stream, gsize size)
{
  return Glib::make_refptr_for_instance<Gio::BufferedOutputStream>(new BufferedOutputStream(base_stream, size));
}

} // namespace Gio

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::BufferedOutputStream> wrap(GBufferedOutputStream* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gio::BufferedOutputStream>( dynamic_cast<Gio::BufferedOutputStream*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& BufferedOutputStream_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &BufferedOutputStream_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_buffered_output_stream_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Seekable::add_interface(get_type());

  }

  return *this;
}


void BufferedOutputStream_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* BufferedOutputStream_Class::wrap_new(GObject* object)
{
  return new BufferedOutputStream((GBufferedOutputStream*)object);
}


/* The implementation: */

GBufferedOutputStream* BufferedOutputStream::gobj_copy()
{
  reference();
  return gobj();
}

BufferedOutputStream::BufferedOutputStream(const Glib::ConstructParams& construct_params)
:
  Gio::FilterOutputStream(construct_params)
{

}

BufferedOutputStream::BufferedOutputStream(GBufferedOutputStream* castitem)
:
  Gio::FilterOutputStream((GFilterOutputStream*)(castitem))
{}


BufferedOutputStream::BufferedOutputStream(BufferedOutputStream&& src) noexcept
: Gio::FilterOutputStream(std::move(src))
  , Seekable(std::move(src))
{}

BufferedOutputStream& BufferedOutputStream::operator=(BufferedOutputStream&& src) noexcept
{
  Gio::FilterOutputStream::operator=(std::move(src));
  Seekable::operator=(std::move(src));
  return *this;
}


BufferedOutputStream::~BufferedOutputStream() noexcept
{}


BufferedOutputStream::CppClassType BufferedOutputStream::bufferedoutputstream_class_; // initialize static member

GType BufferedOutputStream::get_type()
{
  return bufferedoutputstream_class_.init().get_type();
}


GType BufferedOutputStream::get_base_type()
{
  return g_buffered_output_stream_get_type();
}


BufferedOutputStream::BufferedOutputStream(const Glib::RefPtr<OutputStream>& base_stream)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gio::FilterOutputStream(Glib::ConstructParams(bufferedoutputstream_class_.init(), "base_stream", const_cast<GOutputStream*>(Glib::unwrap(base_stream)), nullptr))
{
  

}

BufferedOutputStream::BufferedOutputStream(const Glib::RefPtr<OutputStream>& base_stream, gsize buffer_size)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gio::FilterOutputStream(Glib::ConstructParams(bufferedoutputstream_class_.init(), "base_stream", const_cast<GOutputStream*>(Glib::unwrap(base_stream)), "buffer_size", buffer_size, nullptr))
{
  

}

Glib::RefPtr<BufferedOutputStream> BufferedOutputStream::create(const Glib::RefPtr<OutputStream>& base_stream)
{
  return Glib::make_refptr_for_instance<BufferedOutputStream>( new BufferedOutputStream(base_stream) );
}

gsize BufferedOutputStream::get_buffer_size() const
{
  return g_buffered_output_stream_get_buffer_size(const_cast<GBufferedOutputStream*>(gobj()));
}

void BufferedOutputStream::set_buffer_size(gsize size)
{
  g_buffered_output_stream_set_buffer_size(gobj(), size);
}

void BufferedOutputStream::set_auto_grow(bool auto_grow)
{
  g_buffered_output_stream_set_auto_grow(gobj(), static_cast<int>(auto_grow));
}

bool BufferedOutputStream::get_auto_grow() const
{
  return g_buffered_output_stream_get_auto_grow(const_cast<GBufferedOutputStream*>(gobj()));
}


Glib::PropertyProxy< guint > BufferedOutputStream::property_buffer_size() 
{
  return Glib::PropertyProxy< guint >(this, "buffer-size");
}

Glib::PropertyProxy_ReadOnly< guint > BufferedOutputStream::property_buffer_size() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "buffer-size");
}

Glib::PropertyProxy< bool > BufferedOutputStream::property_auto_grow() 
{
  return Glib::PropertyProxy< bool >(this, "auto-grow");
}

Glib::PropertyProxy_ReadOnly< bool > BufferedOutputStream::property_auto_grow() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "auto-grow");
}


} // namespace Gio


