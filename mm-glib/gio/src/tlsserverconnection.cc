// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <giomm/tlsserverconnection.h>
#include <giomm/private/tlsserverconnection_p.h>


/* Copyright (C) 2013 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gio.h>
#include <giomm/tlsserverconnectionimpl.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::TlsServerConnection> wrap(GTlsServerConnection* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gio::TlsServerConnection>( dynamic_cast<Gio::TlsServerConnection*> (Glib::wrap_auto_interface<Gio::TlsServerConnection> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gio
{


/* The *_Class implementation: */

const Glib::Interface_Class& TlsServerConnection_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &TlsServerConnection_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = g_tls_server_connection_get_type();
  }

  return *this;
}

void TlsServerConnection_Class::iface_init_function(void* g_iface, void*)
{
  const auto klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != nullptr);


}


Glib::ObjectBase* TlsServerConnection_Class::wrap_new(GObject* object)
{
  return new TlsServerConnection((GTlsServerConnection*)(object));
}


/* The implementation: */

TlsServerConnection::TlsServerConnection()
:
  Glib::Interface(tlsserverconnection_class_.init())
{}

TlsServerConnection::TlsServerConnection(GTlsServerConnection* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

TlsServerConnection::TlsServerConnection(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

TlsServerConnection::TlsServerConnection(TlsServerConnection&& src) noexcept
: Glib::Interface(std::move(src))
{}

TlsServerConnection& TlsServerConnection::operator=(TlsServerConnection&& src) noexcept
{
  Glib::Interface::operator=(std::move(src));
  return *this;
}

TlsServerConnection::~TlsServerConnection() noexcept
{}

// static
void TlsServerConnection::add_interface(GType gtype_implementer)
{
  tlsserverconnection_class_.init().add_interface(gtype_implementer);
}

TlsServerConnection::CppClassType TlsServerConnection::tlsserverconnection_class_; // initialize static member

GType TlsServerConnection::get_type()
{
  return tlsserverconnection_class_.init().get_type();
}


GType TlsServerConnection::get_base_type()
{
  return g_tls_server_connection_get_type();
}


Glib::RefPtr<TlsServerConnectionImpl> TlsServerConnection::create(const Glib::RefPtr<IOStream>& base_io_stream, const Glib::RefPtr<TlsCertificate>& certificate)
{
  GError* gerror = nullptr;
  auto retvalue = std::dynamic_pointer_cast<TlsServerConnectionImpl>(Glib::wrap(G_TLS_CONNECTION(g_tls_server_connection_new(Glib::unwrap(base_io_stream), Glib::unwrap(certificate), &(gerror)))));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  return retvalue;
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<TlsAuthenticationMode>::value,
  "Type TlsAuthenticationMode cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< TlsAuthenticationMode > TlsServerConnection::property_authentication_mode() 
{
  return Glib::PropertyProxy< TlsAuthenticationMode >(this, "authentication-mode");
}

Glib::PropertyProxy_ReadOnly< TlsAuthenticationMode > TlsServerConnection::property_authentication_mode() const
{
  return Glib::PropertyProxy_ReadOnly< TlsAuthenticationMode >(this, "authentication-mode");
}


} // namespace Gio


