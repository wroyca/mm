# Interface dependencies.
#
import intf_libs =  gio-2.0%lib{gio-2.0}
if ($cxx.target.class != 'windows')
import intf_libs =+ gio-unix-2.0%lib{gio-unix-2.0}

# Implementation dependencies.
#
import impl_libs = libmm-glib%lib{mm-glib}

# This block specifies the sources and headers used by the mm-gio library.
#
# While most of gio is available on Windows, these specific sources and headers are not:
#   - unixfdlist
#   - unixcredentialsmessage
#   - unixfdmessage
#   - desktopappinfo
#   - unixfdmessage_p
#   - desktopappinfo_p
#
# These sources and headers define functions and classes that are only available on Unix-like systems.
# Specifically, unixfdmessage_p provides a private implementation of the Unix file descriptor message
# protocol, and desktopappinfo_p provides access to information about desktop applications.
#
# The library is built with different options depending on the platform. On Windows, the sources that
# are not available are excluded, whereas they are included for Unix-like systems.
#
lib{mm-gio}:              {hxx ixx txx cxx}\
{                                          \
  **                                       \
  -version                                 \
  -unixfdlist                              \
  -unixcredentialsmessage                  \
  -unixfdmessage_p                         \
  -unixfdmessage                           \
  -desktopappinfo                          \
  -desktopappinfo_p                        \
}                                          \
                                        hxx\
{                                          \
  version                                  \
}                                          \
$impl_libs $intf_libs

lib{mm-gio}:                            cxx\
{                                          \
  unixfdlist                               \
  unixcredentialsmessage                   \
  unixfdmessage                            \
  desktopappinfo                           \
}:                                         \
include = ($cxx.target.class != 'windows')

lib{mm-gio}:                            hxx\
{                                          \
  unixfdmessage_p                          \
  desktopappinfo_p                         \
}:                                         \
include = ($cxx.target.class != 'windows')

hxx{version}: in{version} $src_root/manifest

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"
cxx.loptions =+ "/LIBPATH:C:/gnome/lib"

{hbmia obja}{*}: cxx.poptions += -DLIBMM_GIO_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DLIBMM_GIO_SHARED_BUILD

# Export options.
#
lib{mm-gio}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{mm-gio}: cxx.export.poptions += -DLIBMM_GIO_STATIC
libs{mm-gio}: cxx.export.poptions += -DLIBMM_GIO_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{mm-gio}: bin.lib.version = "-$version.project_id"
else
  lib{mm-gio}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libmm-gio/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libmm-gio/
  install.subdirs = true
}
