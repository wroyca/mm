// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.hpp>

#include <mm/gio/error.hpp>
#include <mm/gio/private/error_p.hpp>


/* Copyright (C) 2007 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gio.h>

namespace Gio
{

} // namespace Gio

namespace
{
} // anonymous namespace


Gio::Error::Error(Gio::Error::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (G_IO_ERROR, error_code, error_message)
{}

Gio::Error::Error(GError* gobject)
:
  Glib::Error (gobject)
{}

auto Gio::Error::code() const -> Gio::Error::Code
{
  return static_cast<Code>(Glib::Error::code());
}

auto Gio::Error::throw_func (GError *gobject) -> void
{
  throw Gio::Error(gobject);
}


Gio::ResolverError::ResolverError(Gio::ResolverError::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (G_RESOLVER_ERROR, error_code, error_message)
{}

Gio::ResolverError::ResolverError(GError* gobject)
:
  Glib::Error (gobject)
{}

auto Gio::ResolverError::code() const -> Gio::ResolverError::Code
{
  return static_cast<Code>(Glib::Error::code());
}

auto Gio::ResolverError::throw_func (GError *gobject) -> void
{
  throw Gio::ResolverError(gobject);
}


Gio::TlsError::TlsError(Gio::TlsError::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (G_TLS_ERROR, error_code, error_message)
{}

Gio::TlsError::TlsError(GError* gobject)
:
  Glib::Error (gobject)
{}

auto Gio::TlsError::code() const -> Gio::TlsError::Code
{
  return static_cast<Code>(Glib::Error::code());
}

auto Gio::TlsError::throw_func (GError *gobject) -> void
{
  throw Gio::TlsError(gobject);
}


