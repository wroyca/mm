// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gio/appinfomonitor.h>
#include <mm/gio/private/appinfomonitor_p.h>


/* Copyright (C) 2022 The giomm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gio/gio.h>

namespace Gio
{

} // namespace Gio

namespace
{


static const Glib::SignalProxyInfo AppInfoMonitor_signal_changed_info =
{
  "changed",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gio::AppInfoMonitor> wrap(GAppInfoMonitor* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gio::AppInfoMonitor>( dynamic_cast<Gio::AppInfoMonitor*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gio
{


/* The *_Class implementation: */

const Glib::Class& AppInfoMonitor_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &AppInfoMonitor_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(g_app_info_monitor_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void AppInfoMonitor_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* AppInfoMonitor_Class::wrap_new(GObject* object)
{
  return new AppInfoMonitor((GAppInfoMonitor*)object);
}


/* The implementation: */

GAppInfoMonitor* AppInfoMonitor::gobj_copy()
{
  reference();
  return gobj();
}

AppInfoMonitor::AppInfoMonitor(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

AppInfoMonitor::AppInfoMonitor(GAppInfoMonitor* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


AppInfoMonitor::AppInfoMonitor(AppInfoMonitor&& src) noexcept
: Glib::Object(std::move(src))
{}

AppInfoMonitor& AppInfoMonitor::operator=(AppInfoMonitor&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  return *this;
}


AppInfoMonitor::~AppInfoMonitor() noexcept
{}


AppInfoMonitor::CppClassType AppInfoMonitor::appinfomonitor_class_; // initialize static member

GType AppInfoMonitor::get_type()
{
  return appinfomonitor_class_.init().get_type();
}


GType AppInfoMonitor::get_base_type()
{
  return g_app_info_monitor_get_type();
}


Glib::RefPtr<AppInfoMonitor> AppInfoMonitor::get()
{
  return Glib::wrap(g_app_info_monitor_get());
}


Glib::SignalProxy<void()> AppInfoMonitor::signal_changed()
{
  return Glib::SignalProxy<void() >(this, &AppInfoMonitor_signal_changed_info);
}


} // namespace Gio


