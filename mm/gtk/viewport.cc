// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/viewport.h>
#include <mm/gtk/private/viewport_p.h>


/*
 * Copyright 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <mm/gtk/viewport.h>
#include <mm/gtk/adjustment.h>
#include <gtk/gtk.h>

namespace Gtk
{

void Viewport::unset_child()
{
  gtk_viewport_set_child(gobj(), nullptr);
}

} // namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::Viewport* wrap(GtkViewport* object, bool take_copy)
{
  return dynamic_cast<Gtk::Viewport *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Viewport_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Viewport_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_viewport_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Scrollable::add_interface(get_type());

  }

  return *this;
}


void Viewport_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Viewport_Class::wrap_new(GObject* o)
{
  return manage(new Viewport((GtkViewport*)(o)));

}


/* The implementation: */

Viewport::Viewport(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

Viewport::Viewport(GtkViewport* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }


Viewport::Viewport(Viewport&& src) noexcept
: Gtk::Widget(std::move(src))
  , Scrollable(std::move(src))
{}

Viewport& Viewport::operator=(Viewport&& src) noexcept
{
  Gtk::Widget::operator=(std::move(src));
  Scrollable::operator=(std::move(src));
  return *this;
}

Viewport::~Viewport() noexcept
{
  destroy_();
}

Viewport::CppClassType Viewport::viewport_class_; // initialize static member

GType Viewport::get_type()
{
  return viewport_class_.init().get_type();
}


GType Viewport::get_base_type()
{
  return gtk_viewport_get_type();
}


Viewport::Viewport(const Glib::RefPtr<Adjustment>& hadjustment, const Glib::RefPtr<Adjustment>& vadjustment)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Widget(Glib::ConstructParams(viewport_class_.init(), "hadjustment", Glib::unwrap(hadjustment), "vadjustment", Glib::unwrap(vadjustment), nullptr))
{


}

void Viewport::set_scroll_to_focus(bool scroll_to_focus)
{
  gtk_viewport_set_scroll_to_focus(gobj(), static_cast<int>(scroll_to_focus));
}

bool Viewport::get_scroll_to_focus() const
{
  return gtk_viewport_get_scroll_to_focus(const_cast<GtkViewport*>(gobj()));
}

void Viewport::set_child(Widget& child)
{
  gtk_viewport_set_child(gobj(), (child).gobj());
}

Widget* Viewport::get_child()
{
  return Glib::wrap(gtk_viewport_get_child(gobj()));
}

const Widget* Viewport::get_child() const
{
  return const_cast<Viewport*>(this)->get_child();
}


Glib::PropertyProxy< bool > Viewport::property_scroll_to_focus()
{
  return Glib::PropertyProxy< bool >(this, "scroll-to-focus");
}

Glib::PropertyProxy_ReadOnly< bool > Viewport::property_scroll_to_focus() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "scroll-to-focus");
}

Glib::PropertyProxy< Widget* > Viewport::property_child()
{
  return Glib::PropertyProxy< Widget* >(this, "child");
}

Glib::PropertyProxy_ReadOnly< Widget* > Viewport::property_child() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "child");
}


} // namespace Gtk


