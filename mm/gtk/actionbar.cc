// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/actionbar.h>
#include <mm/gtk/private/actionbar_p.h>


/*
 * Copyright 2013 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>


namespace Gtk
{

void ActionBar::unset_center_widget()
{
  gtk_action_bar_set_center_widget(gobj(), nullptr);
}

} // namespace Gtk


namespace
{
} // anonymous namespace


namespace Glib
{

auto wrap(GtkActionBar* object, bool take_copy) -> Gtk::ActionBar*
{
  return dynamic_cast<Gtk::ActionBar *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

auto ActionBar_Class::init() -> const Glib::Class&
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ActionBar_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_action_bar_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void ActionBar_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


auto ActionBar_Class::wrap_new(GObject* o) -> Glib::ObjectBase*
{
  return manage(new ActionBar((GtkActionBar*)(o)));

}


/* The implementation: */

ActionBar::ActionBar(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

ActionBar::ActionBar(GtkActionBar* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }


ActionBar::ActionBar(ActionBar&& src) noexcept
: Gtk::Widget(std::move(src))
{}

auto ActionBar::operator=(ActionBar&& src) noexcept -> ActionBar&
{
  Gtk::Widget::operator=(std::move(src));
  return *this;
}

ActionBar::~ActionBar() noexcept
{
  destroy_();
}

ActionBar::CppClassType ActionBar::actionbar_class_; // initialize static member

auto ActionBar::get_type() -> GType
{
  return actionbar_class_.init().get_type();
}


auto ActionBar::get_base_type() -> GType
{
  return gtk_action_bar_get_type();
}


ActionBar::ActionBar()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Widget(Glib::ConstructParams(actionbar_class_.init()))
{


}

void ActionBar::pack_start(Gtk::Widget& child)
{
  gtk_action_bar_pack_start(gobj(), (child).gobj());
}

void ActionBar::pack_end(Gtk::Widget& child)
{
  gtk_action_bar_pack_end(gobj(), (child).gobj());
}

void ActionBar::remove(Gtk::Widget& child)
{
  gtk_action_bar_remove(gobj(), (child).gobj());
}

auto ActionBar::get_center_widget() -> Widget*
{
  return Glib::wrap(gtk_action_bar_get_center_widget(gobj()));
}

auto ActionBar::get_center_widget() const -> const Widget*
{
  return const_cast<ActionBar*>(this)->get_center_widget();
}

void ActionBar::set_center_widget(Widget& center_widget)
{
  gtk_action_bar_set_center_widget(gobj(), (center_widget).gobj());
}

void ActionBar::set_revealed(bool revealed)
{
  gtk_action_bar_set_revealed(gobj(), static_cast<int>(revealed));
}

auto ActionBar::get_revealed() const -> bool
{
  return gtk_action_bar_get_revealed(const_cast<GtkActionBar*>(gobj()));
}


auto ActionBar::property_revealed() -> Glib::PropertyProxy< bool >
{
  return Glib::PropertyProxy< bool >(this, "revealed");
}

auto ActionBar::property_revealed() const -> Glib::PropertyProxy_ReadOnly< bool >
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "revealed");
}


} // namespace Gtk


