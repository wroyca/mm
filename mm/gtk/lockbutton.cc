// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/lockbutton.h>
#include <mm/gtk/private/lockbutton_p.h>


/*
 * Copyright 2014 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>


namespace Gtk
{

void LockButton::unset_permission()
{
  gtk_lock_button_set_permission(gobj(), nullptr);
}

} // namespace Gtk


namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::LockButton* wrap(GtkLockButton* object, bool take_copy)
{
  return dynamic_cast<Gtk::LockButton *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& LockButton_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &LockButton_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_lock_button_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void LockButton_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* LockButton_Class::wrap_new(GObject* o)
{
  return manage(new LockButton((GtkLockButton*)(o)));

}


/* The implementation: */

LockButton::LockButton(const Glib::ConstructParams& construct_params)
:
  Gtk::Button(construct_params)
{
  }

LockButton::LockButton(GtkLockButton* castitem)
:
  Gtk::Button((GtkButton*)(castitem))
{
  }


LockButton::LockButton(LockButton&& src) noexcept
: Gtk::Button(std::move(src))
{}

LockButton& LockButton::operator=(LockButton&& src) noexcept
{
  Gtk::Button::operator=(std::move(src));
  return *this;
}

LockButton::~LockButton() noexcept
{
  destroy_();
}

LockButton::CppClassType LockButton::lockbutton_class_; // initialize static member

GType LockButton::get_type()
{
  return lockbutton_class_.init().get_type();
}


GType LockButton::get_base_type()
{
  return gtk_lock_button_get_type();
}


LockButton::LockButton()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Button(Glib::ConstructParams(lockbutton_class_.init()))
{


}

LockButton::LockButton(const Glib::RefPtr<const Gio::Permission>& permission)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Button(Glib::ConstructParams(lockbutton_class_.init(), "permission", const_cast<GPermission*>(Glib::unwrap<Gio::Permission>(permission)), nullptr))
{


}

Glib::RefPtr<Gio::Permission> LockButton::get_permission()
{
  auto retvalue = Glib::wrap(gtk_lock_button_get_permission(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Gio::Permission> LockButton::get_permission() const
{
  return const_cast<LockButton*>(this)->get_permission();
}

void LockButton::set_permission(const Glib::RefPtr<const Gio::Permission>& permission)
{
  gtk_lock_button_set_permission(gobj(), const_cast<GPermission*>(Glib::unwrap<Gio::Permission>(permission)));
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Glib::RefPtr<Gio::Permission>>::value,
  "Type Glib::RefPtr<Gio::Permission> cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< Glib::RefPtr<Gio::Permission> > LockButton::property_permission()
{
  return Glib::PropertyProxy< Glib::RefPtr<Gio::Permission> >(this, "permission");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::Permission> > LockButton::property_permission() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::Permission> >(this, "permission");
}

Glib::PropertyProxy< Glib::ustring > LockButton::property_text_lock()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "text-lock");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > LockButton::property_text_lock() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "text-lock");
}

Glib::PropertyProxy< Glib::ustring > LockButton::property_text_unlock()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "text-unlock");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > LockButton::property_text_unlock() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "text-unlock");
}

Glib::PropertyProxy< Glib::ustring > LockButton::property_tooltip_lock()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "tooltip-lock");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > LockButton::property_tooltip_lock() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "tooltip-lock");
}

Glib::PropertyProxy< Glib::ustring > LockButton::property_tooltip_unlock()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "tooltip-unlock");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > LockButton::property_tooltip_unlock() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "tooltip-unlock");
}

Glib::PropertyProxy< Glib::ustring > LockButton::property_tooltip_not_authorized()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "tooltip-not-authorized");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > LockButton::property_tooltip_not_authorized() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "tooltip-not-authorized");
}


} // namespace Gtk


