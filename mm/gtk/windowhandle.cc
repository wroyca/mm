// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/windowhandle.h>
#include <mm/gtk/private/windowhandle_p.h>


/* Copyright (C) 2020 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

namespace Gtk
{

void WindowHandle::unset_child()
{
  gtk_window_handle_set_child(gobj(), nullptr);
}

} // namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::WindowHandle* wrap(GtkWindowHandle* object, bool take_copy)
{
  return dynamic_cast<Gtk::WindowHandle *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& WindowHandle_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &WindowHandle_Class::class_init_function;

    // Do not derive a GType, or use a derived class:
    gtype_ = gtk_window_handle_get_type();

  }

  return *this;
}


void WindowHandle_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* WindowHandle_Class::wrap_new(GObject* o)
{
  return manage(new WindowHandle((GtkWindowHandle*)(o)));

}


/* The implementation: */

WindowHandle::WindowHandle(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

WindowHandle::WindowHandle(GtkWindowHandle* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }


WindowHandle::WindowHandle(WindowHandle&& src) noexcept
: Gtk::Widget(std::move(src))
{}

WindowHandle& WindowHandle::operator=(WindowHandle&& src) noexcept
{
  Gtk::Widget::operator=(std::move(src));
  return *this;
}

WindowHandle::~WindowHandle() noexcept
{
  destroy_();
}

WindowHandle::CppClassType WindowHandle::windowhandle_class_; // initialize static member

GType WindowHandle::get_type()
{
  return windowhandle_class_.init().get_type();
}


GType WindowHandle::get_base_type()
{
  return gtk_window_handle_get_type();
}


WindowHandle::WindowHandle()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Widget(Glib::ConstructParams(windowhandle_class_.init()))
{


}

void WindowHandle::set_child(Widget& child)
{
  gtk_window_handle_set_child(gobj(), (child).gobj());
}

Widget* WindowHandle::get_child()
{
  return Glib::wrap(gtk_window_handle_get_child(gobj()));
}

const Widget* WindowHandle::get_child() const
{
  return const_cast<WindowHandle*>(this)->get_child();
}


Glib::PropertyProxy< Widget* > WindowHandle::property_child()
{
  return Glib::PropertyProxy< Widget* >(this, "child");
}

Glib::PropertyProxy_ReadOnly< Widget* > WindowHandle::property_child() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "child");
}


} // namespace Gtk


