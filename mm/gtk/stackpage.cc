// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/stackpage.h>
#include <mm/gtk/private/stackpage_p.h>


/* Copyright (C) 2019 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <mm/gtk/widget.h>
#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::StackPage> wrap(GtkStackPage* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::StackPage>( dynamic_cast<Gtk::StackPage*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& StackPage_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &StackPage_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_stack_page_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Accessible::add_interface(get_type());

  }

  return *this;
}


void StackPage_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* StackPage_Class::wrap_new(GObject* object)
{
  return new StackPage((GtkStackPage*)object);
}


/* The implementation: */

GtkStackPage* StackPage::gobj_copy()
{
  reference();
  return gobj();
}

StackPage::StackPage(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

StackPage::StackPage(GtkStackPage* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


StackPage::StackPage(StackPage&& src) noexcept
: Glib::Object(std::move(src))
  , Accessible(std::move(src))
{}

StackPage& StackPage::operator=(StackPage&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  Accessible::operator=(std::move(src));
  return *this;
}


StackPage::~StackPage() noexcept
{}


StackPage::CppClassType StackPage::stackpage_class_; // initialize static member

GType StackPage::get_type()
{
  return stackpage_class_.init().get_type();
}


GType StackPage::get_base_type()
{
  return gtk_stack_page_get_type();
}


Widget* StackPage::get_child()
{
  return Glib::wrap(gtk_stack_page_get_child(gobj()));
}

const Widget* StackPage::get_child() const
{
  return const_cast<StackPage*>(this)->get_child();
}

bool StackPage::get_visible() const
{
  return gtk_stack_page_get_visible(const_cast<GtkStackPage*>(gobj()));
}

void StackPage::set_visible(bool visible)
{
  gtk_stack_page_set_visible(gobj(), static_cast<int>(visible));
}

bool StackPage::get_needs_attention() const
{
  return gtk_stack_page_get_needs_attention(const_cast<GtkStackPage*>(gobj()));
}

void StackPage::set_needs_attention(bool setting)
{
  gtk_stack_page_set_needs_attention(gobj(), static_cast<int>(setting));
}

bool StackPage::get_use_underline() const
{
  return gtk_stack_page_get_use_underline(const_cast<GtkStackPage*>(gobj()));
}

void StackPage::set_use_underline(bool setting)
{
  gtk_stack_page_set_use_underline(gobj(), static_cast<int>(setting));
}

Glib::ustring StackPage::get_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_stack_page_get_name(const_cast<GtkStackPage*>(gobj())));
}

void StackPage::set_name(const Glib::ustring& setting)
{
  gtk_stack_page_set_name(gobj(), setting.c_str());
}

Glib::ustring StackPage::get_title() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_stack_page_get_title(const_cast<GtkStackPage*>(gobj())));
}

void StackPage::set_title(const Glib::ustring& setting)
{
  gtk_stack_page_set_title(gobj(), setting.c_str());
}

Glib::ustring StackPage::get_icon_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_stack_page_get_icon_name(const_cast<GtkStackPage*>(gobj())));
}

void StackPage::set_icon_name(const Glib::ustring& setting)
{
  gtk_stack_page_set_icon_name(gobj(), setting.c_str());
}


Glib::PropertyProxy_ReadOnly< Widget* > StackPage::property_child() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "child");
}

Glib::PropertyProxy< Glib::ustring > StackPage::property_name()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "name");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > StackPage::property_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "name");
}

Glib::PropertyProxy< Glib::ustring > StackPage::property_title()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "title");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > StackPage::property_title() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "title");
}

Glib::PropertyProxy< Glib::ustring > StackPage::property_icon_name()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "icon-name");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > StackPage::property_icon_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "icon-name");
}

Glib::PropertyProxy< bool > StackPage::property_needs_attention()
{
  return Glib::PropertyProxy< bool >(this, "needs-attention");
}

Glib::PropertyProxy_ReadOnly< bool > StackPage::property_needs_attention() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "needs-attention");
}

Glib::PropertyProxy< bool > StackPage::property_visible()
{
  return Glib::PropertyProxy< bool >(this, "visible");
}

Glib::PropertyProxy_ReadOnly< bool > StackPage::property_visible() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "visible");
}

Glib::PropertyProxy< bool > StackPage::property_use_underline()
{
  return Glib::PropertyProxy< bool >(this, "use-underline");
}

Glib::PropertyProxy_ReadOnly< bool > StackPage::property_use_underline() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "use-underline");
}


} // namespace Gtk


