// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/headerbar.h>
#include <mm/gtk/private/headerbar_p.h>


/*
 * Copyright 2013 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>


namespace Gtk
{

void HeaderBar::unset_decoration_layout()
{
  gtk_header_bar_set_decoration_layout(gobj(), nullptr);
}

} // namespace Gtk


namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::HeaderBar* wrap(GtkHeaderBar* object, bool take_copy)
{
  return dynamic_cast<Gtk::HeaderBar *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& HeaderBar_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &HeaderBar_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_header_bar_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void HeaderBar_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* HeaderBar_Class::wrap_new(GObject* o)
{
  return manage(new HeaderBar((GtkHeaderBar*)(o)));

}


/* The implementation: */

HeaderBar::HeaderBar(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

HeaderBar::HeaderBar(GtkHeaderBar* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }


HeaderBar::HeaderBar(HeaderBar&& src) noexcept
: Gtk::Widget(std::move(src))
{}

HeaderBar& HeaderBar::operator=(HeaderBar&& src) noexcept
{
  Gtk::Widget::operator=(std::move(src));
  return *this;
}

HeaderBar::~HeaderBar() noexcept
{
  destroy_();
}

HeaderBar::CppClassType HeaderBar::headerbar_class_; // initialize static member

GType HeaderBar::get_type()
{
  return headerbar_class_.init().get_type();
}


GType HeaderBar::get_base_type()
{
  return gtk_header_bar_get_type();
}


HeaderBar::HeaderBar()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Widget(Glib::ConstructParams(headerbar_class_.init()))
{


}

void HeaderBar::set_title_widget(Gtk::Widget& title_widget)
{
  gtk_header_bar_set_title_widget(gobj(), (title_widget).gobj());
}

Widget* HeaderBar::get_title_widget()
{
  return Glib::wrap(gtk_header_bar_get_title_widget(gobj()));
}

const Widget* HeaderBar::get_title_widget() const
{
  return const_cast<HeaderBar*>(this)->get_title_widget();
}

void HeaderBar::pack_start(Gtk::Widget& child)
{
  gtk_header_bar_pack_start(gobj(), (child).gobj());
}

void HeaderBar::pack_end(Gtk::Widget& child)
{
  gtk_header_bar_pack_end(gobj(), (child).gobj());
}

void HeaderBar::remove(Gtk::Widget& child)
{
  gtk_header_bar_remove(gobj(), (child).gobj());
}

void HeaderBar::set_show_title_buttons(bool setting)
{
  gtk_header_bar_set_show_title_buttons(gobj(), static_cast<int>(setting));
}

bool HeaderBar::get_show_title_buttons() const
{
  return gtk_header_bar_get_show_title_buttons(const_cast<GtkHeaderBar*>(gobj()));
}

void HeaderBar::set_decoration_layout(const Glib::ustring& layout)
{
  gtk_header_bar_set_decoration_layout(gobj(), layout.c_str());
}

Glib::ustring HeaderBar::get_decoration_layout() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_header_bar_get_decoration_layout(const_cast<GtkHeaderBar*>(gobj())));
}


Glib::PropertyProxy< Gtk::Widget* > HeaderBar::property_title_widget()
{
  return Glib::PropertyProxy< Gtk::Widget* >(this, "title-widget");
}

Glib::PropertyProxy_ReadOnly< Gtk::Widget* > HeaderBar::property_title_widget() const
{
  return Glib::PropertyProxy_ReadOnly< Gtk::Widget* >(this, "title-widget");
}

Glib::PropertyProxy< bool > HeaderBar::property_show_title_buttons()
{
  return Glib::PropertyProxy< bool >(this, "show-title-buttons");
}

Glib::PropertyProxy_ReadOnly< bool > HeaderBar::property_show_title_buttons() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "show-title-buttons");
}

Glib::PropertyProxy< Glib::ustring > HeaderBar::property_decoration_layout()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "decoration-layout");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > HeaderBar::property_decoration_layout() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "decoration-layout");
}


} // namespace Gtk


