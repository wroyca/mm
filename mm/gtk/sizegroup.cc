// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/sizegroup.h>
#include <mm/gtk/private/sizegroup_p.h>

#include <gtk/gtk.h>

/*
 * Copyright 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <mm/glib/vectorutils.h>

#include <gtk/gtk.h>

using Mode = Gtk::SizeGroup::Mode;

namespace Gtk
{

SizeGroup::SizeGroup(Mode mode)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(sizegroup_class_.init(), "mode",(GtkSizeGroupMode) mode, nullptr))
{}

} // namespace Gtk


namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gtk::SizeGroup::Mode>::value_type()
{
  return gtk_size_group_mode_get_type();
}


namespace Glib
{

Glib::RefPtr<Gtk::SizeGroup> wrap(GtkSizeGroup* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::SizeGroup>( dynamic_cast<Gtk::SizeGroup*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& SizeGroup_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SizeGroup_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_size_group_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Buildable::add_interface(get_type());

  }

  return *this;
}


void SizeGroup_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* SizeGroup_Class::wrap_new(GObject* object)
{
  return new SizeGroup((GtkSizeGroup*)object);
}


/* The implementation: */

GtkSizeGroup* SizeGroup::gobj_copy()
{
  reference();
  return gobj();
}

SizeGroup::SizeGroup(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

SizeGroup::SizeGroup(GtkSizeGroup* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


SizeGroup::SizeGroup(SizeGroup&& src) noexcept
: Glib::Object(std::move(src))
  , Buildable(std::move(src))
{}

SizeGroup& SizeGroup::operator=(SizeGroup&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  Buildable::operator=(std::move(src));
  return *this;
}


SizeGroup::~SizeGroup() noexcept
{}


SizeGroup::CppClassType SizeGroup::sizegroup_class_; // initialize static member

GType SizeGroup::get_type()
{
  return sizegroup_class_.init().get_type();
}


GType SizeGroup::get_base_type()
{
  return gtk_size_group_get_type();
}


Glib::RefPtr<SizeGroup> SizeGroup::create(Mode mode)
{
  return Glib::make_refptr_for_instance<SizeGroup>( new SizeGroup(mode) );
}

void SizeGroup::set_mode(Mode mode)
{
  gtk_size_group_set_mode(gobj(), static_cast<GtkSizeGroupMode>(mode));
}

Mode SizeGroup::get_mode() const
{
  return static_cast<Mode>(gtk_size_group_get_mode(const_cast<GtkSizeGroup*>(gobj())));
}

void SizeGroup::add_widget(Widget& widget)
{
  gtk_size_group_add_widget(gobj(), (widget).gobj());
}

void SizeGroup::remove_widget(Widget& widget)
{
  gtk_size_group_remove_widget(gobj(), (widget).gobj());
}

std::vector<Widget*> SizeGroup::get_widgets()
{
  return Glib::SListHandler<Widget*>::slist_to_vector(gtk_size_group_get_widgets(gobj()), Glib::OWNERSHIP_NONE);
}

std::vector<const Widget*> SizeGroup::get_widgets() const
{
  return Glib::SListHandler<const Widget*>::slist_to_vector(gtk_size_group_get_widgets(const_cast<GtkSizeGroup*>(gobj())), Glib::OWNERSHIP_NONE);
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Mode>::value,
  "Type Mode cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< Mode > SizeGroup::property_mode()
{
  return Glib::PropertyProxy< Mode >(this, "mode");
}

Glib::PropertyProxy_ReadOnly< Mode > SizeGroup::property_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Mode >(this, "mode");
}


} // namespace Gtk


