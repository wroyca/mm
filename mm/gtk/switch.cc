// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/switch.h>
#include <mm/gtk/private/switch_p.h>


/*
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>

namespace Gtk
{

} // namespace Gtk


namespace
{


static gboolean Switch_signal_state_set_callback(GtkSwitch* self, gboolean p0,void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<bool(bool)>;

  auto obj = dynamic_cast<Switch*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))(p0
));
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static gboolean Switch_signal_state_set_notify_callback(GtkSwitch* self, gboolean p0, void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<void(bool)>;

  auto obj = dynamic_cast<Switch*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static const Glib::SignalProxyInfo Switch_signal_state_set_info =
{
  "state-set",
  (GCallback) &Switch_signal_state_set_callback,
  (GCallback) &Switch_signal_state_set_notify_callback
};


} // anonymous namespace


namespace Glib
{

Gtk::Switch* wrap(GtkSwitch* object, bool take_copy)
{
  return dynamic_cast<Gtk::Switch *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Switch_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Switch_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_switch_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Actionable::add_interface(get_type());

  }

  return *this;
}


void Switch_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Switch_Class::wrap_new(GObject* o)
{
  return manage(new Switch((GtkSwitch*)(o)));

}


/* The implementation: */

Switch::Switch(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

Switch::Switch(GtkSwitch* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }


Switch::Switch(Switch&& src) noexcept
: Gtk::Widget(std::move(src))
  , Actionable(std::move(src))
{}

Switch& Switch::operator=(Switch&& src) noexcept
{
  Gtk::Widget::operator=(std::move(src));
  Actionable::operator=(std::move(src));
  return *this;
}

Switch::~Switch() noexcept
{
  destroy_();
}

Switch::CppClassType Switch::switch_class_; // initialize static member

GType Switch::get_type()
{
  return switch_class_.init().get_type();
}


GType Switch::get_base_type()
{
  return gtk_switch_get_type();
}


Switch::Switch()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Widget(Glib::ConstructParams(switch_class_.init()))
{


}

void Switch::set_active(bool is_active)
{
  gtk_switch_set_active(gobj(), static_cast<int>(is_active));
}

bool Switch::get_active() const
{
  return gtk_switch_get_active(const_cast<GtkSwitch*>(gobj()));
}

void Switch::set_state(bool state)
{
  gtk_switch_set_state(gobj(), static_cast<int>(state));
}

bool Switch::get_state() const
{
  return gtk_switch_get_state(const_cast<GtkSwitch*>(gobj()));
}


Glib::SignalProxy<bool(bool)> Switch::signal_state_set()
{
  return Glib::SignalProxy<bool(bool) >(this, &Switch_signal_state_set_info);
}


Glib::PropertyProxy< bool > Switch::property_active()
{
  return Glib::PropertyProxy< bool >(this, "active");
}

Glib::PropertyProxy_ReadOnly< bool > Switch::property_active() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "active");
}

Glib::PropertyProxy< bool > Switch::property_state()
{
  return Glib::PropertyProxy< bool >(this, "state");
}

Glib::PropertyProxy_ReadOnly< bool > Switch::property_state() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "state");
}


} // namespace Gtk


