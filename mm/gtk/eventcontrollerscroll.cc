// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <mm/gtk/eventcontrollerscroll.h>
#include <mm/gtk/private/eventcontrollerscroll_p.h>


/* Copyright (C) 2018 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

using Flags = Gtk::EventControllerScroll::Flags;


namespace
{


static const Glib::SignalProxyInfo EventControllerScroll_signal_scroll_begin_info =
{
  "scroll-begin",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


static gboolean EventControllerScroll_signal_scroll_callback(GtkEventControllerScroll* self, gdouble p0,gdouble p1,void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<bool(double, double)>;

  auto obj = dynamic_cast<EventControllerScroll*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))(p0
, p1
));
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static gboolean EventControllerScroll_signal_scroll_notify_callback(GtkEventControllerScroll* self, gdouble p0,gdouble p1, void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<void(double, double)>;

  auto obj = dynamic_cast<EventControllerScroll*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
, p1
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static const Glib::SignalProxyInfo EventControllerScroll_signal_scroll_info =
{
  "scroll",
  (GCallback) &EventControllerScroll_signal_scroll_callback,
  (GCallback) &EventControllerScroll_signal_scroll_notify_callback
};


static const Glib::SignalProxyInfo EventControllerScroll_signal_scroll_end_info =
{
  "scroll-end",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


static void EventControllerScroll_signal_decelerate_callback(GtkEventControllerScroll* self, gdouble p0,gdouble p1,void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<void(double, double)>;

  auto obj = dynamic_cast<EventControllerScroll*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
, p1
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo EventControllerScroll_signal_decelerate_info =
{
  "decelerate",
  (GCallback) &EventControllerScroll_signal_decelerate_callback,
  (GCallback) &EventControllerScroll_signal_decelerate_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gtk::EventControllerScroll::Flags>::value_type()
{
  return gtk_event_controller_scroll_flags_get_type();
}


namespace Glib
{

Glib::RefPtr<Gtk::EventControllerScroll> wrap(GtkEventControllerScroll* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::EventControllerScroll>( dynamic_cast<Gtk::EventControllerScroll*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& EventControllerScroll_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &EventControllerScroll_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_event_controller_scroll_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void EventControllerScroll_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* EventControllerScroll_Class::wrap_new(GObject* object)
{
  return new EventControllerScroll((GtkEventControllerScroll*)object);
}


/* The implementation: */

GtkEventControllerScroll* EventControllerScroll::gobj_copy()
{
  reference();
  return gobj();
}

EventControllerScroll::EventControllerScroll(const Glib::ConstructParams& construct_params)
:
  EventController(construct_params)
{

}

EventControllerScroll::EventControllerScroll(GtkEventControllerScroll* castitem)
:
  EventController((GtkEventController*)(castitem))
{}


EventControllerScroll::EventControllerScroll(EventControllerScroll&& src) noexcept
: EventController(std::move(src))
{}

EventControllerScroll& EventControllerScroll::operator=(EventControllerScroll&& src) noexcept
{
  EventController::operator=(std::move(src));
  return *this;
}


EventControllerScroll::~EventControllerScroll() noexcept
{}


EventControllerScroll::CppClassType EventControllerScroll::eventcontrollerscroll_class_; // initialize static member

GType EventControllerScroll::get_type()
{
  return eventcontrollerscroll_class_.init().get_type();
}


GType EventControllerScroll::get_base_type()
{
  return gtk_event_controller_scroll_get_type();
}


EventControllerScroll::EventControllerScroll()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  EventController(Glib::ConstructParams(eventcontrollerscroll_class_.init()))
{


}

Glib::RefPtr<EventControllerScroll> EventControllerScroll::create()
{
  return Glib::make_refptr_for_instance<EventControllerScroll>( new EventControllerScroll() );
}

void EventControllerScroll::set_flags(Flags flags)
{
  gtk_event_controller_scroll_set_flags(gobj(), static_cast<GtkEventControllerScrollFlags>(flags));
}

Flags EventControllerScroll::get_flags() const
{
  return static_cast<Flags>(gtk_event_controller_scroll_get_flags(const_cast<GtkEventControllerScroll*>(gobj())));
}

Gdk::ScrollUnit EventControllerScroll::get_unit() const
{
  return static_cast<Gdk::ScrollUnit>(gtk_event_controller_scroll_get_unit(const_cast<GtkEventControllerScroll*>(gobj())));
}


Glib::SignalProxy<void()> EventControllerScroll::signal_scroll_begin()
{
  return Glib::SignalProxy<void() >(this, &EventControllerScroll_signal_scroll_begin_info);
}


Glib::SignalProxy<bool(double, double)> EventControllerScroll::signal_scroll()
{
  return Glib::SignalProxy<bool(double, double) >(this, &EventControllerScroll_signal_scroll_info);
}


Glib::SignalProxy<void()> EventControllerScroll::signal_scroll_end()
{
  return Glib::SignalProxy<void() >(this, &EventControllerScroll_signal_scroll_end_info);
}


Glib::SignalProxy<void(double, double)> EventControllerScroll::signal_decelerate()
{
  return Glib::SignalProxy<void(double, double) >(this, &EventControllerScroll_signal_decelerate_info);
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Flags>::value,
  "Type Flags cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< Flags > EventControllerScroll::property_flags()
{
  return Glib::PropertyProxy< Flags >(this, "flags");
}

Glib::PropertyProxy_ReadOnly< Flags > EventControllerScroll::property_flags() const
{
  return Glib::PropertyProxy_ReadOnly< Flags >(this, "flags");
}


} // namespace Gtk


