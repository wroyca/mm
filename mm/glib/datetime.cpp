// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.hpp>

#include <mm/glib/datetime.hpp>
#include <mm/glib/private/datetime_p.hpp>


/* Copyright (C) 2011 The glibmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <mm/glib/utility.hpp>
#include <mm/glib/wrap.hpp>

namespace Glib
{

DateTime::operator bool() const
{
  return (gobject_ != nullptr);
}

} // namespace Glib

namespace
{
} // anonymous namespace


namespace Glib
{

auto wrap(GDateTime* object, bool take_copy) -> Glib::DateTime
{
  return Glib::DateTime(object, take_copy);
}

} // namespace Glib


namespace Glib
{


// static
auto DateTime::get_type() -> GType
{
  return g_date_time_get_type();
}

DateTime::DateTime()
:
  gobject_ (nullptr) // Allows creation of invalid wrapper, e.g. for output arguments to methods.
{}

DateTime::DateTime(const DateTime& other)
:
  gobject_ ((other.gobject_) ? g_date_time_ref(other.gobject_) : nullptr)
{}

DateTime::DateTime(DateTime&& other) noexcept
:
  gobject_(other.gobject_)
{
  other.gobject_ = nullptr;
}

auto DateTime::operator=(DateTime&& other) noexcept -> DateTime&
{
  DateTime temp (std::move(other));
  swap(temp);
  return *this;
}

DateTime::DateTime(GDateTime* gobject, bool make_a_copy)
:
  // For BoxedType wrappers, make_a_copy is true by default.  The static
  // BoxedType wrappers must always take a copy, thus make_a_copy = true
  // ensures identical behaviour if the default argument is used.
  gobject_ ((make_a_copy && gobject) ? g_date_time_ref(gobject) : gobject)
{}

auto DateTime::operator=(const DateTime& other) -> DateTime&
{
  DateTime temp (other);
  swap(temp);
  return *this;
}

DateTime::~DateTime() noexcept
{
  if(gobject_)
    g_date_time_unref(gobject_);
}

auto DateTime::swap (DateTime &other) noexcept -> void
{
  std::swap(gobject_, other.gobject_);
}

auto DateTime::gobj_copy() const -> GDateTime*
{
  return g_date_time_ref(gobject_);
}


auto DateTime::create_now(const TimeZone& tz) -> DateTime
{
  return Glib::wrap(g_date_time_new_now(const_cast<GTimeZone*>(tz.gobj())));
}

auto DateTime::create_now_local() -> DateTime
{
  return Glib::wrap(g_date_time_new_now_local());
}

auto DateTime::create_now_utc() -> DateTime
{
  return Glib::wrap(g_date_time_new_now_utc());
}

auto DateTime::create_now_local(gint64 t) -> DateTime
{
  return Glib::wrap(g_date_time_new_from_unix_local(t));
}

auto DateTime::create_now_utc(gint64 t) -> DateTime
{
  return Glib::wrap(g_date_time_new_from_unix_utc(t));
}

auto DateTime::create_from_iso8601(const Glib::ustring& text, const TimeZone& default_tz) -> DateTime
{
  return Glib::wrap(g_date_time_new_from_iso8601(text.c_str(), const_cast<GTimeZone*>(default_tz.gobj())));
}

auto DateTime::create_from_iso8601(const Glib::ustring& text) -> DateTime
{
  return Glib::wrap(g_date_time_new_from_iso8601(text.c_str(), nullptr));
}

auto DateTime::create(const TimeZone& tz, int year, int month, int day, int hour, int minute, double seconds) -> DateTime
{
  return Glib::wrap(g_date_time_new(const_cast<GTimeZone*>(tz.gobj()), year, month, day, hour, minute, seconds));
}

auto DateTime::create_local(int year, int month, int day, int hour, int minute, double seconds) -> DateTime
{
  return Glib::wrap(g_date_time_new_local(year, month, day, hour, minute, seconds));
}

auto DateTime::create_utc(int year, int month, int day, int hour, int minute, double seconds) -> DateTime
{
  return Glib::wrap(g_date_time_new_utc(year, month, day, hour, minute, seconds));
}

auto DateTime::add(TimeSpan timespan) const -> DateTime
{
  return Glib::wrap(g_date_time_add(const_cast<GDateTime*>(gobj()), timespan));
}

auto DateTime::add_years(int years) const -> DateTime
{
  return Glib::wrap(g_date_time_add_years(const_cast<GDateTime*>(gobj()), years));
}

auto DateTime::add_months(int months) const -> DateTime
{
  return Glib::wrap(g_date_time_add_months(const_cast<GDateTime*>(gobj()), months));
}

auto DateTime::add_weeks(int weeks) const -> DateTime
{
  return Glib::wrap(g_date_time_add_weeks(const_cast<GDateTime*>(gobj()), weeks));
}

auto DateTime::add_days(int days) const -> DateTime
{
  return Glib::wrap(g_date_time_add_days(const_cast<GDateTime*>(gobj()), days));
}

auto DateTime::add_hours(int hours) const -> DateTime
{
  return Glib::wrap(g_date_time_add_hours(const_cast<GDateTime*>(gobj()), hours));
}

auto DateTime::add_minutes(int minutes) const -> DateTime
{
  return Glib::wrap(g_date_time_add_minutes(const_cast<GDateTime*>(gobj()), minutes));
}

auto DateTime::add_seconds(double seconds) const -> DateTime
{
  return Glib::wrap(g_date_time_add_seconds(const_cast<GDateTime*>(gobj()), seconds));
}

auto DateTime::add_full(int years, int months, int days, int hours, int minutes, double seconds) const -> DateTime
{
  return Glib::wrap(g_date_time_add_full(const_cast<GDateTime*>(gobj()), years, months, days, hours, minutes, seconds));
}

auto DateTime::difference(const DateTime& other) const -> TimeSpan
{
  return g_date_time_difference(const_cast<GDateTime*>(gobj()), const_cast<GDateTime*>(other.gobj()));
}

auto DateTime::compare(const DateTime& other) const -> int
{
  return g_date_time_compare(const_cast<GDateTime*>(gobj()), static_cast<gconstpointer>(other.gobj()));
}

auto DateTime::hash() const -> guint
{
  return g_date_time_hash(const_cast<GDateTime*>(gobj()));
}

auto DateTime::equal(const DateTime& other) const -> bool
{
  return g_date_time_equal(const_cast<GDateTime*>(gobj()), static_cast<gconstpointer>(other.gobj()));
}

auto DateTime::get_ymd (int &year, int &month, int &day) const -> void
{
  g_date_time_get_ymd(const_cast<GDateTime*>(gobj()), &(year), &(month), &(day));
}

auto DateTime::get_year() const -> int
{
  return g_date_time_get_year(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_month() const -> int
{
  return g_date_time_get_month(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_day_of_month() const -> int
{
  return g_date_time_get_day_of_month(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_week_numbering_year() const -> int
{
  return g_date_time_get_week_numbering_year(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_week_of_year() const -> int
{
  return g_date_time_get_week_of_year(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_day_of_week() const -> int
{
  return g_date_time_get_day_of_week(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_day_of_year() const -> int
{
  return g_date_time_get_day_of_year(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_hour() const -> int
{
  return g_date_time_get_hour(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_minute() const -> int
{
  return g_date_time_get_minute(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_second() const -> int
{
  return g_date_time_get_second(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_microsecond() const -> int
{
  return g_date_time_get_microsecond(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_seconds() const -> double
{
  return g_date_time_get_seconds(const_cast<GDateTime*>(gobj()));
}

auto DateTime::to_unix() const -> gint64
{
  return g_date_time_to_unix(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_utc_offset() const -> TimeSpan
{
  return g_date_time_get_utc_offset(const_cast<GDateTime*>(gobj()));
}

auto DateTime::get_timezone() const -> TimeZone
{
  return Glib::wrap(g_date_time_get_timezone(const_cast<GDateTime*>(gobj())), true);
}

auto DateTime::get_timezone_abbreviation() const -> Glib::ustring
{
  return Glib::convert_const_gchar_ptr_to_ustring(g_date_time_get_timezone_abbreviation(const_cast<GDateTime*>(gobj())));
}

auto DateTime::is_daylight_savings() const -> bool
{
  return g_date_time_is_daylight_savings(const_cast<GDateTime*>(gobj()));
}

auto DateTime::to_timezone(const TimeZone& tz) const -> DateTime
{
  return Glib::wrap(g_date_time_to_timezone(const_cast<GDateTime*>(gobj()), const_cast<GTimeZone*>(tz.gobj())));
}

auto DateTime::to_local() const -> DateTime
{
  return Glib::wrap(g_date_time_to_local(const_cast<GDateTime*>(gobj())));
}

auto DateTime::to_utc() const -> DateTime
{
  return Glib::wrap(g_date_time_to_utc(const_cast<GDateTime*>(gobj())));
}

auto DateTime::format(const Glib::ustring& format_str) const -> Glib::ustring
{
  return Glib::convert_return_gchar_ptr_to_ustring(g_date_time_format(const_cast<GDateTime*>(gobj()), format_str.c_str()));
}

auto DateTime::format_iso8601() const -> Glib::ustring
{
  return Glib::convert_return_gchar_ptr_to_ustring(g_date_time_format_iso8601(const_cast<GDateTime*>(gobj())));
}


} // namespace Glib


