// Generated by generate_wrap_init.pl -- DO NOT MODIFY!

#define GLIBMM_INCLUDED_FROM_WRAP_INIT_CC
#include <glibmm.h>
#include <gdkmm/wrap_init.h>
#include <glibmm/error.h>
#include <glibmm/object.h>

// #include the widget headers so that we can call the get_type() static methods:
#include "applaunchcontext.h"
#include "cairocontext.h"
#include "clipboard.h"
#include "contentformats.h"
#include "contentformatsbuilder.h"
#include "contentprovider.h"
#include "cursor.h"
#include "device.h"
#include "devicepad.h"
#include "devicetool.h"
#include "display.h"
#include "displaymanager.h"
#include "drag.h"
#include "dragsurface.h"
#include "drawcontext.h"
#include "drop.h"
#include "enums.h"
#include "event.h"
#include "frameclock.h"
#include "frametimings.h"
#include "glcontext.h"
#include "gltexture.h"
#include "memorytexture.h"
#include "monitor.h"
#include "paintable.h"
#include "pixbuf.h"
#include "pixbufanimation.h"
#include "pixbufanimationiter.h"
#include "pixbufformat.h"
#include "pixbufloader.h"
#include "popup.h"
#include "popuplayout.h"
#include "rectangle.h"
#include "rgba.h"
#include "seat.h"
#include "snapshot.h"
#include "surface.h"
#include "texture.h"
#include "timecoord.h"
#include "toplevel.h"
#include "toplevellayout.h"
#include "toplevelsize.h"

extern "C"
{
//Declarations of the *_get_type() functions:

GType gdk_app_launch_context_get_type(void);
GType gdk_cairo_context_get_type(void);
GType gdk_clipboard_get_type(void);
GType gdk_content_provider_get_type(void);
GType gdk_cursor_get_type(void);
GType gdk_device_get_type(void);
GType gdk_device_tool_get_type(void);
GType gdk_display_get_type(void);
GType gdk_display_manager_get_type(void);
GType gdk_drag_get_type(void);
GType gdk_draw_context_get_type(void);
GType gdk_drop_get_type(void);
GType gdk_frame_clock_get_type(void);
GType gdk_gl_context_get_type(void);
GType gdk_gl_texture_get_type(void);
GType gdk_memory_texture_get_type(void);
GType gdk_monitor_get_type(void);
GType gdk_pixbuf_get_type(void);
GType gdk_pixbuf_animation_get_type(void);
GType gdk_pixbuf_animation_iter_get_type(void);
GType gdk_pixbuf_loader_get_type(void);
GType gdk_seat_get_type(void);
GType gdk_snapshot_get_type(void);
GType gdk_surface_get_type(void);
GType gdk_texture_get_type(void);

//Declarations of the *_error_quark() functions:

GQuark gdk_gl_error_quark(void);
GQuark gdk_pixbuf_error_quark(void);
GQuark gdk_texture_error_quark(void);
} // extern "C"

namespace Gdk {

//Declarations of the *_Class::wrap_new() methods, instead of including all the private headers:

class AppLaunchContext_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CairoContext_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Clipboard_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ContentProvider_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Cursor_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Device_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class DeviceTool_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Display_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class DisplayManager_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Drag_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class DrawContext_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Drop_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FrameClock_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class GLContext_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class GLTexture_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MemoryTexture_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Monitor_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Pixbuf_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class PixbufAnimation_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class PixbufAnimationIter_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class PixbufLoader_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Seat_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Snapshot_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Surface_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Texture_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };

void wrap_init()
{
  // Register Error domains in the main namespace:
  Glib::Error::register_domain(gdk_gl_error_quark(), &GLError::throw_func);
  Glib::Error::register_domain(gdk_pixbuf_error_quark(), &PixbufError::throw_func);
  Glib::Error::register_domain(gdk_texture_error_quark(), &TextureError::throw_func);

  // Map gtypes to gtkmm wrapper-creation functions:
  Glib::wrap_register(gdk_app_launch_context_get_type(), &AppLaunchContext_Class::wrap_new);
  Glib::wrap_register(gdk_cairo_context_get_type(), &CairoContext_Class::wrap_new);
  Glib::wrap_register(gdk_clipboard_get_type(), &Clipboard_Class::wrap_new);
  Glib::wrap_register(gdk_content_provider_get_type(), &ContentProvider_Class::wrap_new);
  Glib::wrap_register(gdk_cursor_get_type(), &Cursor_Class::wrap_new);
  Glib::wrap_register(gdk_device_get_type(), &Device_Class::wrap_new);
  Glib::wrap_register(gdk_device_tool_get_type(), &DeviceTool_Class::wrap_new);
  Glib::wrap_register(gdk_display_get_type(), &Display_Class::wrap_new);
  Glib::wrap_register(gdk_display_manager_get_type(), &DisplayManager_Class::wrap_new);
  Glib::wrap_register(gdk_drag_get_type(), &Drag_Class::wrap_new);
  Glib::wrap_register(gdk_draw_context_get_type(), &DrawContext_Class::wrap_new);
  Glib::wrap_register(gdk_drop_get_type(), &Drop_Class::wrap_new);
  Glib::wrap_register(gdk_frame_clock_get_type(), &FrameClock_Class::wrap_new);
  Glib::wrap_register(gdk_gl_context_get_type(), &GLContext_Class::wrap_new);
  Glib::wrap_register(gdk_gl_texture_get_type(), &GLTexture_Class::wrap_new);
  Glib::wrap_register(gdk_memory_texture_get_type(), &MemoryTexture_Class::wrap_new);
  Glib::wrap_register(gdk_monitor_get_type(), &Monitor_Class::wrap_new);
  Glib::wrap_register(gdk_pixbuf_get_type(), &Pixbuf_Class::wrap_new);
  Glib::wrap_register(gdk_pixbuf_animation_get_type(), &PixbufAnimation_Class::wrap_new);
  Glib::wrap_register(gdk_pixbuf_animation_iter_get_type(), &PixbufAnimationIter_Class::wrap_new);
  Glib::wrap_register(gdk_pixbuf_loader_get_type(), &PixbufLoader_Class::wrap_new);
  Glib::wrap_register(gdk_seat_get_type(), &Seat_Class::wrap_new);
  Glib::wrap_register(gdk_snapshot_get_type(), &Snapshot_Class::wrap_new);
  Glib::wrap_register(gdk_surface_get_type(), &Surface_Class::wrap_new);
  Glib::wrap_register(gdk_texture_get_type(), &Texture_Class::wrap_new);

  // Register the gtkmm gtypes:
  g_type_ensure(AppLaunchContext::get_type());
  g_type_ensure(CairoContext::get_type());
  g_type_ensure(Clipboard::get_type());
  g_type_ensure(ContentProvider::get_type());
  g_type_ensure(Cursor::get_type());
  g_type_ensure(Device::get_type());
  g_type_ensure(DeviceTool::get_type());
  g_type_ensure(Display::get_type());
  g_type_ensure(DisplayManager::get_type());
  g_type_ensure(Drag::get_type());
  g_type_ensure(DrawContext::get_type());
  g_type_ensure(Drop::get_type());
  g_type_ensure(FrameClock::get_type());
  g_type_ensure(GLContext::get_type());
  g_type_ensure(GLTexture::get_type());
  g_type_ensure(MemoryTexture::get_type());
  g_type_ensure(Monitor::get_type());
  g_type_ensure(Pixbuf::get_type());
  g_type_ensure(PixbufAnimation::get_type());
  g_type_ensure(PixbufAnimationIter::get_type());
  g_type_ensure(PixbufLoader::get_type());
  g_type_ensure(Seat::get_type());
  g_type_ensure(Snapshot::get_type());
  g_type_ensure(Surface::get_type());
  g_type_ensure(Texture::get_type());

} // wrap_init()

} // Gdk

