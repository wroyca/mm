// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/numericsorter.h>
#include <gtkmm/private/numericsorter_p.h>


/* Copyright (C) 2020 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::NumericSorterBase> wrap(GtkNumericSorter* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::NumericSorterBase>( dynamic_cast<Gtk::NumericSorterBase*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& NumericSorterBase_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &NumericSorterBase_Class::class_init_function;

    // Do not derive a GType, or use a derived class:
    gtype_ = gtk_numeric_sorter_get_type();

  }

  return *this;
}


void NumericSorterBase_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* NumericSorterBase_Class::wrap_new(GObject* object)
{
  return new NumericSorterBase((GtkNumericSorter*)object);
}


/* The implementation: */

GtkNumericSorter* NumericSorterBase::gobj_copy()
{
  reference();
  return gobj();
}

NumericSorterBase::NumericSorterBase(const Glib::ConstructParams& construct_params)
:
  Gtk::Sorter(construct_params)
{

}

NumericSorterBase::NumericSorterBase(GtkNumericSorter* castitem)
:
  Gtk::Sorter((GtkSorter*)(castitem))
{}


NumericSorterBase::NumericSorterBase(NumericSorterBase&& src) noexcept
: Gtk::Sorter(std::move(src))
{}

NumericSorterBase& NumericSorterBase::operator=(NumericSorterBase&& src) noexcept
{
  Gtk::Sorter::operator=(std::move(src));
  return *this;
}


NumericSorterBase::~NumericSorterBase() noexcept
{}


NumericSorterBase::CppClassType NumericSorterBase::numericsorterbase_class_; // initialize static member

GType NumericSorterBase::get_type()
{
  return numericsorterbase_class_.init().get_type();
}


GType NumericSorterBase::get_base_type()
{
  return gtk_numeric_sorter_get_type();
}


NumericSorterBase::NumericSorterBase(const Glib::RefPtr<ExpressionBase>& expression)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Sorter(Glib::ConstructParams(numericsorterbase_class_.init(), "expression", ((expression) ? (expression)->gobj() : nullptr), nullptr))
{


}

SortType NumericSorterBase::get_sort_order() const
{
  return static_cast<SortType>(gtk_numeric_sorter_get_sort_order(const_cast<GtkNumericSorter*>(gobj())));
}

void NumericSorterBase::set_sort_order(SortType sort_order)
{
  gtk_numeric_sorter_set_sort_order(gobj(), static_cast<GtkSortType>(sort_order));
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<SortType>::value,
  "Type SortType cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< SortType > NumericSorterBase::property_sort_order()
{
  return Glib::PropertyProxy< SortType >(this, "sort-order");
}

Glib::PropertyProxy_ReadOnly< SortType > NumericSorterBase::property_sort_order() const
{
  return Glib::PropertyProxy_ReadOnly< SortType >(this, "sort-order");
}


} // namespace Gtk


