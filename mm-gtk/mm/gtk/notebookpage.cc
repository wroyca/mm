// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/notebookpage.h>
#include <gtkmm/private/notebookpage_p.h>


/* Copyright (C) 2019 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtkmm/widget.h>
#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::NotebookPage> wrap(GtkNotebookPage* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::NotebookPage>( dynamic_cast<Gtk::NotebookPage*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& NotebookPage_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &NotebookPage_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_notebook_page_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void NotebookPage_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* NotebookPage_Class::wrap_new(GObject* object)
{
  return new NotebookPage((GtkNotebookPage*)object);
}


/* The implementation: */

GtkNotebookPage* NotebookPage::gobj_copy()
{
  reference();
  return gobj();
}

NotebookPage::NotebookPage(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

NotebookPage::NotebookPage(GtkNotebookPage* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


NotebookPage::NotebookPage(NotebookPage&& src) noexcept
: Glib::Object(std::move(src))
{}

NotebookPage& NotebookPage::operator=(NotebookPage&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  return *this;
}


NotebookPage::~NotebookPage() noexcept
{}


NotebookPage::CppClassType NotebookPage::notebookpage_class_; // initialize static member

GType NotebookPage::get_type()
{
  return notebookpage_class_.init().get_type();
}


GType NotebookPage::get_base_type()
{
  return gtk_notebook_page_get_type();
}


Widget* NotebookPage::get_child()
{
  return Glib::wrap(gtk_notebook_page_get_child(gobj()));
}

const Widget* NotebookPage::get_child() const
{
  return const_cast<NotebookPage*>(this)->get_child();
}


Glib::PropertyProxy_ReadOnly< Widget* > NotebookPage::property_child() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "child");
}

Glib::PropertyProxy_ReadOnly< Widget* > NotebookPage::property_tab() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "tab");
}

Glib::PropertyProxy_ReadOnly< Widget* > NotebookPage::property_menu() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "menu");
}

Glib::PropertyProxy< Glib::ustring > NotebookPage::property_tab_label()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "tab-label");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > NotebookPage::property_tab_label() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "tab-label");
}

Glib::PropertyProxy< Glib::ustring > NotebookPage::property_menu_label()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "menu-label");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > NotebookPage::property_menu_label() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "menu-label");
}

Glib::PropertyProxy< int > NotebookPage::property_position()
{
  return Glib::PropertyProxy< int >(this, "position");
}

Glib::PropertyProxy_ReadOnly< int > NotebookPage::property_position() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "position");
}

Glib::PropertyProxy< bool > NotebookPage::property_tab_expand()
{
  return Glib::PropertyProxy< bool >(this, "tab-expand");
}

Glib::PropertyProxy_ReadOnly< bool > NotebookPage::property_tab_expand() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "tab-expand");
}

Glib::PropertyProxy< bool > NotebookPage::property_tab_fill()
{
  return Glib::PropertyProxy< bool >(this, "tab-fill");
}

Glib::PropertyProxy_ReadOnly< bool > NotebookPage::property_tab_fill() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "tab-fill");
}

Glib::PropertyProxy< bool > NotebookPage::property_reorderable()
{
  return Glib::PropertyProxy< bool >(this, "reorderable");
}

Glib::PropertyProxy_ReadOnly< bool > NotebookPage::property_reorderable() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "reorderable");
}

Glib::PropertyProxy< bool > NotebookPage::property_detachable()
{
  return Glib::PropertyProxy< bool >(this, "detachable");
}

Glib::PropertyProxy_ReadOnly< bool > NotebookPage::property_detachable() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "detachable");
}


} // namespace Gtk


