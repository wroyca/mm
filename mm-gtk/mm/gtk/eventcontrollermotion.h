// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!
#ifndef _GTKMM_EVENTCONTROLLERMOTION_H
#define _GTKMM_EVENTCONTROLLERMOTION_H


#include <mm/glib/ustring.h>
#include <sigc++/sigc++.h>

/* Copyright (C) 2018 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtkmm/eventcontroller.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GtkEventControllerMotion = struct _GtkEventControllerMotion;
using GtkEventControllerMotionClass = struct _GtkEventControllerMotionClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gtk
{ class GTKMM_API EventControllerMotion_Class; } // namespace Gtk
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gtk
{
class GTKMM_API Widget;

/** Event controller for motion events.
 *
 * %Gtk::EventControllerMotion is an event controller meant for situations
 * where you need to track the position of the pointer.
 *
 * @newin{3,94}
 *
 * @ingroup Gestures
 */

class GTKMM_API EventControllerMotion : public EventController
{

#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = EventControllerMotion;
  using CppClassType = EventControllerMotion_Class;
  using BaseObjectType = GtkEventControllerMotion;
  using BaseClassType = GtkEventControllerMotionClass;

  // noncopyable
  EventControllerMotion(const EventControllerMotion&) = delete;
  EventControllerMotion& operator=(const EventControllerMotion&) = delete;

private:  friend class EventControllerMotion_Class;
  static CppClassType eventcontrollermotion_class_;

protected:
  explicit EventControllerMotion(const Glib::ConstructParams& construct_params);
  explicit EventControllerMotion(GtkEventControllerMotion* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  EventControllerMotion(EventControllerMotion&& src) noexcept;
  EventControllerMotion& operator=(EventControllerMotion&& src) noexcept;

  ~EventControllerMotion() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkEventControllerMotion*       gobj()       { return reinterpret_cast<GtkEventControllerMotion*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GtkEventControllerMotion* gobj() const { return reinterpret_cast<GtkEventControllerMotion*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GtkEventControllerMotion* gobj_copy();

private:


protected:
  EventControllerMotion();

public:

  static Glib::RefPtr<EventControllerMotion> create();


  /** Returns if a pointer is within @a self or one of its children.
   *
   * @return <tt>true</tt> if a pointer is within @a self or one of its children.
   */
  bool contains_pointer() const;

  /** Returns if a pointer is within @a self, but not one of its children.
   *
   * @return <tt>true</tt> if a pointer is within @a self but not one of its children.
   */
  bool is_pointer() const;

  // no_default_handler because GtkEventControllerMotionClass is private.

  /**
   * @par Slot Prototype:
   * <tt>void on_my_%enter(double x, double y)</tt>
   *
   * Flags: Run Last
   *
   * Signals that the pointer has entered the widget.
   *
   * @param x Coordinates of pointer location.
   * @param y Coordinates of pointer location.
   */

  Glib::SignalProxy<void(double, double)> signal_enter();


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%leave()</tt>
   *
   * Flags: Run Last
   *
   * Signals that the pointer has left the widget.
   */

  Glib::SignalProxy<void()> signal_leave();


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%motion(double x, double y)</tt>
   *
   * Flags: Run First
   *
   * Emitted when the pointer moves inside the widget.
   *
   * @param x The x coordinate.
   * @param y The y coordinate.
   */

  Glib::SignalProxy<void(double, double)> signal_motion();


  /** Whether the pointer is in the controllers widget itself,
   * as opposed to in a descendent widget.
   *
   * See also property_contains_pointer().
   *
   * When handling crossing events, this property is updated
   * before signal_enter(), but after
   * signal_leave() is emitted.
   *
   * Default value: <tt>false</tt>
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_is_pointer() const;


  /** Whether the pointer is in the controllers widget or a descendant.
   *
   * See also property_is_pointer().
   *
   * When handling crossing events, this property is updated
   * before signal_enter(), but after
   * signal_leave() is emitted.
   *
   * Default value: <tt>false</tt>
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_contains_pointer() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::EventControllerMotion
   */
  GTKMM_API
  Glib::RefPtr<Gtk::EventControllerMotion> wrap(GtkEventControllerMotion* object, bool take_copy = false);
}


#endif /* _GTKMM_EVENTCONTROLLERMOTION_H */

