// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/iconpaintable.h>
#include <gtkmm/private/iconpaintable_p.h>


/* Copyright 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::IconPaintable> wrap(GtkIconPaintable* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::IconPaintable>( dynamic_cast<Gtk::IconPaintable*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& IconPaintable_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &IconPaintable_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_icon_paintable_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Gdk::Paintable::add_interface(get_type());

  }

  return *this;
}


void IconPaintable_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* IconPaintable_Class::wrap_new(GObject* object)
{
  return new IconPaintable((GtkIconPaintable*)object);
}


/* The implementation: */

GtkIconPaintable* IconPaintable::gobj_copy()
{
  reference();
  return gobj();
}

IconPaintable::IconPaintable(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

IconPaintable::IconPaintable(GtkIconPaintable* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


IconPaintable::IconPaintable(IconPaintable&& src) noexcept
: Glib::Object(std::move(src))
  , Gdk::Paintable(std::move(src))
{}

IconPaintable& IconPaintable::operator=(IconPaintable&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  Gdk::Paintable::operator=(std::move(src));
  return *this;
}


IconPaintable::~IconPaintable() noexcept
{}


IconPaintable::CppClassType IconPaintable::iconpaintable_class_; // initialize static member

GType IconPaintable::get_type()
{
  return iconpaintable_class_.init().get_type();
}


GType IconPaintable::get_base_type()
{
  return gtk_icon_paintable_get_type();
}


Glib::RefPtr<IconPaintable> IconPaintable::create(const Glib::RefPtr<Gio::File>& file, int size, int scale)
{
  return Glib::wrap(gtk_icon_paintable_new_for_file(const_cast<GFile*>(Glib::unwrap<Gio::File>(file)), size, scale));
}

Glib::RefPtr<Gio::File> IconPaintable::get_file() const
{
  return Glib::wrap(gtk_icon_paintable_get_file(const_cast<GtkIconPaintable*>(gobj())));
}

Glib::ustring IconPaintable::get_icon_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_icon_paintable_get_icon_name(const_cast<GtkIconPaintable*>(gobj())));
}

bool IconPaintable::is_symbolic() const
{
  return gtk_icon_paintable_is_symbolic(const_cast<GtkIconPaintable*>(gobj()));
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Glib::RefPtr<Gio::File>>::value,
  "Type Glib::RefPtr<Gio::File> cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::File> > IconPaintable::property_file() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::File> >(this, "file");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > IconPaintable::property_icon_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "icon-name");
}

Glib::PropertyProxy_ReadOnly< bool > IconPaintable::property_is_symbolic() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "is-symbolic");
}


} // namespace Gtk


