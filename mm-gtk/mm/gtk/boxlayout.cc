// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/boxlayout.h>
#include <gtkmm/private/boxlayout_p.h>


/* Copyright (C) 2019 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::BoxLayout> wrap(GtkBoxLayout* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::BoxLayout>( dynamic_cast<Gtk::BoxLayout*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& BoxLayout_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &BoxLayout_Class::class_init_function;

    // Do not derive a GType, or use a derived class:
    gtype_ = gtk_box_layout_get_type();

  }

  return *this;
}


void BoxLayout_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* BoxLayout_Class::wrap_new(GObject* object)
{
  return new BoxLayout((GtkBoxLayout*)object);
}


/* The implementation: */

GtkBoxLayout* BoxLayout::gobj_copy()
{
  reference();
  return gobj();
}

BoxLayout::BoxLayout(const Glib::ConstructParams& construct_params)
:
  LayoutManager(construct_params)
{

}

BoxLayout::BoxLayout(GtkBoxLayout* castitem)
:
  LayoutManager((GtkLayoutManager*)(castitem))
{}


BoxLayout::BoxLayout(BoxLayout&& src) noexcept
: LayoutManager(std::move(src))
  , Orientable(std::move(src))
{}

BoxLayout& BoxLayout::operator=(BoxLayout&& src) noexcept
{
  LayoutManager::operator=(std::move(src));
  Orientable::operator=(std::move(src));
  return *this;
}


BoxLayout::~BoxLayout() noexcept
{}


BoxLayout::CppClassType BoxLayout::boxlayout_class_; // initialize static member

GType BoxLayout::get_type()
{
  return boxlayout_class_.init().get_type();
}


GType BoxLayout::get_base_type()
{
  return gtk_box_layout_get_type();
}


BoxLayout::BoxLayout(Orientation orientation)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  LayoutManager(Glib::ConstructParams(boxlayout_class_.init(), "orientation", static_cast<GtkOrientation>(orientation), nullptr))
{


}

Glib::RefPtr<BoxLayout> BoxLayout::create(Orientation orientation)
{
  return Glib::make_refptr_for_instance<BoxLayout>( new BoxLayout(orientation) );
}

void BoxLayout::set_homogeneous(bool homogeneous)
{
  gtk_box_layout_set_homogeneous(gobj(), static_cast<int>(homogeneous));
}

bool BoxLayout::get_homogeneous() const
{
  return gtk_box_layout_get_homogeneous(const_cast<GtkBoxLayout*>(gobj()));
}

void BoxLayout::set_spacing(guint spacing)
{
  gtk_box_layout_set_spacing(gobj(), spacing);
}

guint BoxLayout::get_spacing() const
{
  return gtk_box_layout_get_spacing(const_cast<GtkBoxLayout*>(gobj()));
}

void BoxLayout::set_baseline_position(BaselinePosition position)
{
  gtk_box_layout_set_baseline_position(gobj(), static_cast<GtkBaselinePosition>(position));
}

BaselinePosition BoxLayout::get_baseline_position() const
{
  return static_cast<BaselinePosition>(gtk_box_layout_get_baseline_position(const_cast<GtkBoxLayout*>(gobj())));
}


Glib::PropertyProxy< bool > BoxLayout::property_homogeneous()
{
  return Glib::PropertyProxy< bool >(this, "homogeneous");
}

Glib::PropertyProxy_ReadOnly< bool > BoxLayout::property_homogeneous() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "homogeneous");
}

Glib::PropertyProxy< int > BoxLayout::property_spacing()
{
  return Glib::PropertyProxy< int >(this, "spacing");
}

Glib::PropertyProxy_ReadOnly< int > BoxLayout::property_spacing() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "spacing");
}

static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<BaselinePosition>::value,
  "Type BaselinePosition cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< BaselinePosition > BoxLayout::property_baseline_position()
{
  return Glib::PropertyProxy< BaselinePosition >(this, "baseline-position");
}

Glib::PropertyProxy_ReadOnly< BaselinePosition > BoxLayout::property_baseline_position() const
{
  return Glib::PropertyProxy_ReadOnly< BaselinePosition >(this, "baseline-position");
}


} // namespace Gtk


