// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/multiselection.h>
#include <gtkmm/private/multiselection_p.h>


/* Copyright (C) 2020 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::MultiSelection> wrap(GtkMultiSelection* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::MultiSelection>( dynamic_cast<Gtk::MultiSelection*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& MultiSelection_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &MultiSelection_Class::class_init_function;

    // Do not derive a GType, or use a derived class:
    gtype_ = gtk_multi_selection_get_type();

  }

  return *this;
}


void MultiSelection_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* MultiSelection_Class::wrap_new(GObject* object)
{
  return new MultiSelection((GtkMultiSelection*)object);
}


/* The implementation: */

GtkMultiSelection* MultiSelection::gobj_copy()
{
  reference();
  return gobj();
}

MultiSelection::MultiSelection(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

MultiSelection::MultiSelection(GtkMultiSelection* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


MultiSelection::MultiSelection(MultiSelection&& src) noexcept
: Glib::Object(std::move(src))
  , Gio::ListModel(std::move(src))
  , SelectionModel(std::move(src))
{}

MultiSelection& MultiSelection::operator=(MultiSelection&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  Gio::ListModel::operator=(std::move(src));
  SelectionModel::operator=(std::move(src));
  return *this;
}


MultiSelection::~MultiSelection() noexcept
{}


MultiSelection::CppClassType MultiSelection::multiselection_class_; // initialize static member

GType MultiSelection::get_type()
{
  return multiselection_class_.init().get_type();
}


GType MultiSelection::get_base_type()
{
  return gtk_multi_selection_get_type();
}


MultiSelection::MultiSelection()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(multiselection_class_.init()))
{


}

MultiSelection::MultiSelection(const Glib::RefPtr<Gio::ListModel>& model)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(multiselection_class_.init(), "model", Glib::unwrap(model), nullptr))
{


}

Glib::RefPtr<MultiSelection> MultiSelection::create()
{
  return Glib::make_refptr_for_instance<MultiSelection>( new MultiSelection() );
}

Glib::RefPtr<MultiSelection> MultiSelection::create(const Glib::RefPtr<Gio::ListModel>& model)
{
  return Glib::make_refptr_for_instance<MultiSelection>( new MultiSelection(model) );
}

Glib::RefPtr<Gio::ListModel> MultiSelection::get_model()
{
  auto retvalue = Glib::wrap(gtk_multi_selection_get_model(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Gio::ListModel> MultiSelection::get_model() const
{
  return const_cast<MultiSelection*>(this)->get_model();
}

void MultiSelection::set_model(const Glib::RefPtr<Gio::ListModel>& model)
{
  gtk_multi_selection_set_model(gobj(), Glib::unwrap(model));
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<GType>::value,
  "Type GType cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy_ReadOnly< GType > MultiSelection::property_item_type() const
{
  return Glib::PropertyProxy_ReadOnly< GType >(this, "item-type");
}

static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Glib::RefPtr<Gio::ListModel>>::value,
  "Type Glib::RefPtr<Gio::ListModel> cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< Glib::RefPtr<Gio::ListModel> > MultiSelection::property_model()
{
  return Glib::PropertyProxy< Glib::RefPtr<Gio::ListModel> >(this, "model");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::ListModel> > MultiSelection::property_model() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::ListModel> >(this, "model");
}

Glib::PropertyProxy_ReadOnly< unsigned int > MultiSelection::property_n_items() const
{
  return Glib::PropertyProxy_ReadOnly< unsigned int >(this, "n-items");
}


} // namespace Gtk


