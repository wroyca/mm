// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/constraintguide.h>
#include <gtkmm/private/constraintguide_p.h>


/* Copyright (C) 2019 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::ConstraintGuide> wrap(GtkConstraintGuide* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::ConstraintGuide>( dynamic_cast<Gtk::ConstraintGuide*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& ConstraintGuide_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ConstraintGuide_Class::class_init_function;

    // Do not derive a GType, or use a derived class:
    gtype_ = gtk_constraint_guide_get_type();

  }

  return *this;
}


void ConstraintGuide_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* ConstraintGuide_Class::wrap_new(GObject* object)
{
  return new ConstraintGuide((GtkConstraintGuide*)object);
}


/* The implementation: */

GtkConstraintGuide* ConstraintGuide::gobj_copy()
{
  reference();
  return gobj();
}

ConstraintGuide::ConstraintGuide(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

ConstraintGuide::ConstraintGuide(GtkConstraintGuide* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


ConstraintGuide::ConstraintGuide(ConstraintGuide&& src) noexcept
: Glib::Object(std::move(src))
  , ConstraintTarget(std::move(src))
{}

ConstraintGuide& ConstraintGuide::operator=(ConstraintGuide&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  ConstraintTarget::operator=(std::move(src));
  return *this;
}


ConstraintGuide::~ConstraintGuide() noexcept
{}


ConstraintGuide::CppClassType ConstraintGuide::constraintguide_class_; // initialize static member

GType ConstraintGuide::get_type()
{
  return constraintguide_class_.init().get_type();
}


GType ConstraintGuide::get_base_type()
{
  return gtk_constraint_guide_get_type();
}


ConstraintGuide::ConstraintGuide()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(constraintguide_class_.init()))
{


}

Glib::RefPtr<ConstraintGuide> ConstraintGuide::create()
{
  return Glib::make_refptr_for_instance<ConstraintGuide>( new ConstraintGuide() );
}

void ConstraintGuide::set_min_size(int width, int height)
{
  gtk_constraint_guide_set_min_size(gobj(), width, height);
}

void ConstraintGuide::get_min_size(int& width, int& height) const
{
  gtk_constraint_guide_get_min_size(const_cast<GtkConstraintGuide*>(gobj()), &(width), &(height));
}

void ConstraintGuide::set_nat_size(int width, int height)
{
  gtk_constraint_guide_set_nat_size(gobj(), width, height);
}

void ConstraintGuide::get_nat_size(int& width, int& height) const
{
  gtk_constraint_guide_get_nat_size(const_cast<GtkConstraintGuide*>(gobj()), &(width), &(height));
}

void ConstraintGuide::set_max_size(int width, int height)
{
  gtk_constraint_guide_set_max_size(gobj(), width, height);
}

void ConstraintGuide::get_max_size(int& width, int& height) const
{
  gtk_constraint_guide_get_max_size(const_cast<GtkConstraintGuide*>(gobj()), &(width), &(height));
}

void ConstraintGuide::set_strength(Constraint::Strength strength)
{
  gtk_constraint_guide_set_strength(gobj(), static_cast<GtkConstraintStrength>(strength));
}

Constraint::Strength ConstraintGuide::get_strength() const
{
  return static_cast<Constraint::Strength>(gtk_constraint_guide_get_strength(const_cast<GtkConstraintGuide*>(gobj())));
}

void ConstraintGuide::set_name(const Glib::ustring& name)
{
  gtk_constraint_guide_set_name(gobj(), name.c_str());
}

Glib::ustring ConstraintGuide::get_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_constraint_guide_get_name(const_cast<GtkConstraintGuide*>(gobj())));
}


Glib::PropertyProxy< int > ConstraintGuide::property_min_width()
{
  return Glib::PropertyProxy< int >(this, "min-width");
}

Glib::PropertyProxy_ReadOnly< int > ConstraintGuide::property_min_width() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "min-width");
}

Glib::PropertyProxy< int > ConstraintGuide::property_min_height()
{
  return Glib::PropertyProxy< int >(this, "min-height");
}

Glib::PropertyProxy_ReadOnly< int > ConstraintGuide::property_min_height() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "min-height");
}

Glib::PropertyProxy< int > ConstraintGuide::property_nat_width()
{
  return Glib::PropertyProxy< int >(this, "nat-width");
}

Glib::PropertyProxy_ReadOnly< int > ConstraintGuide::property_nat_width() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "nat-width");
}

Glib::PropertyProxy< int > ConstraintGuide::property_nat_height()
{
  return Glib::PropertyProxy< int >(this, "nat-height");
}

Glib::PropertyProxy_ReadOnly< int > ConstraintGuide::property_nat_height() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "nat-height");
}

Glib::PropertyProxy< int > ConstraintGuide::property_max_width()
{
  return Glib::PropertyProxy< int >(this, "max-width");
}

Glib::PropertyProxy_ReadOnly< int > ConstraintGuide::property_max_width() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "max-width");
}

Glib::PropertyProxy< int > ConstraintGuide::property_max_height()
{
  return Glib::PropertyProxy< int >(this, "max-height");
}

Glib::PropertyProxy_ReadOnly< int > ConstraintGuide::property_max_height() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "max-height");
}

static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Constraint::Strength>::value,
  "Type Constraint::Strength cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< Constraint::Strength > ConstraintGuide::property_strength()
{
  return Glib::PropertyProxy< Constraint::Strength >(this, "strength");
}

Glib::PropertyProxy_ReadOnly< Constraint::Strength > ConstraintGuide::property_strength() const
{
  return Glib::PropertyProxy_ReadOnly< Constraint::Strength >(this, "strength");
}

Glib::PropertyProxy< Glib::ustring > ConstraintGuide::property_name()
{
  return Glib::PropertyProxy< Glib::ustring >(this, "name");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > ConstraintGuide::property_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "name");
}


} // namespace Gtk


