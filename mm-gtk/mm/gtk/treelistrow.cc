// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/treelistrow.h>
#include <gtkmm/private/treelistrow_p.h>


/* Copyright (C) 2020 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::TreeListRow> wrap(GtkTreeListRow* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::TreeListRow>( dynamic_cast<Gtk::TreeListRow*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& TreeListRow_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &TreeListRow_Class::class_init_function;

    // Do not derive a GType, or use a derived class:
    gtype_ = gtk_tree_list_row_get_type();

  }

  return *this;
}


void TreeListRow_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* TreeListRow_Class::wrap_new(GObject* object)
{
  return new TreeListRow((GtkTreeListRow*)object);
}


/* The implementation: */

GtkTreeListRow* TreeListRow::gobj_copy()
{
  reference();
  return gobj();
}

TreeListRow::TreeListRow(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

TreeListRow::TreeListRow(GtkTreeListRow* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


TreeListRow::TreeListRow(TreeListRow&& src) noexcept
: Glib::Object(std::move(src))
{}

TreeListRow& TreeListRow::operator=(TreeListRow&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  return *this;
}


TreeListRow::~TreeListRow() noexcept
{}


TreeListRow::CppClassType TreeListRow::treelistrow_class_; // initialize static member

GType TreeListRow::get_type()
{
  return treelistrow_class_.init().get_type();
}


GType TreeListRow::get_base_type()
{
  return gtk_tree_list_row_get_type();
}


Glib::RefPtr<Glib::ObjectBase> TreeListRow::get_item()
{
  return Glib::make_refptr_for_instance<Glib::ObjectBase>(Glib::wrap_auto(G_OBJECT(gtk_tree_list_row_get_item(gobj()))));
}

Glib::RefPtr<const Glib::ObjectBase> TreeListRow::get_item() const
{
  return const_cast<TreeListRow*>(this)->get_item();
}

void TreeListRow::set_expanded(bool expanded)
{
  gtk_tree_list_row_set_expanded(gobj(), static_cast<int>(expanded));
}

bool TreeListRow::get_expanded() const
{
  return gtk_tree_list_row_get_expanded(const_cast<GtkTreeListRow*>(gobj()));
}

bool TreeListRow::is_expandable() const
{
  return gtk_tree_list_row_is_expandable(const_cast<GtkTreeListRow*>(gobj()));
}

guint TreeListRow::get_position() const
{
  return gtk_tree_list_row_get_position(const_cast<GtkTreeListRow*>(gobj()));
}

guint TreeListRow::get_depth() const
{
  return gtk_tree_list_row_get_depth(const_cast<GtkTreeListRow*>(gobj()));
}

Glib::RefPtr<Gio::ListModel> TreeListRow::get_children()
{
  auto retvalue = Glib::wrap(gtk_tree_list_row_get_children(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Gio::ListModel> TreeListRow::get_children() const
{
  return const_cast<TreeListRow*>(this)->get_children();
}

Glib::RefPtr<TreeListRow> TreeListRow::get_parent()
{
  return Glib::wrap(gtk_tree_list_row_get_parent(gobj()));
}

Glib::RefPtr<const TreeListRow> TreeListRow::get_parent() const
{
  return const_cast<TreeListRow*>(this)->get_parent();
}

Glib::RefPtr<TreeListRow> TreeListRow::get_child_row(guint position)
{
  return Glib::wrap(gtk_tree_list_row_get_child_row(gobj(), position));
}

Glib::RefPtr<const TreeListRow> TreeListRow::get_child_row(guint position) const
{
  return const_cast<TreeListRow*>(this)->get_child_row(position);
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Glib::RefPtr<Gio::ListModel>>::value,
  "Type Glib::RefPtr<Gio::ListModel> cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::ListModel> > TreeListRow::property_children() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::ListModel> >(this, "children");
}

Glib::PropertyProxy_ReadOnly< guint > TreeListRow::property_depth() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "depth");
}

Glib::PropertyProxy_ReadOnly< bool > TreeListRow::property_expandable() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "expandable");
}

Glib::PropertyProxy< bool > TreeListRow::property_expanded()
{
  return Glib::PropertyProxy< bool >(this, "expanded");
}

Glib::PropertyProxy_ReadOnly< bool > TreeListRow::property_expanded() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "expanded");
}

static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Glib::RefPtr<Glib::ObjectBase>>::value,
  "Type Glib::RefPtr<Glib::ObjectBase> cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Glib::ObjectBase> > TreeListRow::property_item() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Glib::ObjectBase> >(this, "item");
}


} // namespace Gtk


