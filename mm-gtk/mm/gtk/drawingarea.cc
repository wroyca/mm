// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <mm/glib/mm-glib.h>

#include <gtkmm/drawingarea.h>
#include <gtkmm/private/drawingarea_p.h>


/*
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>
#include <gdkmm/cairoutils.h>

namespace
{

void SignalProxy_Draw_gtk_callback(GtkDrawingArea* /* drawing_area */, cairo_t* cr,
  int width, int height, void* user_data)
{
  auto the_slot = static_cast<Gtk::DrawingArea::SlotDraw*>(user_data);
  auto cr2 = Gdk::Cairo::wrap(cr, false /* has_reference */);

  try
  {
    (*the_slot)(cr2, width, height);
  }
  catch (...)
  {
    Glib::exception_handlers_invoke();
  }
}

} // anonymous namespace

namespace Gtk
{
void DrawingArea::set_draw_func(const SlotDraw& slot)
{
  // Create a copy of the slot object. A pointer to this will be passed
  // through the callback's data parameter. It will be deleted
  // when Glib::destroy_notify_delete<SlotDraw> is called.
  auto slot_copy = new SlotDraw(slot);

  gtk_drawing_area_set_draw_func(gobj(),
    &SignalProxy_Draw_gtk_callback, slot_copy,
    &Glib::destroy_notify_delete<SlotDraw>);
}

} //namespace Gtk

namespace
{


static void DrawingArea_signal_resize_callback(GtkDrawingArea* self, gint p0,gint p1,void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<void(int, int)>;

  auto obj = dynamic_cast<DrawingArea*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
, p1
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo DrawingArea_signal_resize_info =
{
  "resize",
  (GCallback) &DrawingArea_signal_resize_callback,
  (GCallback) &DrawingArea_signal_resize_callback
};


} // anonymous namespace


namespace Glib
{

Gtk::DrawingArea* wrap(GtkDrawingArea* object, bool take_copy)
{
  return dynamic_cast<Gtk::DrawingArea *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& DrawingArea_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &DrawingArea_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_drawing_area_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void DrawingArea_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->resize = &resize_callback;
}


void DrawingArea_Class::resize_callback(GtkDrawingArea* self, gint p0, gint p1)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_resize(p0
, p1
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  const auto base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->resize)
    (*base->resize)(self, p0, p1);
}


Glib::ObjectBase* DrawingArea_Class::wrap_new(GObject* o)
{
  return manage(new DrawingArea((GtkDrawingArea*)(o)));

}


/* The implementation: */

DrawingArea::DrawingArea(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

DrawingArea::DrawingArea(GtkDrawingArea* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }


DrawingArea::DrawingArea(DrawingArea&& src) noexcept
: Gtk::Widget(std::move(src))
{}

DrawingArea& DrawingArea::operator=(DrawingArea&& src) noexcept
{
  Gtk::Widget::operator=(std::move(src));
  return *this;
}

DrawingArea::~DrawingArea() noexcept
{
  destroy_();
}

DrawingArea::CppClassType DrawingArea::drawingarea_class_; // initialize static member

GType DrawingArea::get_type()
{
  return drawingarea_class_.init().get_type();
}


GType DrawingArea::get_base_type()
{
  return gtk_drawing_area_get_type();
}


DrawingArea::DrawingArea()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Widget(Glib::ConstructParams(drawingarea_class_.init()))
{


}

void DrawingArea::set_content_width(int width)
{
  gtk_drawing_area_set_content_width(gobj(), width);
}

int DrawingArea::get_content_width() const
{
  return gtk_drawing_area_get_content_width(const_cast<GtkDrawingArea*>(gobj()));
}

void DrawingArea::set_content_height(int width)
{
  gtk_drawing_area_set_content_height(gobj(), width);
}

int DrawingArea::get_content_height() const
{
  return gtk_drawing_area_get_content_height(const_cast<GtkDrawingArea*>(gobj()));
}


Glib::SignalProxy<void(int, int)> DrawingArea::signal_resize()
{
  return Glib::SignalProxy<void(int, int) >(this, &DrawingArea_signal_resize_info);
}


Glib::PropertyProxy< int > DrawingArea::property_content_width()
{
  return Glib::PropertyProxy< int >(this, "content-width");
}

Glib::PropertyProxy_ReadOnly< int > DrawingArea::property_content_width() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "content-width");
}

Glib::PropertyProxy< int > DrawingArea::property_content_height()
{
  return Glib::PropertyProxy< int >(this, "content-height");
}

Glib::PropertyProxy_ReadOnly< int > DrawingArea::property_content_height() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "content-height");
}


void Gtk::DrawingArea::on_resize(int width, int height)
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->resize)
    (*base->resize)(gobj(),width,height);
}


} // namespace Gtk


