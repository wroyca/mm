// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/popover.h>
#include <gtkmm/private/popover_p.h>


/*
 * Copyright 2013 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>

namespace Gtk
{

void Popover::unset_child()
{
  gtk_popover_set_child(gobj(), nullptr);
}

} // namespace Gtk

namespace
{


static const Glib::SignalProxyInfo Popover_signal_closed_info =
{
  "closed",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


} // anonymous namespace


namespace Glib
{

Gtk::Popover* wrap(GtkPopover* object, bool take_copy)
{
  return dynamic_cast<Gtk::Popover *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Popover_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Popover_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_popover_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  ShortcutManager::add_interface(get_type());
  Native::add_interface(get_type());

  }

  return *this;
}


void Popover_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->closed = &closed_callback;
}


void Popover_Class::closed_callback(GtkPopover* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_closed();
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  const auto base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->closed)
    (*base->closed)(self);
}


Glib::ObjectBase* Popover_Class::wrap_new(GObject* o)
{
  return manage(new Popover((GtkPopover*)(o)));

}


/* The implementation: */

Popover::Popover(const Glib::ConstructParams& construct_params)
:
  Gtk::Widget(construct_params)
{
  }

Popover::Popover(GtkPopover* castitem)
:
  Gtk::Widget((GtkWidget*)(castitem))
{
  }


Popover::Popover(Popover&& src) noexcept
: Gtk::Widget(std::move(src))
  , ShortcutManager(std::move(src))
  , Native(std::move(src))
{}

Popover& Popover::operator=(Popover&& src) noexcept
{
  Gtk::Widget::operator=(std::move(src));
  ShortcutManager::operator=(std::move(src));
  Native::operator=(std::move(src));
  return *this;
}

Popover::~Popover() noexcept
{
  destroy_();
}

Popover::CppClassType Popover::popover_class_; // initialize static member

GType Popover::get_type()
{
  return popover_class_.init().get_type();
}


GType Popover::get_base_type()
{
  return gtk_popover_get_type();
}


Popover::Popover()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Widget(Glib::ConstructParams(popover_class_.init()))
{
  

}

void Popover::set_child(Widget& child)
{
  gtk_popover_set_child(gobj(), (child).gobj());
}

Widget* Popover::get_child()
{
  return Glib::wrap(gtk_popover_get_child(gobj()));
}

const Widget* Popover::get_child() const
{
  return const_cast<Popover*>(this)->get_child();
}

void Popover::set_pointing_to(const Gdk::Rectangle& rect)
{
  gtk_popover_set_pointing_to(gobj(), (rect).gobj());
}

bool Popover::get_pointing_to(Gdk::Rectangle& rect) const
{
  return gtk_popover_get_pointing_to(const_cast<GtkPopover*>(gobj()), (rect).gobj());
}

void Popover::set_position(PositionType position)
{
  gtk_popover_set_position(gobj(), static_cast<GtkPositionType>(position));
}

PositionType Popover::get_position() const
{
  return static_cast<PositionType>(gtk_popover_get_position(const_cast<GtkPopover*>(gobj())));
}

void Popover::set_autohide(bool autohide)
{
  gtk_popover_set_autohide(gobj(), static_cast<int>(autohide));
}

bool Popover::get_autohide() const
{
  return gtk_popover_get_autohide(const_cast<GtkPopover*>(gobj()));
}

void Popover::set_has_arrow(bool has_arrow)
{
  gtk_popover_set_has_arrow(gobj(), static_cast<int>(has_arrow));
}

bool Popover::get_has_arrow() const
{
  return gtk_popover_get_has_arrow(const_cast<GtkPopover*>(gobj()));
}

void Popover::set_mnemonics_visible(bool mnemonics_visible)
{
  gtk_popover_set_mnemonics_visible(gobj(), static_cast<int>(mnemonics_visible));
}

bool Popover::get_mnemonics_visible() const
{
  return gtk_popover_get_mnemonics_visible(const_cast<GtkPopover*>(gobj()));
}

void Popover::popup()
{
  gtk_popover_popup(gobj());
}

void Popover::popdown()
{
  gtk_popover_popdown(gobj());
}

void Popover::set_offset(int x_offset, int y_offset)
{
  gtk_popover_set_offset(gobj(), x_offset, y_offset);
}

void Popover::get_offset(int& x_offset, int& y_offset) const
{
  gtk_popover_get_offset(const_cast<GtkPopover*>(gobj()), &(x_offset), &(y_offset));
}

void Popover::set_cascade_popdown(bool cascade_popdown)
{
  gtk_popover_set_cascade_popdown(gobj(), static_cast<int>(cascade_popdown));
}

bool Popover::get_cascade_popdown() const
{
  return gtk_popover_get_cascade_popdown(const_cast<GtkPopover*>(gobj()));
}

void Popover::set_default_widget(Widget& widget)
{
  gtk_popover_set_default_widget(gobj(), (widget).gobj());
}

void Popover::present()
{
  gtk_popover_present(gobj());
}


Glib::SignalProxy<void()> Popover::signal_closed()
{
  return Glib::SignalProxy<void() >(this, &Popover_signal_closed_info);
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Gdk::Rectangle>::value,
  "Type Gdk::Rectangle cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< Gdk::Rectangle > Popover::property_pointing_to() 
{
  return Glib::PropertyProxy< Gdk::Rectangle >(this, "pointing-to");
}

Glib::PropertyProxy_ReadOnly< Gdk::Rectangle > Popover::property_pointing_to() const
{
  return Glib::PropertyProxy_ReadOnly< Gdk::Rectangle >(this, "pointing-to");
}

static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<PositionType>::value,
  "Type PositionType cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< PositionType > Popover::property_position() 
{
  return Glib::PropertyProxy< PositionType >(this, "position");
}

Glib::PropertyProxy_ReadOnly< PositionType > Popover::property_position() const
{
  return Glib::PropertyProxy_ReadOnly< PositionType >(this, "position");
}

Glib::PropertyProxy< bool > Popover::property_autohide() 
{
  return Glib::PropertyProxy< bool >(this, "autohide");
}

Glib::PropertyProxy_ReadOnly< bool > Popover::property_autohide() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "autohide");
}

Glib::PropertyProxy< bool > Popover::property_has_arrow() 
{
  return Glib::PropertyProxy< bool >(this, "has-arrow");
}

Glib::PropertyProxy_ReadOnly< bool > Popover::property_has_arrow() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "has-arrow");
}

Glib::PropertyProxy< Widget* > Popover::property_default_widget() 
{
  return Glib::PropertyProxy< Widget* >(this, "default-widget");
}

Glib::PropertyProxy_ReadOnly< Widget* > Popover::property_default_widget() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "default-widget");
}

Glib::PropertyProxy< bool > Popover::property_mnemonics_visible() 
{
  return Glib::PropertyProxy< bool >(this, "mnemonics-visible");
}

Glib::PropertyProxy_ReadOnly< bool > Popover::property_mnemonics_visible() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "mnemonics-visible");
}

Glib::PropertyProxy< Widget* > Popover::property_child() 
{
  return Glib::PropertyProxy< Widget* >(this, "child");
}

Glib::PropertyProxy_ReadOnly< Widget* > Popover::property_child() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "child");
}

Glib::PropertyProxy< bool > Popover::property_cascade_popdown() 
{
  return Glib::PropertyProxy< bool >(this, "cascade-popdown");
}

Glib::PropertyProxy_ReadOnly< bool > Popover::property_cascade_popdown() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "cascade-popdown");
}


void Gtk::Popover::on_closed()
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->closed)
    (*base->closed)(gobj());
}


} // namespace Gtk


