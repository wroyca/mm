// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/layoutchild.h>
#include <gtkmm/private/layoutchild_p.h>


/* Copyright (C) 2019 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtkmm/layoutmanager.h>
#include <gtkmm/widget.h>
#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::LayoutChild> wrap(GtkLayoutChild* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::LayoutChild>( dynamic_cast<Gtk::LayoutChild*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& LayoutChild_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &LayoutChild_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_layout_child_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void LayoutChild_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* LayoutChild_Class::wrap_new(GObject* object)
{
  return new LayoutChild((GtkLayoutChild*)object);
}


/* The implementation: */

GtkLayoutChild* LayoutChild::gobj_copy()
{
  reference();
  return gobj();
}

LayoutChild::LayoutChild(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

LayoutChild::LayoutChild(GtkLayoutChild* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


LayoutChild::LayoutChild(LayoutChild&& src) noexcept
: Glib::Object(std::move(src))
{}

LayoutChild& LayoutChild::operator=(LayoutChild&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  return *this;
}


LayoutChild::~LayoutChild() noexcept
{}


LayoutChild::CppClassType LayoutChild::layoutchild_class_; // initialize static member

GType LayoutChild::get_type()
{
  return layoutchild_class_.init().get_type();
}


GType LayoutChild::get_base_type()
{
  return gtk_layout_child_get_type();
}


LayoutChild::LayoutChild()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(layoutchild_class_.init()))
{
  

}

Glib::RefPtr<LayoutManager> LayoutChild::get_layout_manager()
{
  auto retvalue = Glib::wrap(gtk_layout_child_get_layout_manager(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const LayoutManager> LayoutChild::get_layout_manager() const
{
  return const_cast<LayoutChild*>(this)->get_layout_manager();
}

Widget* LayoutChild::get_child_widget()
{
  return Glib::wrap(gtk_layout_child_get_child_widget(gobj()));
}

const Widget* LayoutChild::get_child_widget() const
{
  return const_cast<LayoutChild*>(this)->get_child_widget();
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Glib::RefPtr<LayoutManager>>::value,
  "Type Glib::RefPtr<LayoutManager> cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<LayoutManager> > LayoutChild::property_layout_manager() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<LayoutManager> >(this, "layout-manager");
}

Glib::PropertyProxy_ReadOnly< Widget* > LayoutChild::property_child_widget() const
{
  return Glib::PropertyProxy_ReadOnly< Widget* >(this, "child-widget");
}


} // namespace Gtk


