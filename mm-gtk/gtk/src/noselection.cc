// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/noselection.h>
#include <gtkmm/private/noselection_p.h>


/* Copyright (C) 2019 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::NoSelection> wrap(GtkNoSelection* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::NoSelection>( dynamic_cast<Gtk::NoSelection*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& NoSelection_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &NoSelection_Class::class_init_function;

    // Do not derive a GType, or use a derived class:
    gtype_ = gtk_no_selection_get_type();

  }

  return *this;
}


void NoSelection_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* NoSelection_Class::wrap_new(GObject* object)
{
  return new NoSelection((GtkNoSelection*)object);
}


/* The implementation: */

GtkNoSelection* NoSelection::gobj_copy()
{
  reference();
  return gobj();
}

NoSelection::NoSelection(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

NoSelection::NoSelection(GtkNoSelection* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


NoSelection::NoSelection(NoSelection&& src) noexcept
: Glib::Object(std::move(src))
  , Gio::ListModel(std::move(src))
  , SelectionModel(std::move(src))
{}

NoSelection& NoSelection::operator=(NoSelection&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  Gio::ListModel::operator=(std::move(src));
  SelectionModel::operator=(std::move(src));
  return *this;
}


NoSelection::~NoSelection() noexcept
{}


NoSelection::CppClassType NoSelection::noselection_class_; // initialize static member

GType NoSelection::get_type()
{
  return noselection_class_.init().get_type();
}


GType NoSelection::get_base_type()
{
  return gtk_no_selection_get_type();
}


NoSelection::NoSelection()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(noselection_class_.init()))
{
  

}

NoSelection::NoSelection(const Glib::RefPtr<Gio::ListModel>& model)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Glib::Object(Glib::ConstructParams(noselection_class_.init(), "model", Glib::unwrap(model), nullptr))
{
  

}

Glib::RefPtr<NoSelection> NoSelection::create()
{
  return Glib::make_refptr_for_instance<NoSelection>( new NoSelection() );
}

Glib::RefPtr<NoSelection> NoSelection::create(const Glib::RefPtr<Gio::ListModel>& model)
{
  return Glib::make_refptr_for_instance<NoSelection>( new NoSelection(model) );
}

Glib::RefPtr<Gio::ListModel> NoSelection::get_model()
{
  auto retvalue = Glib::wrap(gtk_no_selection_get_model(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Gio::ListModel> NoSelection::get_model() const
{
  return const_cast<NoSelection*>(this)->get_model();
}

void NoSelection::set_model(const Glib::RefPtr<Gio::ListModel>& model)
{
  gtk_no_selection_set_model(gobj(), Glib::unwrap(model));
}


static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<GType>::value,
  "Type GType cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy_ReadOnly< GType > NoSelection::property_item_type() const
{
  return Glib::PropertyProxy_ReadOnly< GType >(this, "item-type");
}

static_assert(Glib::Traits::ValueCompatibleWithWrapProperty<Glib::RefPtr<Gio::ListModel>>::value,
  "Type Glib::RefPtr<Gio::ListModel> cannot be used in _WRAP_PROPERTY. "
  "There is no suitable template specialization of Glib::Value<>.");

Glib::PropertyProxy< Glib::RefPtr<Gio::ListModel> > NoSelection::property_model() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gio::ListModel> >(this, "model");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::ListModel> > NoSelection::property_model() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gio::ListModel> >(this, "model");
}

Glib::PropertyProxy_ReadOnly< unsigned int > NoSelection::property_n_items() const
{
  return Glib::PropertyProxy_ReadOnly< unsigned int >(this, "n-items");
}


} // namespace Gtk


