// Generated by gmmproc 2.74.0 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkmm/eventcontrollermotion.h>
#include <gtkmm/private/eventcontrollermotion_p.h>


/* Copyright (C) 2018 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>


namespace
{


static void EventControllerMotion_signal_enter_callback(GtkEventControllerMotion* self, gdouble p0,gdouble p1,void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<void(double, double)>;

  auto obj = dynamic_cast<EventControllerMotion*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
, p1
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo EventControllerMotion_signal_enter_info =
{
  "enter",
  (GCallback) &EventControllerMotion_signal_enter_callback,
  (GCallback) &EventControllerMotion_signal_enter_callback
};


static const Glib::SignalProxyInfo EventControllerMotion_signal_leave_info =
{
  "leave",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


static void EventControllerMotion_signal_motion_callback(GtkEventControllerMotion* self, gdouble p0,gdouble p1,void* data)
{
  using namespace Gtk;
  using SlotType = sigc::slot<void(double, double)>;

  auto obj = dynamic_cast<EventControllerMotion*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
, p1
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo EventControllerMotion_signal_motion_info =
{
  "motion",
  (GCallback) &EventControllerMotion_signal_motion_callback,
  (GCallback) &EventControllerMotion_signal_motion_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gtk::EventControllerMotion> wrap(GtkEventControllerMotion* object, bool take_copy)
{
  return Glib::make_refptr_for_instance<Gtk::EventControllerMotion>( dynamic_cast<Gtk::EventControllerMotion*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& EventControllerMotion_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &EventControllerMotion_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_event_controller_motion_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void EventControllerMotion_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* EventControllerMotion_Class::wrap_new(GObject* object)
{
  return new EventControllerMotion((GtkEventControllerMotion*)object);
}


/* The implementation: */

GtkEventControllerMotion* EventControllerMotion::gobj_copy()
{
  reference();
  return gobj();
}

EventControllerMotion::EventControllerMotion(const Glib::ConstructParams& construct_params)
:
  EventController(construct_params)
{

}

EventControllerMotion::EventControllerMotion(GtkEventControllerMotion* castitem)
:
  EventController((GtkEventController*)(castitem))
{}


EventControllerMotion::EventControllerMotion(EventControllerMotion&& src) noexcept
: EventController(std::move(src))
{}

EventControllerMotion& EventControllerMotion::operator=(EventControllerMotion&& src) noexcept
{
  EventController::operator=(std::move(src));
  return *this;
}


EventControllerMotion::~EventControllerMotion() noexcept
{}


EventControllerMotion::CppClassType EventControllerMotion::eventcontrollermotion_class_; // initialize static member

GType EventControllerMotion::get_type()
{
  return eventcontrollermotion_class_.init().get_type();
}


GType EventControllerMotion::get_base_type()
{
  return gtk_event_controller_motion_get_type();
}


EventControllerMotion::EventControllerMotion()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  EventController(Glib::ConstructParams(eventcontrollermotion_class_.init()))
{
  

}

Glib::RefPtr<EventControllerMotion> EventControllerMotion::create()
{
  return Glib::make_refptr_for_instance<EventControllerMotion>( new EventControllerMotion() );
}

bool EventControllerMotion::contains_pointer() const
{
  return gtk_event_controller_motion_contains_pointer(const_cast<GtkEventControllerMotion*>(gobj()));
}

bool EventControllerMotion::is_pointer() const
{
  return gtk_event_controller_motion_is_pointer(const_cast<GtkEventControllerMotion*>(gobj()));
}


Glib::SignalProxy<void(double, double)> EventControllerMotion::signal_enter()
{
  return Glib::SignalProxy<void(double, double) >(this, &EventControllerMotion_signal_enter_info);
}


Glib::SignalProxy<void()> EventControllerMotion::signal_leave()
{
  return Glib::SignalProxy<void() >(this, &EventControllerMotion_signal_leave_info);
}


Glib::SignalProxy<void(double, double)> EventControllerMotion::signal_motion()
{
  return Glib::SignalProxy<void(double, double) >(this, &EventControllerMotion_signal_motion_info);
}


Glib::PropertyProxy_ReadOnly< bool > EventControllerMotion::property_is_pointer() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "is-pointer");
}

Glib::PropertyProxy_ReadOnly< bool > EventControllerMotion::property_contains_pointer() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "contains-pointer");
}


} // namespace Gtk


